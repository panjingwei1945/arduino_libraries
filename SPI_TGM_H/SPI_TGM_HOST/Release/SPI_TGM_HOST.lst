
C:\Users\panjingwei\AppData\Local\Temp\VMBuilds\SPI_TGM_HOST\teensy36\Release/SPI_TGM_HOST.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 00 03 20 d1 01 00 00 f1 2a 00 00 a9 2a 00 00     ... .....*...*..
      10:	a9 2a 00 00 a9 2a 00 00 a9 2a 00 00 a9 2a 00 00     .*...*...*...*..
      20:	a9 2a 00 00 a9 2a 00 00 a9 2a 00 00 f1 2a 00 00     .*...*...*...*..
      30:	f1 2a 00 00 a9 2a 00 00 99 3d 00 00 9d 3e 00 00     .*...*...=...>..
      40:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 f1 2a 00 00     .*...*...*...*..
      50:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 f1 2a 00 00     .*...*...*...*..
      60:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 f1 2a 00 00     .*...*...*...*..
      70:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 f1 2a 00 00     .*...*...*...*..
      80:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 f1 2a 00 00     .*...*...*...*..
      90:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 f1 2a 00 00     .*...*...*...*..
      a0:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 f1 2a 00 00     .*...*...*...*..
      b0:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 31 42 00 00     .*...*...*..1B..
      c0:	f1 2a 00 00 5d 43 00 00 f1 2a 00 00 89 44 00 00     .*..]C...*...D..
      d0:	f1 2a 00 00 81 45 00 00 f1 2a 00 00 f1 2a 00 00     .*...E...*...*..
      e0:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 f1 2a 00 00     .*...*...*...*..
      f0:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 f1 2a 00 00     .*...*...*...*..
     100:	89 3f 00 00 9d 3f 00 00 b1 3f 00 00 c5 3f 00 00     .?...?...?...?..
     110:	f1 2a 00 00 15 30 00 00 f1 2a 00 00 f1 2a 00 00     .*...0...*...*..
     120:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 f1 2a 00 00     .*...*...*...*..
     130:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 f1 2a 00 00     .*...*...*...*..
     140:	f1 2a 00 00 f1 2a 00 00 79 46 00 00 f1 2a 00 00     .*...*..yF...*..
     150:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 f1 2a 00 00     .*...*...*...*..
     160:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 f1 2a 00 00     .*...*...*...*..
     170:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 f1 2a 00 00     .*...*...*...*..
     180:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 f1 2a 00 00     .*...*...*...*..
     190:	f1 2a 00 00 f1 2a 00 00 71 47 00 00 f1 2a 00 00     .*...*..qG...*..
     1a0:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 f1 2a 00 00     .*...*...*...*..
     1b0:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 f1 2a 00 00     .*...*...*...*..
     1c0:	f1 2a 00 00 f1 2a 00 00 f1 2a 00 00 f1 2a 00 00     .*...*...*...*..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	4b5c      	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	f64d 1228 	movw	r2, #55592	; 0xd928
     1de:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	bf00      	nop
	__asm__ volatile ("nop");
     1e2:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	f002 fc88 	bl	2af8 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	4b57      	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
     1ee:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	4a56      	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	4a56      	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	60da      	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	4b56      	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
     1fe:	601a      	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	4b55      	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	4a56      	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	601a      	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	4b56      	ldr	r3, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	781a      	ldrb	r2, [r3, #0]
     20a:	0711      	lsls	r1, r2, #28
     20c:	d503      	bpl.n	216 <ResetHandler+0x46>
     20e:	781a      	ldrb	r2, [r3, #0]
     210:	f042 0208 	orr.w	r2, r2, #8
     214:	701a      	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	4b53      	ldr	r3, [pc, #332]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	4953      	ldr	r1, [pc, #332]	; (368 <ResetHandler+0x198>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	22aa      	movs	r2, #170	; 0xaa
     21c:	701a      	strb	r2, [r3, #0]
     21e:	4a53      	ldr	r2, [pc, #332]	; (36c <ResetHandler+0x19c>)
     220:	4b53      	ldr	r3, [pc, #332]	; (370 <ResetHandler+0x1a0>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	428b      	cmp	r3, r1
     224:	d204      	bcs.n	230 <ResetHandler+0x60>
     226:	f852 0f04 	ldr.w	r0, [r2, #4]!
     22a:	f843 0b04 	str.w	r0, [r3], #4
     22e:	e7f8      	b.n	222 <ResetHandler+0x52>
     230:	4b50      	ldr	r3, [pc, #320]	; (374 <ResetHandler+0x1a4>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	4951      	ldr	r1, [pc, #324]	; (378 <ResetHandler+0x1a8>)
     234:	2200      	movs	r2, #0
     236:	428b      	cmp	r3, r1
     238:	d202      	bcs.n	240 <ResetHandler+0x70>
     23a:	f843 2b04 	str.w	r2, [r3], #4
     23e:	e7fa      	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	494e      	ldr	r1, [pc, #312]	; (37c <ResetHandler+0x1ac>)
     242:	4a4f      	ldr	r2, [pc, #316]	; (380 <ResetHandler+0x1b0>)
     244:	2300      	movs	r3, #0
     246:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     24a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     24e:	3301      	adds	r3, #1
     250:	2b74      	cmp	r3, #116	; 0x74
     252:	d1f8      	bne.n	246 <ResetHandler+0x76>
     254:	4b4b      	ldr	r3, [pc, #300]	; (384 <ResetHandler+0x1b4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	4a4c      	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	2180      	movs	r1, #128	; 0x80
     25a:	f803 1b01 	strb.w	r1, [r3], #1
     25e:	4293      	cmp	r3, r2
     260:	d1fb      	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	4b4a      	ldr	r3, [pc, #296]	; (38c <ResetHandler+0x1bc>)
     264:	4a45      	ldr	r2, [pc, #276]	; (37c <ResetHandler+0x1ac>)
     266:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	4b49      	ldr	r3, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26a:	228a      	movs	r2, #138	; 0x8a
     26c:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     272:	2224      	movs	r2, #36	; 0x24
     274:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	22a0      	movs	r2, #160	; 0xa0
     278:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	799a      	ldrb	r2, [r3, #6]
     27c:	0792      	lsls	r2, r2, #30
     27e:	d5fc      	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	799a      	ldrb	r2, [r3, #6]
     282:	06d4      	lsls	r4, r2, #27
     284:	d4fc      	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	4a43      	ldr	r2, [pc, #268]	; (394 <ResetHandler+0x1c4>)
     288:	7993      	ldrb	r3, [r2, #6]
     28a:	f003 030c 	and.w	r3, r3, #12
     28e:	2b08      	cmp	r3, #8
     290:	d1fa      	bne.n	288 <ResetHandler+0xb8>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     292:	4b41      	ldr	r3, [pc, #260]	; (398 <ResetHandler+0x1c8>)
     294:	2260      	movs	r2, #96	; 0x60
     296:	701a      	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     298:	3302      	adds	r3, #2
     29a:	781a      	ldrb	r2, [r3, #0]
     29c:	2a80      	cmp	r2, #128	; 0x80
     29e:	d1fc      	bne.n	29a <ResetHandler+0xca>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2a0:	4b3c      	ldr	r3, [pc, #240]	; (394 <ResetHandler+0x1c4>)
     2a2:	2201      	movs	r2, #1
     2a4:	711a      	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2a6:	225d      	movs	r2, #93	; 0x5d
     2a8:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2aa:	799a      	ldrb	r2, [r3, #6]
     2ac:	0690      	lsls	r0, r2, #26
     2ae:	d5fc      	bpl.n	2aa <ResetHandler+0xda>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2b0:	7999      	ldrb	r1, [r3, #6]
     2b2:	4a38      	ldr	r2, [pc, #224]	; (394 <ResetHandler+0x1c4>)
     2b4:	0649      	lsls	r1, r1, #25
     2b6:	d5fb      	bpl.n	2b0 <ResetHandler+0xe0>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2b8:	4b38      	ldr	r3, [pc, #224]	; (39c <ResetHandler+0x1cc>)
     2ba:	4939      	ldr	r1, [pc, #228]	; (3a0 <ResetHandler+0x1d0>)
     2bc:	6019      	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2be:	2100      	movs	r1, #0
     2c0:	6059      	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2c2:	2320      	movs	r3, #32
     2c4:	7013      	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2c6:	7993      	ldrb	r3, [r2, #6]
     2c8:	f003 030c 	and.w	r3, r3, #12
     2cc:	2b0c      	cmp	r3, #12
     2ce:	d1fa      	bne.n	2c6 <ResetHandler+0xf6>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2d0:	4b34      	ldr	r3, [pc, #208]	; (3a4 <ResetHandler+0x1d4>)
     2d2:	4a35      	ldr	r2, [pc, #212]	; (3a8 <ResetHandler+0x1d8>)
     2d4:	601a      	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2d6:	4a35      	ldr	r2, [pc, #212]	; (3ac <ResetHandler+0x1dc>)
     2d8:	4c35      	ldr	r4, [pc, #212]	; (3b0 <ResetHandler+0x1e0>)
     2da:	6813      	ldr	r3, [r2, #0]
     2dc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     2e0:	d103      	bne.n	2ea <ResetHandler+0x11a>
		RTC_SR = 0;
     2e2:	6023      	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2e4:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     2e8:	6013      	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	4b32      	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	4a32      	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	2200      	movs	r2, #0
     2f2:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	2207      	movs	r2, #7
     2f6:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	4a30      	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     302:	f002 fd2b 	bl	2d5c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	6823      	ldr	r3, [r4, #0]
     308:	07da      	lsls	r2, r3, #31
     30a:	d505      	bpl.n	318 <ResetHandler+0x148>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30c:	482c      	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     30e:	f002 fca7 	bl	2c60 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     312:	4b2c      	ldr	r3, [pc, #176]	; (3c4 <ResetHandler+0x1f4>)
     314:	4a2c      	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     316:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     318:	4b2c      	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31a:	781b      	ldrb	r3, [r3, #0]
     31c:	065b      	lsls	r3, r3, #25
     31e:	d509      	bpl.n	334 <ResetHandler+0x164>
     320:	4c28      	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     322:	4b29      	ldr	r3, [pc, #164]	; (3c8 <ResetHandler+0x1f8>)
     324:	6822      	ldr	r2, [r4, #0]
     326:	429a      	cmp	r2, r3
     328:	d104      	bne.n	334 <ResetHandler+0x164>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32a:	4825      	ldr	r0, [pc, #148]	; (3c0 <ResetHandler+0x1f0>)
     32c:	f002 fc98 	bl	2c60 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     330:	2300      	movs	r3, #0
     332:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     334:	f006 fdf2 	bl	6f1c <__libc_init_array>

	startup_late_hook();
     338:	f002 fbe4 	bl	2b04 <startup_late_hook>
	main();
     33c:	f003 fe4c 	bl	3fd8 <main>
     340:	e7fe      	b.n	340 <ResetHandler+0x170>
     342:	bf00      	nop
     344:	4005200e 	.word	0x4005200e
     348:	40048030 	.word	0x40048030
     34c:	00043f82 	.word	0x00043f82
     350:	2b000001 	.word	0x2b000001
     354:	e000ed88 	.word	0xe000ed88
     358:	e0082000 	.word	0xe0082000
     35c:	85000003 	.word	0x85000003
     360:	4007d002 	.word	0x4007d002
     364:	4007e000 	.word	0x4007e000
     368:	1fff170c 	.word	0x1fff170c
     36c:	00007d18 	.word	0x00007d18
     370:	1fff0730 	.word	0x1fff0730
     374:	1fff170c 	.word	0x1fff170c
     378:	1fff24f0 	.word	0x1fff24f0
     37c:	1fff0200 	.word	0x1fff0200
     380:	00000000 	.word	0x00000000
     384:	e000e400 	.word	0xe000e400
     388:	e000e464 	.word	0xe000e464
     38c:	e000ed08 	.word	0xe000ed08
     390:	40065000 	.word	0x40065000
     394:	40064000 	.word	0x40064000
     398:	4007e001 	.word	0x4007e001
     39c:	40048044 	.word	0x40048044
     3a0:	02060000 	.word	0x02060000
     3a4:	40048004 	.word	0x40048004
     3a8:	000710c0 	.word	0x000710c0
     3ac:	4003d010 	.word	0x4003d010
     3b0:	4003d014 	.word	0x4003d014
     3b4:	e000e014 	.word	0xe000e014
     3b8:	0002bf1f 	.word	0x0002bf1f
     3bc:	20200000 	.word	0x20200000
     3c0:	5dea4479 	.word	0x5dea4479
     3c4:	4003e01c 	.word	0x4003e01c
     3c8:	5a94c3a5 	.word	0x5a94c3a5
     3cc:	4007f000 	.word	0x4007f000
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff170c 	.word	0x1fff170c
     42c:	00000000 	.word	0x00000000
     430:	00007d1c 	.word	0x00007d1c

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff1710 	.word	0x1fff1710
     460:	00007d1c 	.word	0x00007d1c
     464:	1fff170c 	.word	0x1fff170c
     468:	00000000 	.word	0x00000000

0000046c <setup>:
#include "SPI_TGM_H.h"
#include "SPI.h"

void setup()
{
	SPI_TGM.init_TGM();
     46c:	4801      	ldr	r0, [pc, #4]	; (474 <setup+0x8>)
     46e:	f000 be97 	b.w	11a0 <SPI_TGMClass::init_TGM()>
     472:	bf00      	nop
     474:	1fff172c 	.word	0x1fff172c

00000478 <loop>:
}


void loop(){
     478:	b510      	push	{r4, lr}
	SPI_TGM.wait_command();
     47a:	4c06      	ldr	r4, [pc, #24]	; (494 <loop+0x1c>)
     47c:	4620      	mov	r0, r4
     47e:	f000 fe85 	bl	118c <SPI_TGMClass::wait_command()>
	SPI_TGM.read_tone();
     482:	4620      	mov	r0, r4
     484:	f001 f910 	bl	16a8 <SPI_TGMClass::read_tone()>
	SPI_TGM.set_tone();
     488:	4620      	mov	r0, r4
}
     48a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}


void loop(){
	SPI_TGM.wait_command();
	SPI_TGM.read_tone();
	SPI_TGM.set_tone();
     48e:	f001 b93b 	b.w	1708 <SPI_TGMClass::set_tone()>
     492:	bf00      	nop
     494:	1fff172c 	.word	0x1fff172c

00000498 <sweepLinear()>:

const uint16_t cosISI_temp[192] = {};
const byte cosVol_temp[192] = {};

uint32_t sweepLinear() {
	return (uint32_t)((float)sweep_fq0 + (sweep_linear_step * (float)curToneStep->LoopInd));
     498:	4b0a      	ldr	r3, [pc, #40]	; (4c4 <sweepLinear()+0x2c>)
     49a:	4a0b      	ldr	r2, [pc, #44]	; (4c8 <sweepLinear()+0x30>)
     49c:	681b      	ldr	r3, [r3, #0]
     49e:	edd2 7a00 	vldr	s15, [r2]
     4a2:	685b      	ldr	r3, [r3, #4]
     4a4:	ee07 3a10 	vmov	s14, r3
     4a8:	4b08      	ldr	r3, [pc, #32]	; (4cc <sweepLinear()+0x34>)
     4aa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
     4ae:	edd3 6a00 	vldr	s13, [r3]
     4b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
     4b6:	eee7 7a26 	vfma.f32	s15, s14, s13
}
     4ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     4be:	ee17 0a90 	vmov	r0, s15
     4c2:	4770      	bx	lr
     4c4:	1fff1b44 	.word	0x1fff1b44
     4c8:	1fff1b88 	.word	0x1fff1b88
     4cc:	1fff1f38 	.word	0x1fff1f38

000004d0 <sweepLinear2()>:
uint32_t sweepLinear2() {
	return (uint32_t)(sweep_fq1 + (sweep_linear_step2 * curToneStep->LoopInd));
     4d0:	4b0a      	ldr	r3, [pc, #40]	; (4fc <sweepLinear2()+0x2c>)
     4d2:	4a0b      	ldr	r2, [pc, #44]	; (500 <sweepLinear2()+0x30>)
     4d4:	681b      	ldr	r3, [r3, #0]
     4d6:	edd2 7a00 	vldr	s15, [r2]
     4da:	685b      	ldr	r3, [r3, #4]
     4dc:	ee07 3a10 	vmov	s14, r3
     4e0:	4b08      	ldr	r3, [pc, #32]	; (504 <sweepLinear2()+0x34>)
     4e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
     4e6:	edd3 6a00 	vldr	s13, [r3]
     4ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
     4ee:	eee7 7a26 	vfma.f32	s15, s14, s13
}
     4f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     4f6:	ee17 0a90 	vmov	r0, s15
     4fa:	4770      	bx	lr
     4fc:	1fff1b44 	.word	0x1fff1b44
     500:	1fff1b8c 	.word	0x1fff1b8c
     504:	1fff1794 	.word	0x1fff1794

00000508 <chord_fq()>:
	}
	return fq;
}

uint32_t chord_fq() {
	return chord_fq_array[curToneStep->LoopInd%chord_fq_num];
     508:	4a06      	ldr	r2, [pc, #24]	; (524 <chord_fq()+0x1c>)
     50a:	4b07      	ldr	r3, [pc, #28]	; (528 <chord_fq()+0x20>)
     50c:	6812      	ldr	r2, [r2, #0]
     50e:	881b      	ldrh	r3, [r3, #0]
     510:	6851      	ldr	r1, [r2, #4]
     512:	4806      	ldr	r0, [pc, #24]	; (52c <chord_fq()+0x24>)
     514:	b29b      	uxth	r3, r3
     516:	fbb1 f2f3 	udiv	r2, r1, r3
     51a:	fb03 1312 	mls	r3, r3, r2, r1
     51e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
     522:	4770      	bx	lr
     524:	1fff1b44 	.word	0x1fff1b44
     528:	1fff1798 	.word	0x1fff1798
     52c:	1fff1b94 	.word	0x1fff1b94

00000530 <sweepExp()>:
}
uint32_t sweepLinear2() {
	return (uint32_t)(sweep_fq1 + (sweep_linear_step2 * curToneStep->LoopInd));
}

uint32_t sweepExp() {
     530:	b570      	push	{r4, r5, r6, lr}
	return sweep_fq0 * pow(sweep_base, curToneStep->LoopInd);
     532:	4b11      	ldr	r3, [pc, #68]	; (578 <sweepExp()+0x48>)
}
uint32_t sweepLinear2() {
	return (uint32_t)(sweep_fq1 + (sweep_linear_step2 * curToneStep->LoopInd));
}

uint32_t sweepExp() {
     534:	b082      	sub	sp, #8
	return sweep_fq0 * pow(sweep_base, curToneStep->LoopInd);
     536:	6818      	ldr	r0, [r3, #0]
     538:	f006 f920 	bl	677c <__aeabi_ui2d>
     53c:	4b0f      	ldr	r3, [pc, #60]	; (57c <sweepExp()+0x4c>)
     53e:	4a10      	ldr	r2, [pc, #64]	; (580 <sweepExp()+0x50>)
     540:	681b      	ldr	r3, [r3, #0]
     542:	6816      	ldr	r6, [r2, #0]
     544:	4604      	mov	r4, r0
     546:	6858      	ldr	r0, [r3, #4]
     548:	460d      	mov	r5, r1
     54a:	f006 f917 	bl	677c <__aeabi_ui2d>
     54e:	e9cd 0100 	strd	r0, r1, [sp]
     552:	4630      	mov	r0, r6
     554:	f006 f934 	bl	67c0 <__aeabi_f2d>
     558:	ed9d 1b00 	vldr	d1, [sp]
     55c:	ec41 0b10 	vmov	d0, r0, r1
     560:	f004 fafa 	bl	4b58 <pow>
     564:	4620      	mov	r0, r4
     566:	ec53 2b10 	vmov	r2, r3, d0
     56a:	4629      	mov	r1, r5
     56c:	f006 f97c 	bl	6868 <__aeabi_dmul>
     570:	f006 fc52 	bl	6e18 <__aeabi_d2uiz>
}
     574:	b002      	add	sp, #8
     576:	bd70      	pop	{r4, r5, r6, pc}
     578:	1fff1b88 	.word	0x1fff1b88
     57c:	1fff1b44 	.word	0x1fff1b44
     580:	1fff1b80 	.word	0x1fff1b80

00000584 <IntervalTimer::~IntervalTimer()>:
public:
	IntervalTimer() {
		channel = NULL;
		nvic_priority = 128;
	}
	~IntervalTimer() {
     584:	b510      	push	{r4, lr}
     586:	4604      	mov	r4, r0
		end();
     588:	f003 fcdc 	bl	3f44 <IntervalTimer::end()>
	}
     58c:	4620      	mov	r0, r4
     58e:	bd10      	pop	{r4, pc}

00000590 <random_noise_fq()>:
	while (LOW == CACHE.new_info());
}

uint32_t random_noise_fq() {
	uint32_t fq, fq0, fq1;
	if (sweep_fq1 > sweep_fq0) {
     590:	4a27      	ldr	r2, [pc, #156]	; (630 <random_noise_fq()+0xa0>)
     592:	4b28      	ldr	r3, [pc, #160]	; (634 <random_noise_fq()+0xa4>)

void SPI_TGMClass::wait_command() {
	while (LOW == CACHE.new_info());
}

uint32_t random_noise_fq() {
     594:	b570      	push	{r4, r5, r6, lr}
	uint32_t fq, fq0, fq1;
	if (sweep_fq1 > sweep_fq0) {
     596:	6816      	ldr	r6, [r2, #0]
     598:	681d      	ldr	r5, [r3, #0]
     59a:	42ae      	cmp	r6, r5
     59c:	d802      	bhi.n	5a4 <random_noise_fq()+0x14>
     59e:	462b      	mov	r3, r5
     5a0:	4635      	mov	r5, r6
     5a2:	461e      	mov	r6, r3
	}
	else {
		fq0 = sweep_fq1;
		fq1 = sweep_fq0;
	}
	switch (sweep_mode) {
     5a4:	4b24      	ldr	r3, [pc, #144]	; (638 <random_noise_fq()+0xa8>)
     5a6:	781b      	ldrb	r3, [r3, #0]
     5a8:	3b05      	subs	r3, #5
     5aa:	2b03      	cmp	r3, #3
     5ac:	d818      	bhi.n	5e0 <random_noise_fq()+0x50>
     5ae:	e8df f003 	tbb	[pc, r3]
     5b2:	2c38      	.short	0x2c38
     5b4:	0218      	.short	0x0218
			(uint32_t)random(fq0, fq1) + \
			(uint32_t)random(fq0, fq1)) / 3;
		break;

	case SWEEP_NOISE_GAUSS3:
		fq = ((uint32_t)random(fq0, fq1) + \
     5b6:	4631      	mov	r1, r6
     5b8:	4628      	mov	r0, r5
     5ba:	f003 fd4d 	bl	4058 <random(long, long)>
			(uint32_t)random(fq0, fq1) + \
     5be:	4631      	mov	r1, r6
			(uint32_t)random(fq0, fq1) + \
			(uint32_t)random(fq0, fq1)) / 3;
		break;

	case SWEEP_NOISE_GAUSS3:
		fq = ((uint32_t)random(fq0, fq1) + \
     5c0:	4604      	mov	r4, r0
			(uint32_t)random(fq0, fq1) + \
     5c2:	4628      	mov	r0, r5
     5c4:	f003 fd48 	bl	4058 <random(long, long)>
			(uint32_t)random(fq0, fq1) + \
     5c8:	4631      	mov	r1, r6
			(uint32_t)random(fq0, fq1) + \
			(uint32_t)random(fq0, fq1)) / 3;
		break;

	case SWEEP_NOISE_GAUSS3:
		fq = ((uint32_t)random(fq0, fq1) + \
     5ca:	4404      	add	r4, r0
			(uint32_t)random(fq0, fq1) + \
			(uint32_t)random(fq0, fq1) + \
     5cc:	4628      	mov	r0, r5
     5ce:	f003 fd43 	bl	4058 <random(long, long)>
			(uint32_t)random(fq0, fq1)) / 4;
     5d2:	4631      	mov	r1, r6
			(uint32_t)random(fq0, fq1)) / 3;
		break;

	case SWEEP_NOISE_GAUSS3:
		fq = ((uint32_t)random(fq0, fq1) + \
			(uint32_t)random(fq0, fq1) + \
     5d4:	4404      	add	r4, r0
			(uint32_t)random(fq0, fq1) + \
			(uint32_t)random(fq0, fq1)) / 4;
     5d6:	4628      	mov	r0, r5
     5d8:	f003 fd3e 	bl	4058 <random(long, long)>
     5dc:	4420      	add	r0, r4
     5de:	0880      	lsrs	r0, r0, #2
		break;
	}
	return fq;
}
     5e0:	bd70      	pop	{r4, r5, r6, pc}
		fq = ((uint32_t)random(fq0, fq1) + \
			(uint32_t)random(fq0, fq1)) / 2;
		break;

	case SWEEP_NOISE_GAUSS2:
		fq = ((uint32_t)random(fq0, fq1) + \
     5e2:	4631      	mov	r1, r6
     5e4:	4628      	mov	r0, r5
     5e6:	f003 fd37 	bl	4058 <random(long, long)>
			(uint32_t)random(fq0, fq1) + \
     5ea:	4631      	mov	r1, r6
		fq = ((uint32_t)random(fq0, fq1) + \
			(uint32_t)random(fq0, fq1)) / 2;
		break;

	case SWEEP_NOISE_GAUSS2:
		fq = ((uint32_t)random(fq0, fq1) + \
     5ec:	4604      	mov	r4, r0
			(uint32_t)random(fq0, fq1) + \
     5ee:	4628      	mov	r0, r5
     5f0:	f003 fd32 	bl	4058 <random(long, long)>
			(uint32_t)random(fq0, fq1)) / 3;
     5f4:	4631      	mov	r1, r6
		fq = ((uint32_t)random(fq0, fq1) + \
			(uint32_t)random(fq0, fq1)) / 2;
		break;

	case SWEEP_NOISE_GAUSS2:
		fq = ((uint32_t)random(fq0, fq1) + \
     5f6:	4404      	add	r4, r0
			(uint32_t)random(fq0, fq1) + \
			(uint32_t)random(fq0, fq1)) / 3;
     5f8:	4628      	mov	r0, r5
     5fa:	f003 fd2d 	bl	4058 <random(long, long)>
     5fe:	4b0f      	ldr	r3, [pc, #60]	; (63c <random_noise_fq()+0xac>)
     600:	4420      	add	r0, r4
     602:	fba3 3000 	umull	r3, r0, r3, r0
     606:	0840      	lsrs	r0, r0, #1
		break;
     608:	bd70      	pop	{r4, r5, r6, pc}
	case SWEEP_NOISE_WHITE:
		fq = random(fq0, fq1);
		break;

	case SWEEP_NOISE_GAUSS1:
		fq = ((uint32_t)random(fq0, fq1) + \
     60a:	4631      	mov	r1, r6
     60c:	4628      	mov	r0, r5
     60e:	f003 fd23 	bl	4058 <random(long, long)>
			(uint32_t)random(fq0, fq1)) / 2;
     612:	4631      	mov	r1, r6
	case SWEEP_NOISE_WHITE:
		fq = random(fq0, fq1);
		break;

	case SWEEP_NOISE_GAUSS1:
		fq = ((uint32_t)random(fq0, fq1) + \
     614:	4604      	mov	r4, r0
			(uint32_t)random(fq0, fq1)) / 2;
     616:	4628      	mov	r0, r5
     618:	f003 fd1e 	bl	4058 <random(long, long)>
     61c:	4420      	add	r0, r4
     61e:	0840      	lsrs	r0, r0, #1
		break;
     620:	bd70      	pop	{r4, r5, r6, pc}
		fq0 = sweep_fq1;
		fq1 = sweep_fq0;
	}
	switch (sweep_mode) {
	case SWEEP_NOISE_WHITE:
		fq = random(fq0, fq1);
     622:	4631      	mov	r1, r6
     624:	4628      	mov	r0, r5
			(uint32_t)random(fq0, fq1) + \
			(uint32_t)random(fq0, fq1)) / 4;
		break;
	}
	return fq;
}
     626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		fq0 = sweep_fq1;
		fq1 = sweep_fq0;
	}
	switch (sweep_mode) {
	case SWEEP_NOISE_WHITE:
		fq = random(fq0, fq1);
     62a:	f003 bd15 	b.w	4058 <random(long, long)>
     62e:	bf00      	nop
     630:	1fff1b8c 	.word	0x1fff1b8c
     634:	1fff1b88 	.word	0x1fff1b88
     638:	1fff179a 	.word	0x1fff179a
     63c:	aaaaaaab 	.word	0xaaaaaaab

00000640 <timer1Func()>:
inline void _timer1_stop() {
	timer1.end();
}


void timer1Func() {
     640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	timer1_mode = TIMER1_INTERRUPTED;
	if (NULL == curToneStep || 0 == curToneStep->LoopNum) {
     644:	4e7d      	ldr	r6, [pc, #500]	; (83c <timer1Func()+0x1fc>)
	timer1.end();
}


void timer1Func() {
	timer1_mode = TIMER1_INTERRUPTED;
     646:	4d7e      	ldr	r5, [pc, #504]	; (840 <timer1Func()+0x200>)
	if (NULL == curToneStep || 0 == curToneStep->LoopNum) {
     648:	6833      	ldr	r3, [r6, #0]
inline void _timer1_stop() {
	timer1.end();
}


void timer1Func() {
     64a:	ed2d 8b02 	vpush	{d8}
	timer1_mode = TIMER1_INTERRUPTED;
     64e:	2202      	movs	r2, #2
inline void _timer1_stop() {
	timer1.end();
}


void timer1Func() {
     650:	b085      	sub	sp, #20
	timer1_mode = TIMER1_INTERRUPTED;
     652:	702a      	strb	r2, [r5, #0]
	if (NULL == curToneStep || 0 == curToneStep->LoopNum) {
     654:	2b00      	cmp	r3, #0
     656:	f000 80ed 	beq.w	834 <timer1Func()+0x1f4>
     65a:	681a      	ldr	r2, [r3, #0]
     65c:	2a00      	cmp	r2, #0
     65e:	f000 80e9 	beq.w	834 <timer1Func()+0x1f4>
#endif
	}
	else {
		/**********ISI***********/
		float interTimeTemp = 0;
		switch (curToneStep->ISI.flag) {
     662:	7a5a      	ldrb	r2, [r3, #9]
     664:	3a01      	subs	r2, #1
     666:	2a03      	cmp	r2, #3
     668:	d826      	bhi.n	6b8 <timer1Func()+0x78>
     66a:	e8df f012 	tbh	[pc, r2, lsl #1]
     66e:	0004      	.short	0x0004
     670:	03150307 	.word	0x03150307
     674:	032c      	.short	0x032c
		case TONESTEPIDLE: break;
		case TONESTEPDRT:
			timer1.begin(timer1Func, curToneStep->ISI.drtPar);
     676:	f8d3 200a 	ldr.w	r2, [r3, #10]
     67a:	ee07 2a90 	vmov	s15, r2
	}
	bool begin(void (*funct)(), long microseconds) {
		return begin(funct, (int)microseconds);
	}
	bool begin(void (*funct)(), float microseconds) {
		if (microseconds <= 0 || microseconds > MAX_PERIOD) return false;
     67e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     686:	d917      	bls.n	6b8 <timer1Func()+0x78>
     688:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 844 <timer1Func()+0x204>
     68c:	eef4 7ac7 	vcmpe.f32	s15, s14
     690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     694:	dc10      	bgt.n	6b8 <timer1Func()+0x78>
		uint32_t cycles = (float)(F_BUS / 1000000) * microseconds - 0.5;
     696:	eddf 6a6c 	vldr	s13, [pc, #432]	; 848 <timer1Func()+0x208>
     69a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
     69e:	eea7 7aa6 	vfma.f32	s14, s15, s13
     6a2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
     6a6:	ee17 2a90 	vmov	r2, s15
		if (cycles < 36) return false;
     6aa:	2a23      	cmp	r2, #35	; 0x23
     6ac:	d904      	bls.n	6b8 <timer1Func()+0x78>
		return beginCycles(funct, cycles);
     6ae:	4967      	ldr	r1, [pc, #412]	; (84c <timer1Func()+0x20c>)
     6b0:	4867      	ldr	r0, [pc, #412]	; (850 <timer1Func()+0x210>)
     6b2:	f003 fbfd 	bl	3eb0 <IntervalTimer::beginCycles(void (*)(), unsigned long)>
     6b6:	6833      	ldr	r3, [r6, #0]
			break;
		default: break;
		}

		/**********fq***********/
		switch (curToneStep->fq.flag) {
     6b8:	7e1a      	ldrb	r2, [r3, #24]
     6ba:	2a01      	cmp	r2, #1
     6bc:	f000 80e4 	beq.w	888 <timer1Func()+0x248>
     6c0:	2a04      	cmp	r2, #4
     6c2:	d10c      	bne.n	6de <timer1Func()+0x9e>
		case TONESTEPDRT:
			_set_fq(curToneStep->fq.drtPar);
			break;
		case TONESTEPARRAY: break;
		case TONESTEPFNC:
			if (NULL == curToneStep->fq.fnc) break;
     6c4:	f8d3 2023 	ldr.w	r2, [r3, #35]	; 0x23
     6c8:	b14a      	cbz	r2, 6de <timer1Func()+0x9e>
	_ad9850_data_wr(0);
}


inline void _set_fq(uint32_t fq) {
	if (curFq != fq) {
     6ca:	4b62      	ldr	r3, [pc, #392]	; (854 <timer1Func()+0x214>)
     6cc:	9301      	str	r3, [sp, #4]
     6ce:	461c      	mov	r4, r3
			_set_fq(curToneStep->fq.drtPar);
			break;
		case TONESTEPARRAY: break;
		case TONESTEPFNC:
			if (NULL == curToneStep->fq.fnc) break;
			_set_fq((*((uint32_fnc)curToneStep->fq.fnc))());
     6d0:	4790      	blx	r2
	_ad9850_data_wr(0);
}


inline void _set_fq(uint32_t fq) {
	if (curFq != fq) {
     6d2:	6823      	ldr	r3, [r4, #0]
     6d4:	4283      	cmp	r3, r0
			_set_fq(curToneStep->fq.drtPar);
			break;
		case TONESTEPARRAY: break;
		case TONESTEPFNC:
			if (NULL == curToneStep->fq.fnc) break;
			_set_fq((*((uint32_fnc)curToneStep->fq.fnc))());
     6d6:	4680      	mov	r8, r0
	_ad9850_data_wr(0);
}


inline void _set_fq(uint32_t fq) {
	if (curFq != fq) {
     6d8:	f040 8334 	bne.w	d44 <timer1Func()+0x704>
     6dc:	6833      	ldr	r3, [r6, #0]
		default: break;
		}

		/**********vol***********/
		byte volTemp = 0;
		switch (curToneStep->vol.flag) {
     6de:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
     6e2:	3a01      	subs	r2, #1
     6e4:	2a03      	cmp	r2, #3
     6e6:	f200 8086 	bhi.w	7f6 <timer1Func()+0x1b6>
     6ea:	e8df f012 	tbh	[pc, r2, lsl #1]
     6ee:	0262      	.short	0x0262
     6f0:	017e01fd 	.word	0x017e01fd
     6f4:	0004      	.short	0x0004
			else {
				_set_vol(0);
			}
			break;
		case TONESTEPFNC:
			if (NULL == curToneStep->vol.fnc) break;
     6f6:	f8d3 2032 	ldr.w	r2, [r3, #50]	; 0x32
     6fa:	2a00      	cmp	r2, #0
     6fc:	d07b      	beq.n	7f6 <timer1Func()+0x1b6>
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
     6fe:	4c56      	ldr	r4, [pc, #344]	; (858 <timer1Func()+0x218>)
				_set_vol(0);
			}
			break;
		case TONESTEPFNC:
			if (NULL == curToneStep->vol.fnc) break;
			_set_vol((*((byte_fnc)curToneStep->vol.fnc))());
     700:	4790      	blx	r2
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
     702:	7823      	ldrb	r3, [r4, #0]
     704:	4283      	cmp	r3, r0
				_set_vol(0);
			}
			break;
		case TONESTEPFNC:
			if (NULL == curToneStep->vol.fnc) break;
			_set_vol((*((byte_fnc)curToneStep->vol.fnc))());
     706:	4607      	mov	r7, r0
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
     708:	f000 84aa 	beq.w	1060 <timer1Func()+0xa20>
	pinMode(PGA2310_cs, OUTPUT);
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _pga2310_wr(byte LGain, byte RGain) {
	digitalWrite(PGA2310_cs, LOW);
     70c:	2015      	movs	r0, #21
     70e:	2100      	movs	r1, #0
     710:	f002 fab8 	bl	2c84 <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     714:	4a51      	ldr	r2, [pc, #324]	; (85c <timer1Func()+0x21c>)
     716:	7ad0      	ldrb	r0, [r2, #11]
     718:	2800      	cmp	r0, #0
     71a:	d02a      	beq.n	772 <timer1Func()+0x132>
			__disable_irq();
     71c:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     71e:	7ad1      	ldrb	r1, [r2, #11]
     720:	07c8      	lsls	r0, r1, #31
     722:	460b      	mov	r3, r1
     724:	d509      	bpl.n	73a <timer1Func()+0xfa>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     726:	f8df e158 	ldr.w	lr, [pc, #344]	; 880 <timer1Func()+0x240>
     72a:	68d3      	ldr	r3, [r2, #12]
     72c:	f8de 0000 	ldr.w	r0, [lr]
     730:	4018      	ands	r0, r3
     732:	61d0      	str	r0, [r2, #28]
     734:	460b      	mov	r3, r1
				NVIC_ICER0 = interruptSave[0];
     736:	f8ce 0000 	str.w	r0, [lr]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     73a:	0788      	lsls	r0, r1, #30
     73c:	d506      	bpl.n	74c <timer1Func()+0x10c>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     73e:	4948      	ldr	r1, [pc, #288]	; (860 <timer1Func()+0x220>)
     740:	6913      	ldr	r3, [r2, #16]
     742:	6808      	ldr	r0, [r1, #0]
     744:	4003      	ands	r3, r0
     746:	6213      	str	r3, [r2, #32]
				NVIC_ICER1 = interruptSave[1];
     748:	600b      	str	r3, [r1, #0]
     74a:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     74c:	0759      	lsls	r1, r3, #29
     74e:	d506      	bpl.n	75e <timer1Func()+0x11e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     750:	4944      	ldr	r1, [pc, #272]	; (864 <timer1Func()+0x224>)
     752:	6953      	ldr	r3, [r2, #20]
     754:	6808      	ldr	r0, [r1, #0]
     756:	4003      	ands	r3, r0
     758:	6253      	str	r3, [r2, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
     75a:	600b      	str	r3, [r1, #0]
     75c:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     75e:	0718      	lsls	r0, r3, #28
     760:	d505      	bpl.n	76e <timer1Func()+0x12e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     762:	4941      	ldr	r1, [pc, #260]	; (868 <timer1Func()+0x228>)
     764:	6993      	ldr	r3, [r2, #24]
     766:	6808      	ldr	r0, [r1, #0]
     768:	4003      	ands	r3, r0
     76a:	6293      	str	r3, [r2, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
     76c:	600b      	str	r3, [r1, #0]
			}
			#endif
			__enable_irq();
     76e:	b662      	cpsie	i
     770:	7ad0      	ldrb	r0, [r2, #11]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
     772:	6813      	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
     774:	68d9      	ldr	r1, [r3, #12]
     776:	f1b1 4f38 	cmp.w	r1, #3087007744	; 0xb8000000
     77a:	d00d      	beq.n	798 <timer1Func()+0x158>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
     77c:	f8df e104 	ldr.w	lr, [pc, #260]	; 884 <timer1Func()+0x244>
     780:	f8c3 e000 	str.w	lr, [r3]
			port().CTAR0 = settings.ctar;
     784:	f04f 4e38 	mov.w	lr, #3087007744	; 0xb8000000
     788:	f8c3 e00c 	str.w	lr, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     78c:	4937      	ldr	r1, [pc, #220]	; (86c <timer1Func()+0x22c>)
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
     78e:	f04f 4e78 	mov.w	lr, #4160749568	; 0xf8000000
     792:	f8c3 e010 	str.w	lr, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     796:	6019      	str	r1, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     798:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     79c:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
     79e:	635f      	str	r7, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     7a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
     7a2:	2900      	cmp	r1, #0
     7a4:	dafc      	bge.n	7a0 <timer1Func()+0x160>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     7a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     7aa:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     7ae:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
     7b0:	635f      	str	r7, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     7b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
     7b4:	2900      	cmp	r1, #0
     7b6:	dafc      	bge.n	7b2 <timer1Func()+0x172>
		return port().POPR;
     7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     7ba:	b1b0      	cbz	r0, 7ea <timer1Func()+0x1aa>
			if (interruptMasksUsed & 0x01) {
     7bc:	07c1      	lsls	r1, r0, #31
     7be:	d503      	bpl.n	7c8 <timer1Func()+0x188>
				NVIC_ISER0 = interruptSave[0];
     7c0:	4b2b      	ldr	r3, [pc, #172]	; (870 <timer1Func()+0x230>)
     7c2:	69d1      	ldr	r1, [r2, #28]
     7c4:	6019      	str	r1, [r3, #0]
     7c6:	7ad0      	ldrb	r0, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     7c8:	0783      	lsls	r3, r0, #30
     7ca:	d503      	bpl.n	7d4 <timer1Func()+0x194>
				NVIC_ISER1 = interruptSave[1];
     7cc:	4b29      	ldr	r3, [pc, #164]	; (874 <timer1Func()+0x234>)
     7ce:	6a11      	ldr	r1, [r2, #32]
     7d0:	6019      	str	r1, [r3, #0]
     7d2:	7ad0      	ldrb	r0, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     7d4:	0741      	lsls	r1, r0, #29
     7d6:	d503      	bpl.n	7e0 <timer1Func()+0x1a0>
				NVIC_ISER2 = interruptSave[2];
     7d8:	4b27      	ldr	r3, [pc, #156]	; (878 <timer1Func()+0x238>)
     7da:	6a51      	ldr	r1, [r2, #36]	; 0x24
     7dc:	6019      	str	r1, [r3, #0]
     7de:	7ad0      	ldrb	r0, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     7e0:	0703      	lsls	r3, r0, #28
     7e2:	d502      	bpl.n	7ea <timer1Func()+0x1aa>
				NVIC_ISER3 = interruptSave[3];
     7e4:	4b25      	ldr	r3, [pc, #148]	; (87c <timer1Func()+0x23c>)
     7e6:	6a92      	ldr	r2, [r2, #40]	; 0x28
     7e8:	601a      	str	r2, [r3, #0]
	SPI.beginTransaction(SPISettings(PGA2310SPEED, MSBFIRST, SPI_MODE0));
	SPI.transfer(LGain);//left channel
	SPI.transfer(RGain);//right channel
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
     7ea:	2101      	movs	r1, #1
     7ec:	2015      	movs	r0, #21
     7ee:	f002 fa49 	bl	2c84 <digitalWrite>
     7f2:	6833      	ldr	r3, [r6, #0]
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
		_pga2310_wr(vol, vol);
		curVol = vol;
     7f4:	7027      	strb	r7, [r4, #0]
     7f6:	685a      	ldr	r2, [r3, #4]
		}


		curToneStep->LoopInd++;

		if (curToneStep->LoopInd >= curToneStep->LoopNum) {
     7f8:	6819      	ldr	r1, [r3, #0]
			break;
		default: break;
		}


		curToneStep->LoopInd++;
     7fa:	3201      	adds	r2, #1

		if (curToneStep->LoopInd >= curToneStep->LoopNum) {
     7fc:	428a      	cmp	r2, r1
			break;
		default: break;
		}


		curToneStep->LoopInd++;
     7fe:	605a      	str	r2, [r3, #4]

		if (curToneStep->LoopInd >= curToneStep->LoopNum) {
     800:	d311      	bcc.n	826 <timer1Func()+0x1e6>
			curToneStep->LoopInd = 0; //prepare for CycleToneStep1.
			if (0 != curToneStep->CycleNum1) {
     802:	f8d3 1036 	ldr.w	r1, [r3, #54]	; 0x36


		curToneStep->LoopInd++;

		if (curToneStep->LoopInd >= curToneStep->LoopNum) {
			curToneStep->LoopInd = 0; //prepare for CycleToneStep1.
     806:	2200      	movs	r2, #0
     808:	711a      	strb	r2, [r3, #4]
     80a:	715a      	strb	r2, [r3, #5]
     80c:	719a      	strb	r2, [r3, #6]
     80e:	71da      	strb	r2, [r3, #7]
			if (0 != curToneStep->CycleNum1) {
     810:	2900      	cmp	r1, #0
     812:	f040 8251 	bne.w	cb8 <timer1Func()+0x678>
				curToneStep->CycleNum1--;
				curToneStep = curToneStep->CycleToneStep1;
			}
			else {
				if (0 != curToneStep->CycleNum2) {
     816:	f8d3 203e 	ldr.w	r2, [r3, #62]	; 0x3e
     81a:	2a00      	cmp	r2, #0
     81c:	f040 8274 	bne.w	d08 <timer1Func()+0x6c8>
					curToneStep->CycleNum2--;
					curToneStep = curToneStep->CycleToneStep2;
				}
				else {
					curToneStep = curToneStep->NextToneStep;
     820:	f8d3 3046 	ldr.w	r3, [r3, #70]	; 0x46
     824:	6033      	str	r3, [r6, #0]
				}
			}
		}
	}
	timer1_mode = TIMER1_RUNNING;
     826:	2301      	movs	r3, #1
     828:	702b      	strb	r3, [r5, #0]
}
     82a:	b005      	add	sp, #20
     82c:	ecbd 8b02 	vpop	{d8}
     830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
uint32_t sweepExp() {
	return sweep_fq0 * pow(sweep_base, curToneStep->LoopInd);
}

inline void _timer1_stop() {
	timer1.end();
     834:	4806      	ldr	r0, [pc, #24]	; (850 <timer1Func()+0x210>)
     836:	f003 fb85 	bl	3f44 <IntervalTimer::end()>
     83a:	e7f4      	b.n	826 <timer1Func()+0x1e6>
     83c:	1fff1b44 	.word	0x1fff1b44
     840:	1fff1728 	.word	0x1fff1728
     844:	4c888889 	.word	0x4c888889
     848:	42700000 	.word	0x42700000
     84c:	00000641 	.word	0x00000641
     850:	1fff1a9c 	.word	0x1fff1a9c
     854:	1fff1b40 	.word	0x1fff1b40
     858:	1fff1b84 	.word	0x1fff1b84
     85c:	1fff0dd0 	.word	0x1fff0dd0
     860:	e000e184 	.word	0xe000e184
     864:	e000e188 	.word	0xe000e188
     868:	e000e18c 	.word	0xe000e18c
     86c:	803f0000 	.word	0x803f0000
     870:	e000e100 	.word	0xe000e100
     874:	e000e104 	.word	0xe000e104
     878:	e000e108 	.word	0xe000e108
     87c:	e000e10c 	.word	0xe000e10c
     880:	e000e180 	.word	0xe000e180
     884:	003f4001 	.word	0x003f4001

		/**********fq***********/
		switch (curToneStep->fq.flag) {
		case TONESTEPIDLE: break;
		case TONESTEPDRT:
			_set_fq(curToneStep->fq.drtPar);
     888:	f8d3 2019 	ldr.w	r2, [r3, #25]
     88c:	ee08 2a10 	vmov	s16, r2
	_ad9850_data_wr(0);
}


inline void _set_fq(uint32_t fq) {
	if (curFq != fq) {
     890:	4a8a      	ldr	r2, [pc, #552]	; (abc <timer1Func()+0x47c>)
     892:	9201      	str	r2, [sp, #4]

		/**********fq***********/
		switch (curToneStep->fq.flag) {
		case TONESTEPIDLE: break;
		case TONESTEPDRT:
			_set_fq(curToneStep->fq.drtPar);
     894:	eebc 8ac8 	vcvt.u32.f32	s16, s16
	_ad9850_data_wr(0);
}


inline void _set_fq(uint32_t fq) {
	if (curFq != fq) {
     898:	6812      	ldr	r2, [r2, #0]
     89a:	ee18 1a10 	vmov	r1, s16
     89e:	428a      	cmp	r2, r1
     8a0:	f43f af1d 	beq.w	6de <timer1Func()+0x9e>
     8a4:	eef8 7a48 	vcvt.f32.u32	s15, s16
     8a8:	ed9f 7a85 	vldr	s14, [pc, #532]	; ac0 <timer1Func()+0x480>
     8ac:	4f85      	ldr	r7, [pc, #532]	; (ac4 <timer1Func()+0x484>)
     8ae:	ee67 7a87 	vmul.f32	s15, s15, s14
     8b2:	f107 0920 	add.w	r9, r7, #32
     8b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		_ad9850_wr_parallel(fq_convert(fq));
     8ba:	463c      	mov	r4, r7
     8bc:	edcd 7a02 	vstr	s15, [sp, #8]
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
     8c0:	f854 0f04 	ldr.w	r0, [r4, #4]!
     8c4:	2100      	movs	r1, #0
     8c6:	b2c0      	uxtb	r0, r0
     8c8:	f002 f9dc 	bl	2c84 <digitalWrite>
     8cc:	45a1      	cmp	r9, r4
     8ce:	d1f7      	bne.n	8c0 <timer1Func()+0x280>

inline void _ad9850_wr_parallel(uint32_t fq) {
	uint8_t * data = (uint8_t *)&fq;

	_ad9850_data_wr(0);
	digitalWrite(AD9850_w_clk, HIGH);
     8d0:	2101      	movs	r1, #1
     8d2:	2022      	movs	r0, #34	; 0x22
     8d4:	f002 f9d6 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
     8d8:	2100      	movs	r1, #0
     8da:	2022      	movs	r0, #34	; 0x22
     8dc:	f002 f9d2 	bl	2c84 <digitalWrite>

	_ad9850_data_wr(data[3]);
     8e0:	f8df 81e0 	ldr.w	r8, [pc, #480]	; ac4 <timer1Func()+0x484>
     8e4:	f99d b00b 	ldrsb.w	fp, [sp, #11]
     8e8:	2400      	movs	r4, #0
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
     8ea:	f04f 0a01 	mov.w	sl, #1
     8ee:	fa0a f104 	lsl.w	r1, sl, r4
     8f2:	f858 0f04 	ldr.w	r0, [r8, #4]!
     8f6:	ea0b 0101 	and.w	r1, fp, r1
     8fa:	b2c9      	uxtb	r1, r1
     8fc:	3401      	adds	r4, #1
     8fe:	b2c0      	uxtb	r0, r0
     900:	f002 f9c0 	bl	2c84 <digitalWrite>
     904:	2c08      	cmp	r4, #8
     906:	d1f2      	bne.n	8ee <timer1Func()+0x2ae>
	_ad9850_data_wr(0);
	digitalWrite(AD9850_w_clk, HIGH);
	digitalWrite(AD9850_w_clk, LOW);

	_ad9850_data_wr(data[3]);
	digitalWrite(AD9850_w_clk, HIGH);
     908:	2101      	movs	r1, #1
     90a:	2022      	movs	r0, #34	; 0x22
     90c:	f002 f9ba 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
     910:	2100      	movs	r1, #0
     912:	2022      	movs	r0, #34	; 0x22
     914:	f002 f9b6 	bl	2c84 <digitalWrite>

	_ad9850_data_wr(data[2]);
     918:	f8df 81a8 	ldr.w	r8, [pc, #424]	; ac4 <timer1Func()+0x484>
     91c:	f99d b00a 	ldrsb.w	fp, [sp, #10]
     920:	2400      	movs	r4, #0
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
     922:	f04f 0a01 	mov.w	sl, #1
     926:	fa0a f104 	lsl.w	r1, sl, r4
     92a:	f858 0f04 	ldr.w	r0, [r8, #4]!
     92e:	ea0b 0101 	and.w	r1, fp, r1
     932:	b2c9      	uxtb	r1, r1
     934:	3401      	adds	r4, #1
     936:	b2c0      	uxtb	r0, r0
     938:	f002 f9a4 	bl	2c84 <digitalWrite>
     93c:	2c08      	cmp	r4, #8
     93e:	d1f2      	bne.n	926 <timer1Func()+0x2e6>
	_ad9850_data_wr(data[3]);
	digitalWrite(AD9850_w_clk, HIGH);
	digitalWrite(AD9850_w_clk, LOW);

	_ad9850_data_wr(data[2]);
	digitalWrite(AD9850_w_clk, HIGH);
     940:	2101      	movs	r1, #1
     942:	2022      	movs	r0, #34	; 0x22
     944:	f002 f99e 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
     948:	2100      	movs	r1, #0
     94a:	2022      	movs	r0, #34	; 0x22
     94c:	f002 f99a 	bl	2c84 <digitalWrite>

	_ad9850_data_wr(data[1]);
     950:	f8df 8170 	ldr.w	r8, [pc, #368]	; ac4 <timer1Func()+0x484>
     954:	f99d b009 	ldrsb.w	fp, [sp, #9]
     958:	2400      	movs	r4, #0
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
     95a:	f04f 0a01 	mov.w	sl, #1
     95e:	fa0a f104 	lsl.w	r1, sl, r4
     962:	f858 0f04 	ldr.w	r0, [r8, #4]!
     966:	ea0b 0101 	and.w	r1, fp, r1
     96a:	b2c9      	uxtb	r1, r1
     96c:	3401      	adds	r4, #1
     96e:	b2c0      	uxtb	r0, r0
     970:	f002 f988 	bl	2c84 <digitalWrite>
     974:	2c08      	cmp	r4, #8
     976:	d1f2      	bne.n	95e <timer1Func()+0x31e>
	_ad9850_data_wr(data[2]);
	digitalWrite(AD9850_w_clk, HIGH);
	digitalWrite(AD9850_w_clk, LOW);

	_ad9850_data_wr(data[1]);
	digitalWrite(AD9850_w_clk, HIGH);
     978:	2101      	movs	r1, #1
     97a:	2022      	movs	r0, #34	; 0x22
     97c:	f002 f982 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
     980:	2100      	movs	r1, #0
     982:	2022      	movs	r0, #34	; 0x22
     984:	f002 f97e 	bl	2c84 <digitalWrite>

	_ad9850_data_wr(data[0]);
     988:	f8df 8138 	ldr.w	r8, [pc, #312]	; ac4 <timer1Func()+0x484>
     98c:	f99d b008 	ldrsb.w	fp, [sp, #8]
     990:	2400      	movs	r4, #0
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
     992:	f04f 0a01 	mov.w	sl, #1
     996:	fa0a f104 	lsl.w	r1, sl, r4
     99a:	f858 0f04 	ldr.w	r0, [r8, #4]!
     99e:	ea0b 0101 	and.w	r1, fp, r1
     9a2:	b2c9      	uxtb	r1, r1
     9a4:	3401      	adds	r4, #1
     9a6:	b2c0      	uxtb	r0, r0
     9a8:	f002 f96c 	bl	2c84 <digitalWrite>
     9ac:	2c08      	cmp	r4, #8
     9ae:	d1f2      	bne.n	996 <timer1Func()+0x356>
	_ad9850_data_wr(data[1]);
	digitalWrite(AD9850_w_clk, HIGH);
	digitalWrite(AD9850_w_clk, LOW);

	_ad9850_data_wr(data[0]);
	digitalWrite(AD9850_w_clk, HIGH);
     9b0:	2101      	movs	r1, #1
     9b2:	2022      	movs	r0, #34	; 0x22
     9b4:	f002 f966 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
     9b8:	2100      	movs	r1, #0
     9ba:	2022      	movs	r0, #34	; 0x22
     9bc:	f002 f962 	bl	2c84 <digitalWrite>

	digitalWrite(AD9850_fq_up, HIGH);
     9c0:	2101      	movs	r1, #1
     9c2:	2023      	movs	r0, #35	; 0x23
     9c4:	f002 f95e 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_fq_up, LOW);
     9c8:	2100      	movs	r1, #0
     9ca:	2023      	movs	r0, #35	; 0x23
     9cc:	f002 f95a 	bl	2c84 <digitalWrite>
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
     9d0:	f857 0f04 	ldr.w	r0, [r7, #4]!
     9d4:	2100      	movs	r1, #0
     9d6:	b2c0      	uxtb	r0, r0
     9d8:	f002 f954 	bl	2c84 <digitalWrite>
     9dc:	45b9      	cmp	r9, r7
     9de:	d1f7      	bne.n	9d0 <timer1Func()+0x390>


inline void _set_fq(uint32_t fq) {
	if (curFq != fq) {
		_ad9850_wr_parallel(fq_convert(fq));
		curFq = fq;
     9e0:	9b01      	ldr	r3, [sp, #4]
     9e2:	ed83 8a00 	vstr	s16, [r3]
     9e6:	6833      	ldr	r3, [r6, #0]
     9e8:	e679      	b.n	6de <timer1Func()+0x9e>
			else {
				_set_vol(0);
			}
			break;
		case TONESTEPARRAYREV:
			volTemp = ((byte *)(curToneStep->vol.arrayPar))[curToneStep->vol.array_Size - 1 - curToneStep->LoopInd];
     9ea:	685a      	ldr	r2, [r3, #4]
     9ec:	8e19      	ldrh	r1, [r3, #48]	; 0x30
     9ee:	6adc      	ldr	r4, [r3, #44]	; 0x2c
			if (curToneStep->targetVol > volTemp) {
     9f0:	7a18      	ldrb	r0, [r3, #8]
			else {
				_set_vol(0);
			}
			break;
		case TONESTEPARRAYREV:
			volTemp = ((byte *)(curToneStep->vol.arrayPar))[curToneStep->vol.array_Size - 1 - curToneStep->LoopInd];
     9f2:	1a89      	subs	r1, r1, r2
     9f4:	4421      	add	r1, r4
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
     9f6:	4c34      	ldr	r4, [pc, #208]	; (ac8 <timer1Func()+0x488>)
			else {
				_set_vol(0);
			}
			break;
		case TONESTEPARRAYREV:
			volTemp = ((byte *)(curToneStep->vol.arrayPar))[curToneStep->vol.array_Size - 1 - curToneStep->LoopInd];
     9f8:	f811 7c01 	ldrb.w	r7, [r1, #-1]
			if (curToneStep->targetVol > volTemp) {
     9fc:	4287      	cmp	r7, r0
     9fe:	f080 824a 	bcs.w	e96 <timer1Func()+0x856>
				_set_vol(curToneStep->targetVol - volTemp);
     a02:	1bc0      	subs	r0, r0, r7
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
     a04:	7821      	ldrb	r1, [r4, #0]
			}
			break;
		case TONESTEPARRAYREV:
			volTemp = ((byte *)(curToneStep->vol.arrayPar))[curToneStep->vol.array_Size - 1 - curToneStep->LoopInd];
			if (curToneStep->targetVol > volTemp) {
				_set_vol(curToneStep->targetVol - volTemp);
     a06:	b2c7      	uxtb	r7, r0
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
     a08:	42b9      	cmp	r1, r7
     a0a:	f43f aef5 	beq.w	7f8 <timer1Func()+0x1b8>
	pinMode(PGA2310_cs, OUTPUT);
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _pga2310_wr(byte LGain, byte RGain) {
	digitalWrite(PGA2310_cs, LOW);
     a0e:	2015      	movs	r0, #21
     a10:	2100      	movs	r1, #0
     a12:	f002 f937 	bl	2c84 <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     a16:	4a2d      	ldr	r2, [pc, #180]	; (acc <timer1Func()+0x48c>)
     a18:	7ad0      	ldrb	r0, [r2, #11]
     a1a:	2800      	cmp	r0, #0
     a1c:	d02a      	beq.n	a74 <timer1Func()+0x434>
			__disable_irq();
     a1e:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     a20:	7ad1      	ldrb	r1, [r2, #11]
     a22:	07c8      	lsls	r0, r1, #31
     a24:	460b      	mov	r3, r1
     a26:	d509      	bpl.n	a3c <timer1Func()+0x3fc>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     a28:	f8df e0b4 	ldr.w	lr, [pc, #180]	; ae0 <timer1Func()+0x4a0>
     a2c:	68d3      	ldr	r3, [r2, #12]
     a2e:	f8de 0000 	ldr.w	r0, [lr]
     a32:	4018      	ands	r0, r3
     a34:	61d0      	str	r0, [r2, #28]
     a36:	460b      	mov	r3, r1
				NVIC_ICER0 = interruptSave[0];
     a38:	f8ce 0000 	str.w	r0, [lr]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     a3c:	0788      	lsls	r0, r1, #30
     a3e:	d506      	bpl.n	a4e <timer1Func()+0x40e>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     a40:	4923      	ldr	r1, [pc, #140]	; (ad0 <timer1Func()+0x490>)
     a42:	6913      	ldr	r3, [r2, #16]
     a44:	6808      	ldr	r0, [r1, #0]
     a46:	4003      	ands	r3, r0
     a48:	6213      	str	r3, [r2, #32]
				NVIC_ICER1 = interruptSave[1];
     a4a:	600b      	str	r3, [r1, #0]
     a4c:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     a4e:	0759      	lsls	r1, r3, #29
     a50:	d506      	bpl.n	a60 <timer1Func()+0x420>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     a52:	4920      	ldr	r1, [pc, #128]	; (ad4 <timer1Func()+0x494>)
     a54:	6953      	ldr	r3, [r2, #20]
     a56:	6808      	ldr	r0, [r1, #0]
     a58:	4003      	ands	r3, r0
     a5a:	6253      	str	r3, [r2, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
     a5c:	600b      	str	r3, [r1, #0]
     a5e:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     a60:	071b      	lsls	r3, r3, #28
     a62:	d505      	bpl.n	a70 <timer1Func()+0x430>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     a64:	491c      	ldr	r1, [pc, #112]	; (ad8 <timer1Func()+0x498>)
     a66:	6993      	ldr	r3, [r2, #24]
     a68:	6808      	ldr	r0, [r1, #0]
     a6a:	4003      	ands	r3, r0
     a6c:	6293      	str	r3, [r2, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
     a6e:	600b      	str	r3, [r1, #0]
			}
			#endif
			__enable_irq();
     a70:	b662      	cpsie	i
     a72:	7ad0      	ldrb	r0, [r2, #11]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
     a74:	6813      	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
     a76:	68d9      	ldr	r1, [r3, #12]
     a78:	f1b1 4f38 	cmp.w	r1, #3087007744	; 0xb8000000
     a7c:	d00d      	beq.n	a9a <timer1Func()+0x45a>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
     a7e:	f8df e064 	ldr.w	lr, [pc, #100]	; ae4 <timer1Func()+0x4a4>
     a82:	f8c3 e000 	str.w	lr, [r3]
			port().CTAR0 = settings.ctar;
     a86:	f04f 4e38 	mov.w	lr, #3087007744	; 0xb8000000
     a8a:	f8c3 e00c 	str.w	lr, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     a8e:	4913      	ldr	r1, [pc, #76]	; (adc <timer1Func()+0x49c>)
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
     a90:	f04f 4e78 	mov.w	lr, #4160749568	; 0xf8000000
     a94:	f8c3 e010 	str.w	lr, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     a98:	6019      	str	r1, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     a9a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     a9e:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
     aa0:	635f      	str	r7, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     aa2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
     aa4:	2900      	cmp	r1, #0
     aa6:	dafc      	bge.n	aa2 <timer1Func()+0x462>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     aa8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     aac:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     ab0:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
     ab2:	635f      	str	r7, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     ab4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
     ab6:	2900      	cmp	r1, #0
     ab8:	dafc      	bge.n	ab4 <timer1Func()+0x474>
     aba:	e67d      	b.n	7b8 <timer1Func()+0x178>
     abc:	1fff1b40 	.word	0x1fff1b40
     ac0:	4209705f 	.word	0x4209705f
     ac4:	1fff0aa8 	.word	0x1fff0aa8
     ac8:	1fff1b84 	.word	0x1fff1b84
     acc:	1fff0dd0 	.word	0x1fff0dd0
     ad0:	e000e184 	.word	0xe000e184
     ad4:	e000e188 	.word	0xe000e188
     ad8:	e000e18c 	.word	0xe000e18c
     adc:	803f0000 	.word	0x803f0000
     ae0:	e000e180 	.word	0xe000e180
     ae4:	003f4001 	.word	0x003f4001
		case TONESTEPIDLE: break;
		case TONESTEPDRT:
			_set_vol(curToneStep->vol.drtPar);
			break;
		case TONESTEPARRAY:
			volTemp = ((byte *)(curToneStep->vol.arrayPar))[curToneStep->LoopInd];
     ae8:	685a      	ldr	r2, [r3, #4]
     aea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
			if (curToneStep->targetVol > volTemp) {
     aec:	7a19      	ldrb	r1, [r3, #8]
		case TONESTEPIDLE: break;
		case TONESTEPDRT:
			_set_vol(curToneStep->vol.drtPar);
			break;
		case TONESTEPARRAY:
			volTemp = ((byte *)(curToneStep->vol.arrayPar))[curToneStep->LoopInd];
     aee:	5c87      	ldrb	r7, [r0, r2]
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
     af0:	4c89      	ldr	r4, [pc, #548]	; (d18 <timer1Func()+0x6d8>)
		case TONESTEPDRT:
			_set_vol(curToneStep->vol.drtPar);
			break;
		case TONESTEPARRAY:
			volTemp = ((byte *)(curToneStep->vol.arrayPar))[curToneStep->LoopInd];
			if (curToneStep->targetVol > volTemp) {
     af2:	428f      	cmp	r7, r1
     af4:	f080 825e 	bcs.w	fb4 <timer1Func()+0x974>
				_set_vol(curToneStep->targetVol - volTemp);
     af8:	1bc9      	subs	r1, r1, r7
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
     afa:	7820      	ldrb	r0, [r4, #0]
			_set_vol(curToneStep->vol.drtPar);
			break;
		case TONESTEPARRAY:
			volTemp = ((byte *)(curToneStep->vol.arrayPar))[curToneStep->LoopInd];
			if (curToneStep->targetVol > volTemp) {
				_set_vol(curToneStep->targetVol - volTemp);
     afc:	b2cf      	uxtb	r7, r1
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
     afe:	42b8      	cmp	r0, r7
     b00:	f43f ae7a 	beq.w	7f8 <timer1Func()+0x1b8>
	pinMode(PGA2310_cs, OUTPUT);
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _pga2310_wr(byte LGain, byte RGain) {
	digitalWrite(PGA2310_cs, LOW);
     b04:	2015      	movs	r0, #21
     b06:	2100      	movs	r1, #0
     b08:	f002 f8bc 	bl	2c84 <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     b0c:	4a83      	ldr	r2, [pc, #524]	; (d1c <timer1Func()+0x6dc>)
     b0e:	7ad0      	ldrb	r0, [r2, #11]
     b10:	2800      	cmp	r0, #0
     b12:	d02a      	beq.n	b6a <timer1Func()+0x52a>
			__disable_irq();
     b14:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     b16:	7ad1      	ldrb	r1, [r2, #11]
     b18:	07c8      	lsls	r0, r1, #31
     b1a:	460b      	mov	r3, r1
     b1c:	d509      	bpl.n	b32 <timer1Func()+0x4f2>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     b1e:	f8df e218 	ldr.w	lr, [pc, #536]	; d38 <timer1Func()+0x6f8>
     b22:	68d3      	ldr	r3, [r2, #12]
     b24:	f8de 0000 	ldr.w	r0, [lr]
     b28:	4018      	ands	r0, r3
     b2a:	61d0      	str	r0, [r2, #28]
     b2c:	460b      	mov	r3, r1
				NVIC_ICER0 = interruptSave[0];
     b2e:	f8ce 0000 	str.w	r0, [lr]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     b32:	0788      	lsls	r0, r1, #30
     b34:	d506      	bpl.n	b44 <timer1Func()+0x504>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     b36:	497a      	ldr	r1, [pc, #488]	; (d20 <timer1Func()+0x6e0>)
     b38:	6913      	ldr	r3, [r2, #16]
     b3a:	6808      	ldr	r0, [r1, #0]
     b3c:	4003      	ands	r3, r0
     b3e:	6213      	str	r3, [r2, #32]
				NVIC_ICER1 = interruptSave[1];
     b40:	600b      	str	r3, [r1, #0]
     b42:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     b44:	0759      	lsls	r1, r3, #29
     b46:	d506      	bpl.n	b56 <timer1Func()+0x516>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     b48:	4976      	ldr	r1, [pc, #472]	; (d24 <timer1Func()+0x6e4>)
     b4a:	6953      	ldr	r3, [r2, #20]
     b4c:	6808      	ldr	r0, [r1, #0]
     b4e:	4003      	ands	r3, r0
     b50:	6253      	str	r3, [r2, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
     b52:	600b      	str	r3, [r1, #0]
     b54:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     b56:	071b      	lsls	r3, r3, #28
     b58:	d505      	bpl.n	b66 <timer1Func()+0x526>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     b5a:	4973      	ldr	r1, [pc, #460]	; (d28 <timer1Func()+0x6e8>)
     b5c:	6993      	ldr	r3, [r2, #24]
     b5e:	6808      	ldr	r0, [r1, #0]
     b60:	4003      	ands	r3, r0
     b62:	6293      	str	r3, [r2, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
     b64:	600b      	str	r3, [r1, #0]
			}
			#endif
			__enable_irq();
     b66:	b662      	cpsie	i
     b68:	7ad0      	ldrb	r0, [r2, #11]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
     b6a:	6813      	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
     b6c:	68d9      	ldr	r1, [r3, #12]
     b6e:	f1b1 4f38 	cmp.w	r1, #3087007744	; 0xb8000000
     b72:	d00d      	beq.n	b90 <timer1Func()+0x550>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
     b74:	f8df e1c4 	ldr.w	lr, [pc, #452]	; d3c <timer1Func()+0x6fc>
     b78:	f8c3 e000 	str.w	lr, [r3]
			port().CTAR0 = settings.ctar;
     b7c:	f04f 4e38 	mov.w	lr, #3087007744	; 0xb8000000
     b80:	f8c3 e00c 	str.w	lr, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     b84:	4969      	ldr	r1, [pc, #420]	; (d2c <timer1Func()+0x6ec>)
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
     b86:	f04f 4e78 	mov.w	lr, #4160749568	; 0xf8000000
     b8a:	f8c3 e010 	str.w	lr, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     b8e:	6019      	str	r1, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     b90:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     b94:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
     b96:	635f      	str	r7, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     b98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
     b9a:	2900      	cmp	r1, #0
     b9c:	dafc      	bge.n	b98 <timer1Func()+0x558>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     b9e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     ba2:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     ba6:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
     ba8:	635f      	str	r7, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     baa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
     bac:	2900      	cmp	r1, #0
     bae:	dafc      	bge.n	baa <timer1Func()+0x56a>
     bb0:	e602      	b.n	7b8 <timer1Func()+0x178>
		/**********vol***********/
		byte volTemp = 0;
		switch (curToneStep->vol.flag) {
		case TONESTEPIDLE: break;
		case TONESTEPDRT:
			_set_vol(curToneStep->vol.drtPar);
     bb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
     bb4:	4c58      	ldr	r4, [pc, #352]	; (d18 <timer1Func()+0x6d8>)
		/**********vol***********/
		byte volTemp = 0;
		switch (curToneStep->vol.flag) {
		case TONESTEPIDLE: break;
		case TONESTEPDRT:
			_set_vol(curToneStep->vol.drtPar);
     bb6:	ee07 2a90 	vmov	s15, r2
     bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
     bbe:	7822      	ldrb	r2, [r4, #0]
		/**********vol***********/
		byte volTemp = 0;
		switch (curToneStep->vol.flag) {
		case TONESTEPIDLE: break;
		case TONESTEPDRT:
			_set_vol(curToneStep->vol.drtPar);
     bc0:	edcd 7a01 	vstr	s15, [sp, #4]
     bc4:	f89d 7004 	ldrb.w	r7, [sp, #4]
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
     bc8:	42ba      	cmp	r2, r7
     bca:	f43f ae14 	beq.w	7f6 <timer1Func()+0x1b6>
	pinMode(PGA2310_cs, OUTPUT);
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _pga2310_wr(byte LGain, byte RGain) {
	digitalWrite(PGA2310_cs, LOW);
     bce:	2015      	movs	r0, #21
     bd0:	2100      	movs	r1, #0
     bd2:	f002 f857 	bl	2c84 <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     bd6:	4a51      	ldr	r2, [pc, #324]	; (d1c <timer1Func()+0x6dc>)
     bd8:	7ad0      	ldrb	r0, [r2, #11]
     bda:	2800      	cmp	r0, #0
     bdc:	d02a      	beq.n	c34 <timer1Func()+0x5f4>
			__disable_irq();
     bde:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     be0:	7ad3      	ldrb	r3, [r2, #11]
     be2:	07d8      	lsls	r0, r3, #31
     be4:	4619      	mov	r1, r3
     be6:	d509      	bpl.n	bfc <timer1Func()+0x5bc>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     be8:	f8df e14c 	ldr.w	lr, [pc, #332]	; d38 <timer1Func()+0x6f8>
     bec:	68d1      	ldr	r1, [r2, #12]
     bee:	f8de 0000 	ldr.w	r0, [lr]
     bf2:	4008      	ands	r0, r1
     bf4:	61d0      	str	r0, [r2, #28]
     bf6:	4619      	mov	r1, r3
				NVIC_ICER0 = interruptSave[0];
     bf8:	f8ce 0000 	str.w	r0, [lr]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     bfc:	079b      	lsls	r3, r3, #30
     bfe:	d506      	bpl.n	c0e <timer1Func()+0x5ce>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     c00:	4947      	ldr	r1, [pc, #284]	; (d20 <timer1Func()+0x6e0>)
     c02:	6913      	ldr	r3, [r2, #16]
     c04:	6808      	ldr	r0, [r1, #0]
     c06:	4003      	ands	r3, r0
     c08:	6213      	str	r3, [r2, #32]
				NVIC_ICER1 = interruptSave[1];
     c0a:	600b      	str	r3, [r1, #0]
     c0c:	7ad1      	ldrb	r1, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     c0e:	0748      	lsls	r0, r1, #29
     c10:	d506      	bpl.n	c20 <timer1Func()+0x5e0>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     c12:	4944      	ldr	r1, [pc, #272]	; (d24 <timer1Func()+0x6e4>)
     c14:	6953      	ldr	r3, [r2, #20]
     c16:	6808      	ldr	r0, [r1, #0]
     c18:	4003      	ands	r3, r0
     c1a:	6253      	str	r3, [r2, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
     c1c:	600b      	str	r3, [r1, #0]
     c1e:	7ad1      	ldrb	r1, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     c20:	070b      	lsls	r3, r1, #28
     c22:	d505      	bpl.n	c30 <timer1Func()+0x5f0>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     c24:	4940      	ldr	r1, [pc, #256]	; (d28 <timer1Func()+0x6e8>)
     c26:	6993      	ldr	r3, [r2, #24]
     c28:	6808      	ldr	r0, [r1, #0]
     c2a:	4003      	ands	r3, r0
     c2c:	6293      	str	r3, [r2, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
     c2e:	600b      	str	r3, [r1, #0]
			}
			#endif
			__enable_irq();
     c30:	b662      	cpsie	i
     c32:	7ad0      	ldrb	r0, [r2, #11]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
     c34:	6813      	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
     c36:	68d9      	ldr	r1, [r3, #12]
     c38:	f1b1 4f38 	cmp.w	r1, #3087007744	; 0xb8000000
     c3c:	d00d      	beq.n	c5a <timer1Func()+0x61a>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
     c3e:	f8df e0fc 	ldr.w	lr, [pc, #252]	; d3c <timer1Func()+0x6fc>
     c42:	f8c3 e000 	str.w	lr, [r3]
			port().CTAR0 = settings.ctar;
     c46:	f04f 4e38 	mov.w	lr, #3087007744	; 0xb8000000
     c4a:	f8c3 e00c 	str.w	lr, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     c4e:	4937      	ldr	r1, [pc, #220]	; (d2c <timer1Func()+0x6ec>)
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
     c50:	f04f 4e78 	mov.w	lr, #4160749568	; 0xf8000000
     c54:	f8c3 e010 	str.w	lr, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     c58:	6019      	str	r1, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     c5a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     c5e:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
     c60:	635f      	str	r7, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     c62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
     c64:	2900      	cmp	r1, #0
     c66:	dafc      	bge.n	c62 <timer1Func()+0x622>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     c68:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     c6c:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     c70:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
     c72:	635f      	str	r7, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     c74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
     c76:	2900      	cmp	r1, #0
     c78:	dafc      	bge.n	c74 <timer1Func()+0x634>
     c7a:	e59d      	b.n	7b8 <timer1Func()+0x178>
		case TONESTEPIDLE: break;
		case TONESTEPDRT:
			timer1.begin(timer1Func, curToneStep->ISI.drtPar);
			break;
		case TONESTEPARRAY:
			interTimeTemp = ((float *)(curToneStep->ISI.arrayPar))[curToneStep->LoopInd];
     c7c:	f8d3 200e 	ldr.w	r2, [r3, #14]
     c80:	6859      	ldr	r1, [r3, #4]
     c82:	eb02 0281 	add.w	r2, r2, r1, lsl #2
     c86:	edd2 7a00 	vldr	s15, [r2]
	}
	bool begin(void (*funct)(), long microseconds) {
		return begin(funct, (int)microseconds);
	}
	bool begin(void (*funct)(), float microseconds) {
		if (microseconds <= 0 || microseconds > MAX_PERIOD) return false;
     c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     c92:	f63f acf9 	bhi.w	688 <timer1Func()+0x48>
     c96:	e50f      	b.n	6b8 <timer1Func()+0x78>
			timer1.begin(timer1Func, interTimeTemp);
			break;
		case TONESTEPARRAYREV:
			interTimeTemp = ((float *)(curToneStep->ISI.arrayPar))[curToneStep->ISI.array_Size - 1 - curToneStep->LoopInd];
     c98:	8a5a      	ldrh	r2, [r3, #18]
     c9a:	6858      	ldr	r0, [r3, #4]
     c9c:	f8d3 100e 	ldr.w	r1, [r3, #14]
     ca0:	1a12      	subs	r2, r2, r0
     ca2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
     ca6:	ed52 7a01 	vldr	s15, [r2, #-4]
     caa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     cb2:	f63f ace9 	bhi.w	688 <timer1Func()+0x48>
     cb6:	e4ff      	b.n	6b8 <timer1Func()+0x78>
		curToneStep->LoopInd++;

		if (curToneStep->LoopInd >= curToneStep->LoopNum) {
			curToneStep->LoopInd = 0; //prepare for CycleToneStep1.
			if (0 != curToneStep->CycleNum1) {
				curToneStep->CycleNum1--;
     cb8:	3901      	subs	r1, #1
				curToneStep = curToneStep->CycleToneStep1;
     cba:	f8d3 203a 	ldr.w	r2, [r3, #58]	; 0x3a
		curToneStep->LoopInd++;

		if (curToneStep->LoopInd >= curToneStep->LoopNum) {
			curToneStep->LoopInd = 0; //prepare for CycleToneStep1.
			if (0 != curToneStep->CycleNum1) {
				curToneStep->CycleNum1--;
     cbe:	f8c3 1036 	str.w	r1, [r3, #54]	; 0x36
				curToneStep = curToneStep->CycleToneStep1;
     cc2:	6032      	str	r2, [r6, #0]
     cc4:	e5af      	b.n	826 <timer1Func()+0x1e6>
		case TONESTEPARRAYREV:
			interTimeTemp = ((float *)(curToneStep->ISI.arrayPar))[curToneStep->ISI.array_Size - 1 - curToneStep->LoopInd];
			timer1.begin(timer1Func, interTimeTemp);
			break;
		case TONESTEPFNC:
			if (NULL == curToneStep->ISI.fnc) break;
     cc6:	695a      	ldr	r2, [r3, #20]
     cc8:	2a00      	cmp	r2, #0
     cca:	f43f acf5 	beq.w	6b8 <timer1Func()+0x78>
			interTimeTemp = ((float_fnc)curToneStep->ISI.fnc)();
     cce:	4790      	blx	r2
     cd0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
     cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     cd8:	f67f aced 	bls.w	6b6 <timer1Func()+0x76>
     cdc:	eddf 7a14 	vldr	s15, [pc, #80]	; d30 <timer1Func()+0x6f0>
     ce0:	eeb4 0ae7 	vcmpe.f32	s0, s15
     ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     ce8:	f73f ace5 	bgt.w	6b6 <timer1Func()+0x76>
		uint32_t cycles = (float)(F_BUS / 1000000) * microseconds - 0.5;
     cec:	ed9f 7a11 	vldr	s14, [pc, #68]	; d34 <timer1Func()+0x6f4>
     cf0:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
     cf4:	eee0 7a07 	vfma.f32	s15, s0, s14
     cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     cfc:	ee17 2a90 	vmov	r2, s15
		if (cycles < 36) return false;
     d00:	2a23      	cmp	r2, #35	; 0x23
     d02:	f67f acd8 	bls.w	6b6 <timer1Func()+0x76>
     d06:	e4d2      	b.n	6ae <timer1Func()+0x6e>
				curToneStep->CycleNum1--;
				curToneStep = curToneStep->CycleToneStep1;
			}
			else {
				if (0 != curToneStep->CycleNum2) {
					curToneStep->CycleNum2--;
     d08:	3a01      	subs	r2, #1
					curToneStep = curToneStep->CycleToneStep2;
     d0a:	f8d3 1042 	ldr.w	r1, [r3, #66]	; 0x42
				curToneStep->CycleNum1--;
				curToneStep = curToneStep->CycleToneStep1;
			}
			else {
				if (0 != curToneStep->CycleNum2) {
					curToneStep->CycleNum2--;
     d0e:	f8c3 203e 	str.w	r2, [r3, #62]	; 0x3e
					curToneStep = curToneStep->CycleToneStep2;
     d12:	6031      	str	r1, [r6, #0]
     d14:	e587      	b.n	826 <timer1Func()+0x1e6>
     d16:	bf00      	nop
     d18:	1fff1b84 	.word	0x1fff1b84
     d1c:	1fff0dd0 	.word	0x1fff0dd0
     d20:	e000e184 	.word	0xe000e184
     d24:	e000e188 	.word	0xe000e188
     d28:	e000e18c 	.word	0xe000e18c
     d2c:	803f0000 	.word	0x803f0000
     d30:	4c888889 	.word	0x4c888889
     d34:	42700000 	.word	0x42700000
     d38:	e000e180 	.word	0xe000e180
     d3c:	003f4001 	.word	0x003f4001
     d40:	4209705f 	.word	0x4209705f
     d44:	ee07 0a90 	vmov	s15, r0
     d48:	ed1f 7a03 	vldr	s14, [pc, #-12]	; d40 <timer1Func()+0x700>
     d4c:	4c8d      	ldr	r4, [pc, #564]	; (f84 <timer1Func()+0x944>)
     d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
     d52:	f104 0720 	add.w	r7, r4, #32
     d56:	ee67 7a87 	vmul.f32	s15, s15, s14
}


inline void _set_fq(uint32_t fq) {
	if (curFq != fq) {
		_ad9850_wr_parallel(fq_convert(fq));
     d5a:	46a1      	mov	r9, r4
     d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     d60:	edcd 7a03 	vstr	s15, [sp, #12]
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
     d64:	f859 0f04 	ldr.w	r0, [r9, #4]!
     d68:	2100      	movs	r1, #0
     d6a:	b2c0      	uxtb	r0, r0
     d6c:	f001 ff8a 	bl	2c84 <digitalWrite>
     d70:	454f      	cmp	r7, r9
     d72:	d1f7      	bne.n	d64 <timer1Func()+0x724>

inline void _ad9850_wr_parallel(uint32_t fq) {
	uint8_t * data = (uint8_t *)&fq;

	_ad9850_data_wr(0);
	digitalWrite(AD9850_w_clk, HIGH);
     d74:	2101      	movs	r1, #1
     d76:	2022      	movs	r0, #34	; 0x22
     d78:	f001 ff84 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
     d7c:	2100      	movs	r1, #0
     d7e:	2022      	movs	r0, #34	; 0x22
     d80:	f001 ff80 	bl	2c84 <digitalWrite>

	_ad9850_data_wr(data[3]);
     d84:	f8df 91fc 	ldr.w	r9, [pc, #508]	; f84 <timer1Func()+0x944>
     d88:	f99d b00f 	ldrsb.w	fp, [sp, #15]
     d8c:	f04f 0a00 	mov.w	sl, #0
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
     d90:	2301      	movs	r3, #1
     d92:	fa03 f10a 	lsl.w	r1, r3, sl
     d96:	f859 0f04 	ldr.w	r0, [r9, #4]!
     d9a:	ea0b 0101 	and.w	r1, fp, r1
     d9e:	449a      	add	sl, r3
     da0:	b2c9      	uxtb	r1, r1
     da2:	b2c0      	uxtb	r0, r0
     da4:	f001 ff6e 	bl	2c84 <digitalWrite>
     da8:	f1ba 0f08 	cmp.w	sl, #8
     dac:	d1f0      	bne.n	d90 <timer1Func()+0x750>
	_ad9850_data_wr(0);
	digitalWrite(AD9850_w_clk, HIGH);
	digitalWrite(AD9850_w_clk, LOW);

	_ad9850_data_wr(data[3]);
	digitalWrite(AD9850_w_clk, HIGH);
     dae:	2101      	movs	r1, #1
     db0:	2022      	movs	r0, #34	; 0x22
     db2:	f001 ff67 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
     db6:	2100      	movs	r1, #0
     db8:	2022      	movs	r0, #34	; 0x22
     dba:	f001 ff63 	bl	2c84 <digitalWrite>

	_ad9850_data_wr(data[2]);
     dbe:	f8df 91c4 	ldr.w	r9, [pc, #452]	; f84 <timer1Func()+0x944>
     dc2:	f99d b00e 	ldrsb.w	fp, [sp, #14]
     dc6:	f04f 0a00 	mov.w	sl, #0
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
     dca:	2301      	movs	r3, #1
     dcc:	fa03 f10a 	lsl.w	r1, r3, sl
     dd0:	f859 0f04 	ldr.w	r0, [r9, #4]!
     dd4:	ea0b 0101 	and.w	r1, fp, r1
     dd8:	449a      	add	sl, r3
     dda:	b2c9      	uxtb	r1, r1
     ddc:	b2c0      	uxtb	r0, r0
     dde:	f001 ff51 	bl	2c84 <digitalWrite>
     de2:	f1ba 0f08 	cmp.w	sl, #8
     de6:	d1f0      	bne.n	dca <timer1Func()+0x78a>
	_ad9850_data_wr(data[3]);
	digitalWrite(AD9850_w_clk, HIGH);
	digitalWrite(AD9850_w_clk, LOW);

	_ad9850_data_wr(data[2]);
	digitalWrite(AD9850_w_clk, HIGH);
     de8:	2101      	movs	r1, #1
     dea:	2022      	movs	r0, #34	; 0x22
     dec:	f001 ff4a 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
     df0:	2100      	movs	r1, #0
     df2:	2022      	movs	r0, #34	; 0x22
     df4:	f001 ff46 	bl	2c84 <digitalWrite>

	_ad9850_data_wr(data[1]);
     df8:	f8df 9188 	ldr.w	r9, [pc, #392]	; f84 <timer1Func()+0x944>
     dfc:	f99d b00d 	ldrsb.w	fp, [sp, #13]
     e00:	f04f 0a00 	mov.w	sl, #0
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
     e04:	2301      	movs	r3, #1
     e06:	fa03 f10a 	lsl.w	r1, r3, sl
     e0a:	f859 0f04 	ldr.w	r0, [r9, #4]!
     e0e:	ea0b 0101 	and.w	r1, fp, r1
     e12:	449a      	add	sl, r3
     e14:	b2c9      	uxtb	r1, r1
     e16:	b2c0      	uxtb	r0, r0
     e18:	f001 ff34 	bl	2c84 <digitalWrite>
     e1c:	f1ba 0f08 	cmp.w	sl, #8
     e20:	d1f0      	bne.n	e04 <timer1Func()+0x7c4>
	_ad9850_data_wr(data[2]);
	digitalWrite(AD9850_w_clk, HIGH);
	digitalWrite(AD9850_w_clk, LOW);

	_ad9850_data_wr(data[1]);
	digitalWrite(AD9850_w_clk, HIGH);
     e22:	2101      	movs	r1, #1
     e24:	2022      	movs	r0, #34	; 0x22
     e26:	f001 ff2d 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
     e2a:	2100      	movs	r1, #0
     e2c:	2022      	movs	r0, #34	; 0x22
     e2e:	f001 ff29 	bl	2c84 <digitalWrite>

	_ad9850_data_wr(data[0]);
     e32:	f8df 9150 	ldr.w	r9, [pc, #336]	; f84 <timer1Func()+0x944>
     e36:	f99d b00c 	ldrsb.w	fp, [sp, #12]
     e3a:	f04f 0a00 	mov.w	sl, #0
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
     e3e:	2301      	movs	r3, #1
     e40:	fa03 f10a 	lsl.w	r1, r3, sl
     e44:	f859 0f04 	ldr.w	r0, [r9, #4]!
     e48:	ea0b 0101 	and.w	r1, fp, r1
     e4c:	449a      	add	sl, r3
     e4e:	b2c9      	uxtb	r1, r1
     e50:	b2c0      	uxtb	r0, r0
     e52:	f001 ff17 	bl	2c84 <digitalWrite>
     e56:	f1ba 0f08 	cmp.w	sl, #8
     e5a:	d1f0      	bne.n	e3e <timer1Func()+0x7fe>
	_ad9850_data_wr(data[1]);
	digitalWrite(AD9850_w_clk, HIGH);
	digitalWrite(AD9850_w_clk, LOW);

	_ad9850_data_wr(data[0]);
	digitalWrite(AD9850_w_clk, HIGH);
     e5c:	2101      	movs	r1, #1
     e5e:	2022      	movs	r0, #34	; 0x22
     e60:	f001 ff10 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
     e64:	2100      	movs	r1, #0
     e66:	2022      	movs	r0, #34	; 0x22
     e68:	f001 ff0c 	bl	2c84 <digitalWrite>

	digitalWrite(AD9850_fq_up, HIGH);
     e6c:	2101      	movs	r1, #1
     e6e:	2023      	movs	r0, #35	; 0x23
     e70:	f001 ff08 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_fq_up, LOW);
     e74:	2100      	movs	r1, #0
     e76:	2023      	movs	r0, #35	; 0x23
     e78:	f001 ff04 	bl	2c84 <digitalWrite>
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
     e7c:	f854 0f04 	ldr.w	r0, [r4, #4]!
     e80:	2100      	movs	r1, #0
     e82:	b2c0      	uxtb	r0, r0
     e84:	f001 fefe 	bl	2c84 <digitalWrite>
     e88:	42a7      	cmp	r7, r4
     e8a:	d1f7      	bne.n	e7c <timer1Func()+0x83c>


inline void _set_fq(uint32_t fq) {
	if (curFq != fq) {
		_ad9850_wr_parallel(fq_convert(fq));
		curFq = fq;
     e8c:	9a01      	ldr	r2, [sp, #4]
     e8e:	6833      	ldr	r3, [r6, #0]
     e90:	f8c2 8000 	str.w	r8, [r2]
     e94:	e423      	b.n	6de <timer1Func()+0x9e>
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
     e96:	7821      	ldrb	r1, [r4, #0]
     e98:	2900      	cmp	r1, #0
     e9a:	f43f acad 	beq.w	7f8 <timer1Func()+0x1b8>
	pinMode(PGA2310_cs, OUTPUT);
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _pga2310_wr(byte LGain, byte RGain) {
	digitalWrite(PGA2310_cs, LOW);
     e9e:	2015      	movs	r0, #21
     ea0:	2100      	movs	r1, #0
     ea2:	f001 feef 	bl	2c84 <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     ea6:	4a38      	ldr	r2, [pc, #224]	; (f88 <timer1Func()+0x948>)
     ea8:	7ad0      	ldrb	r0, [r2, #11]
     eaa:	2800      	cmp	r0, #0
     eac:	d027      	beq.n	efe <timer1Func()+0x8be>
			__disable_irq();
     eae:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     eb0:	7ad1      	ldrb	r1, [r2, #11]
     eb2:	07cf      	lsls	r7, r1, #31
     eb4:	460b      	mov	r3, r1
     eb6:	d506      	bpl.n	ec6 <timer1Func()+0x886>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     eb8:	4f34      	ldr	r7, [pc, #208]	; (f8c <timer1Func()+0x94c>)
     eba:	68d3      	ldr	r3, [r2, #12]
     ebc:	6838      	ldr	r0, [r7, #0]
     ebe:	4018      	ands	r0, r3
     ec0:	61d0      	str	r0, [r2, #28]
     ec2:	460b      	mov	r3, r1
				NVIC_ICER0 = interruptSave[0];
     ec4:	6038      	str	r0, [r7, #0]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     ec6:	0788      	lsls	r0, r1, #30
     ec8:	d506      	bpl.n	ed8 <timer1Func()+0x898>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     eca:	4931      	ldr	r1, [pc, #196]	; (f90 <timer1Func()+0x950>)
     ecc:	6913      	ldr	r3, [r2, #16]
     ece:	6808      	ldr	r0, [r1, #0]
     ed0:	4003      	ands	r3, r0
     ed2:	6213      	str	r3, [r2, #32]
				NVIC_ICER1 = interruptSave[1];
     ed4:	600b      	str	r3, [r1, #0]
     ed6:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     ed8:	0759      	lsls	r1, r3, #29
     eda:	d506      	bpl.n	eea <timer1Func()+0x8aa>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     edc:	492d      	ldr	r1, [pc, #180]	; (f94 <timer1Func()+0x954>)
     ede:	6953      	ldr	r3, [r2, #20]
     ee0:	6808      	ldr	r0, [r1, #0]
     ee2:	4003      	ands	r3, r0
     ee4:	6253      	str	r3, [r2, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
     ee6:	600b      	str	r3, [r1, #0]
     ee8:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     eea:	071b      	lsls	r3, r3, #28
     eec:	d505      	bpl.n	efa <timer1Func()+0x8ba>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     eee:	492a      	ldr	r1, [pc, #168]	; (f98 <timer1Func()+0x958>)
     ef0:	6993      	ldr	r3, [r2, #24]
     ef2:	6808      	ldr	r0, [r1, #0]
     ef4:	4003      	ands	r3, r0
     ef6:	6293      	str	r3, [r2, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
     ef8:	600b      	str	r3, [r1, #0]
			}
			#endif
			__enable_irq();
     efa:	b662      	cpsie	i
     efc:	7ad0      	ldrb	r0, [r2, #11]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
     efe:	6813      	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
     f00:	68d9      	ldr	r1, [r3, #12]
     f02:	f1b1 4f38 	cmp.w	r1, #3087007744	; 0xb8000000
     f06:	d009      	beq.n	f1c <timer1Func()+0x8dc>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
     f08:	4f24      	ldr	r7, [pc, #144]	; (f9c <timer1Func()+0x95c>)
     f0a:	601f      	str	r7, [r3, #0]
			port().CTAR0 = settings.ctar;
     f0c:	f04f 4738 	mov.w	r7, #3087007744	; 0xb8000000
     f10:	60df      	str	r7, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     f12:	4923      	ldr	r1, [pc, #140]	; (fa0 <timer1Func()+0x960>)
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
     f14:	f04f 4778 	mov.w	r7, #4160749568	; 0xf8000000
     f18:	611f      	str	r7, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     f1a:	6019      	str	r1, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     f1c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
		port().PUSHR = data;
     f20:	2100      	movs	r1, #0
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     f22:	62df      	str	r7, [r3, #44]	; 0x2c
		port().PUSHR = data;
     f24:	6359      	str	r1, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     f26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
     f28:	2900      	cmp	r1, #0
     f2a:	dafc      	bge.n	f26 <timer1Func()+0x8e6>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     f2c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
		port().PUSHR = data;
     f30:	2100      	movs	r1, #0
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     f32:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     f36:	62df      	str	r7, [r3, #44]	; 0x2c
		port().PUSHR = data;
     f38:	6359      	str	r1, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     f3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
     f3c:	2900      	cmp	r1, #0
     f3e:	dafc      	bge.n	f3a <timer1Func()+0x8fa>
		return port().POPR;
     f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     f42:	b1b0      	cbz	r0, f72 <timer1Func()+0x932>
			if (interruptMasksUsed & 0x01) {
     f44:	07c7      	lsls	r7, r0, #31
     f46:	d503      	bpl.n	f50 <timer1Func()+0x910>
				NVIC_ISER0 = interruptSave[0];
     f48:	4b16      	ldr	r3, [pc, #88]	; (fa4 <timer1Func()+0x964>)
     f4a:	69d1      	ldr	r1, [r2, #28]
     f4c:	6019      	str	r1, [r3, #0]
     f4e:	7ad0      	ldrb	r0, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     f50:	0781      	lsls	r1, r0, #30
     f52:	d503      	bpl.n	f5c <timer1Func()+0x91c>
				NVIC_ISER1 = interruptSave[1];
     f54:	4b14      	ldr	r3, [pc, #80]	; (fa8 <timer1Func()+0x968>)
     f56:	6a11      	ldr	r1, [r2, #32]
     f58:	6019      	str	r1, [r3, #0]
     f5a:	7ad0      	ldrb	r0, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     f5c:	0743      	lsls	r3, r0, #29
     f5e:	d503      	bpl.n	f68 <timer1Func()+0x928>
				NVIC_ISER2 = interruptSave[2];
     f60:	4b12      	ldr	r3, [pc, #72]	; (fac <timer1Func()+0x96c>)
     f62:	6a51      	ldr	r1, [r2, #36]	; 0x24
     f64:	6019      	str	r1, [r3, #0]
     f66:	7ad0      	ldrb	r0, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     f68:	0707      	lsls	r7, r0, #28
     f6a:	d502      	bpl.n	f72 <timer1Func()+0x932>
				NVIC_ISER3 = interruptSave[3];
     f6c:	4b10      	ldr	r3, [pc, #64]	; (fb0 <timer1Func()+0x970>)
     f6e:	6a92      	ldr	r2, [r2, #40]	; 0x28
     f70:	601a      	str	r2, [r3, #0]
	SPI.beginTransaction(SPISettings(PGA2310SPEED, MSBFIRST, SPI_MODE0));
	SPI.transfer(LGain);//left channel
	SPI.transfer(RGain);//right channel
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
     f72:	2101      	movs	r1, #1
     f74:	2015      	movs	r0, #21
     f76:	f001 fe85 	bl	2c84 <digitalWrite>
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
		_pga2310_wr(vol, vol);
		curVol = vol;
     f7a:	2200      	movs	r2, #0
     f7c:	6833      	ldr	r3, [r6, #0]
     f7e:	7022      	strb	r2, [r4, #0]
     f80:	685a      	ldr	r2, [r3, #4]
     f82:	e439      	b.n	7f8 <timer1Func()+0x1b8>
     f84:	1fff0aa8 	.word	0x1fff0aa8
     f88:	1fff0dd0 	.word	0x1fff0dd0
     f8c:	e000e180 	.word	0xe000e180
     f90:	e000e184 	.word	0xe000e184
     f94:	e000e188 	.word	0xe000e188
     f98:	e000e18c 	.word	0xe000e18c
     f9c:	003f4001 	.word	0x003f4001
     fa0:	803f0000 	.word	0x803f0000
     fa4:	e000e100 	.word	0xe000e100
     fa8:	e000e104 	.word	0xe000e104
     fac:	e000e108 	.word	0xe000e108
     fb0:	e000e10c 	.word	0xe000e10c
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
     fb4:	7821      	ldrb	r1, [r4, #0]
     fb6:	2900      	cmp	r1, #0
     fb8:	f43f ac1e 	beq.w	7f8 <timer1Func()+0x1b8>
	pinMode(PGA2310_cs, OUTPUT);
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _pga2310_wr(byte LGain, byte RGain) {
	digitalWrite(PGA2310_cs, LOW);
     fbc:	2015      	movs	r0, #21
     fbe:	2100      	movs	r1, #0
     fc0:	f001 fe60 	bl	2c84 <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     fc4:	4a28      	ldr	r2, [pc, #160]	; (1068 <timer1Func()+0xa28>)
     fc6:	7ad0      	ldrb	r0, [r2, #11]
     fc8:	2800      	cmp	r0, #0
     fca:	d027      	beq.n	101c <timer1Func()+0x9dc>
			__disable_irq();
     fcc:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     fce:	7ad1      	ldrb	r1, [r2, #11]
     fd0:	07cf      	lsls	r7, r1, #31
     fd2:	460b      	mov	r3, r1
     fd4:	d506      	bpl.n	fe4 <timer1Func()+0x9a4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     fd6:	4f25      	ldr	r7, [pc, #148]	; (106c <timer1Func()+0xa2c>)
     fd8:	68d3      	ldr	r3, [r2, #12]
     fda:	6838      	ldr	r0, [r7, #0]
     fdc:	4018      	ands	r0, r3
     fde:	61d0      	str	r0, [r2, #28]
     fe0:	460b      	mov	r3, r1
				NVIC_ICER0 = interruptSave[0];
     fe2:	6038      	str	r0, [r7, #0]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     fe4:	0788      	lsls	r0, r1, #30
     fe6:	d506      	bpl.n	ff6 <timer1Func()+0x9b6>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     fe8:	4921      	ldr	r1, [pc, #132]	; (1070 <timer1Func()+0xa30>)
     fea:	6913      	ldr	r3, [r2, #16]
     fec:	6808      	ldr	r0, [r1, #0]
     fee:	4003      	ands	r3, r0
     ff0:	6213      	str	r3, [r2, #32]
				NVIC_ICER1 = interruptSave[1];
     ff2:	600b      	str	r3, [r1, #0]
     ff4:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     ff6:	0759      	lsls	r1, r3, #29
     ff8:	d506      	bpl.n	1008 <timer1Func()+0x9c8>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     ffa:	491e      	ldr	r1, [pc, #120]	; (1074 <timer1Func()+0xa34>)
     ffc:	6953      	ldr	r3, [r2, #20]
     ffe:	6808      	ldr	r0, [r1, #0]
    1000:	4003      	ands	r3, r0
    1002:	6253      	str	r3, [r2, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    1004:	600b      	str	r3, [r1, #0]
    1006:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    1008:	071f      	lsls	r7, r3, #28
    100a:	d505      	bpl.n	1018 <timer1Func()+0x9d8>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    100c:	491a      	ldr	r1, [pc, #104]	; (1078 <timer1Func()+0xa38>)
    100e:	6993      	ldr	r3, [r2, #24]
    1010:	6808      	ldr	r0, [r1, #0]
    1012:	4003      	ands	r3, r0
    1014:	6293      	str	r3, [r2, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    1016:	600b      	str	r3, [r1, #0]
			}
			#endif
			__enable_irq();
    1018:	b662      	cpsie	i
    101a:	7ad0      	ldrb	r0, [r2, #11]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    101c:	6813      	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    101e:	68d9      	ldr	r1, [r3, #12]
    1020:	f1b1 4f38 	cmp.w	r1, #3087007744	; 0xb8000000
    1024:	d009      	beq.n	103a <timer1Func()+0x9fa>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    1026:	4f15      	ldr	r7, [pc, #84]	; (107c <timer1Func()+0xa3c>)
    1028:	601f      	str	r7, [r3, #0]
			port().CTAR0 = settings.ctar;
    102a:	f04f 4738 	mov.w	r7, #3087007744	; 0xb8000000
    102e:	60df      	str	r7, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    1030:	4913      	ldr	r1, [pc, #76]	; (1080 <timer1Func()+0xa40>)
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    1032:	f04f 4778 	mov.w	r7, #4160749568	; 0xf8000000
    1036:	611f      	str	r7, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    1038:	6019      	str	r1, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    103a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
		port().PUSHR = data;
    103e:	2100      	movs	r1, #0
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    1040:	62df      	str	r7, [r3, #44]	; 0x2c
		port().PUSHR = data;
    1042:	6359      	str	r1, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1044:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    1046:	2900      	cmp	r1, #0
    1048:	dafc      	bge.n	1044 <timer1Func()+0xa04>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    104a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
		port().PUSHR = data;
    104e:	2100      	movs	r1, #0
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    1050:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    1054:	62df      	str	r7, [r3, #44]	; 0x2c
		port().PUSHR = data;
    1056:	6359      	str	r1, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1058:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    105a:	2900      	cmp	r1, #0
    105c:	dafc      	bge.n	1058 <timer1Func()+0xa18>
    105e:	e76f      	b.n	f40 <timer1Func()+0x900>
    1060:	6833      	ldr	r3, [r6, #0]
    1062:	685a      	ldr	r2, [r3, #4]
    1064:	f7ff bbc8 	b.w	7f8 <timer1Func()+0x1b8>
    1068:	1fff0dd0 	.word	0x1fff0dd0
    106c:	e000e180 	.word	0xe000e180
    1070:	e000e184 	.word	0xe000e184
    1074:	e000e188 	.word	0xe000e188
    1078:	e000e18c 	.word	0xe000e18c
    107c:	003f4001 	.word	0x003f4001
    1080:	803f0000 	.word	0x803f0000

00001084 <SPI_TGMClass::init()>:
}

/*--------SPI_TGMClass-------*/

void SPI_TGMClass::init()
{
    1084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	memset(&info, 0, sizeof(TGMinfo));
    1088:	4d35      	ldr	r5, [pc, #212]	; (1160 <SPI_TGMClass::init()+0xdc>)
	info.nSize = sizeof(TGMinfo);
	info.version = TGM_VERSION;
	strcpy(info.version_str, VERSION_STRING);
    108a:	4c36      	ldr	r4, [pc, #216]	; (1164 <SPI_TGMClass::init()+0xe0>)

	memset(&error, 0, sizeof(TMGerror));
    108c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1184 <SPI_TGMClass::init()+0x100>
	error.nSize = sizeof(TMGerror);
	error.error_code = NO_ERROR;
	strcpy(error.error_string, noerror_string);

	memset(&_tone, 0, sizeof(ton));
    1090:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 1188 <SPI_TGMClass::init()+0x104>

	memset(&_EMPTY_TONE, 0, sizeof(ton));
	_EMPTY_TONE.nSize = sizeof(ton);
	_EMPTY_TONE.version = TGM_VERSION;

	memset(&_QUICK_TONE, 0, sizeof(ton));
    1094:	4e34      	ldr	r6, [pc, #208]	; (1168 <SPI_TGMClass::init()+0xe4>)

/*--------SPI_TGMClass-------*/

void SPI_TGMClass::init()
{
	memset(&info, 0, sizeof(TGMinfo));
    1096:	f04f 0835 	mov.w	r8, #53	; 0x35
    109a:	4628      	mov	r0, r5
    109c:	4642      	mov	r2, r8
    109e:	2100      	movs	r1, #0
    10a0:	f006 fa24 	bl	74ec <memset>
	info.nSize = sizeof(TGMinfo);
	info.version = TGM_VERSION;
	strcpy(info.version_str, VERSION_STRING);
    10a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    10a6:	f8c5 0003 	str.w	r0, [r5, #3]
    10aa:	f8c5 1007 	str.w	r1, [r5, #7]
    10ae:	6820      	ldr	r0, [r4, #0]
    10b0:	7921      	ldrb	r1, [r4, #4]
    10b2:	f8c5 200b 	str.w	r2, [r5, #11]

void SPI_TGMClass::init()
{
	memset(&info, 0, sizeof(TGMinfo));
	info.nSize = sizeof(TGMinfo);
	info.version = TGM_VERSION;
    10b6:	270b      	movs	r7, #11
	strcpy(info.version_str, VERSION_STRING);
    10b8:	f8c5 0013 	str.w	r0, [r5, #19]
    10bc:	f8c5 300f 	str.w	r3, [r5, #15]
    10c0:	75e9      	strb	r1, [r5, #23]

	memset(&error, 0, sizeof(TMGerror));
    10c2:	4642      	mov	r2, r8
    10c4:	2100      	movs	r1, #0
    10c6:	4648      	mov	r0, r9
/*--------SPI_TGMClass-------*/

void SPI_TGMClass::init()
{
	memset(&info, 0, sizeof(TGMinfo));
	info.nSize = sizeof(TGMinfo);
    10c8:	f8a5 8000 	strh.w	r8, [r5]
	info.version = TGM_VERSION;
    10cc:	70af      	strb	r7, [r5, #2]
	strcpy(info.version_str, VERSION_STRING);

	memset(&error, 0, sizeof(TMGerror));
    10ce:	f006 fa0d 	bl	74ec <memset>
	error.nSize = sizeof(TMGerror);
	error.error_code = NO_ERROR;
	strcpy(error.error_string, noerror_string);
    10d2:	4b26      	ldr	r3, [pc, #152]	; (116c <SPI_TGMClass::init()+0xe8>)

	memset(&_tone, 0, sizeof(ton));
	_tone.nSize = sizeof(ton);
	_tone.version = TGM_VERSION;

	memset(&_EMPTY_TONE, 0, sizeof(ton));
    10d4:	4c26      	ldr	r4, [pc, #152]	; (1170 <SPI_TGMClass::init()+0xec>)
	strcpy(info.version_str, VERSION_STRING);

	memset(&error, 0, sizeof(TMGerror));
	error.nSize = sizeof(TMGerror);
	error.error_code = NO_ERROR;
	strcpy(error.error_string, noerror_string);
    10d6:	cb03      	ldmia	r3!, {r0, r1}
	info.nSize = sizeof(TGMinfo);
	info.version = TGM_VERSION;
	strcpy(info.version_str, VERSION_STRING);

	memset(&error, 0, sizeof(TMGerror));
	error.nSize = sizeof(TMGerror);
    10d8:	464a      	mov	r2, r9
	error.error_code = NO_ERROR;
	strcpy(error.error_string, noerror_string);

	memset(&_tone, 0, sizeof(ton));
    10da:	2564      	movs	r5, #100	; 0x64
	info.nSize = sizeof(TGMinfo);
	info.version = TGM_VERSION;
	strcpy(info.version_str, VERSION_STRING);

	memset(&error, 0, sizeof(TMGerror));
	error.nSize = sizeof(TMGerror);
    10dc:	f822 8b03 	strh.w	r8, [r2], #3
	error.error_code = NO_ERROR;
	strcpy(error.error_string, noerror_string);
    10e0:	781b      	ldrb	r3, [r3, #0]
    10e2:	f8c9 0003 	str.w	r0, [r9, #3]
    10e6:	7213      	strb	r3, [r2, #8]
    10e8:	6051      	str	r1, [r2, #4]

	memset(&_tone, 0, sizeof(ton));
    10ea:	4650      	mov	r0, sl
    10ec:	462a      	mov	r2, r5
    10ee:	2100      	movs	r1, #0
    10f0:	f006 f9fc 	bl	74ec <memset>
	_tone.nSize = sizeof(ton);
	_tone.version = TGM_VERSION;

	memset(&_EMPTY_TONE, 0, sizeof(ton));
    10f4:	462a      	mov	r2, r5
    10f6:	4620      	mov	r0, r4
    10f8:	2100      	movs	r1, #0
	error.nSize = sizeof(TMGerror);
	error.error_code = NO_ERROR;
	strcpy(error.error_string, noerror_string);

	memset(&_tone, 0, sizeof(ton));
	_tone.nSize = sizeof(ton);
    10fa:	f8aa 5000 	strh.w	r5, [sl]
	_tone.version = TGM_VERSION;
    10fe:	f88a 7002 	strb.w	r7, [sl, #2]

	memset(&_EMPTY_TONE, 0, sizeof(ton));
    1102:	f006 f9f3 	bl	74ec <memset>
	_EMPTY_TONE.nSize = sizeof(ton);
	_EMPTY_TONE.version = TGM_VERSION;

	memset(&_QUICK_TONE, 0, sizeof(ton));
    1106:	462a      	mov	r2, r5
    1108:	4630      	mov	r0, r6
    110a:	2100      	movs	r1, #0
	memset(&_tone, 0, sizeof(ton));
	_tone.nSize = sizeof(ton);
	_tone.version = TGM_VERSION;

	memset(&_EMPTY_TONE, 0, sizeof(ton));
	_EMPTY_TONE.nSize = sizeof(ton);
    110c:	8025      	strh	r5, [r4, #0]
	_EMPTY_TONE.version = TGM_VERSION;
    110e:	70a7      	strb	r7, [r4, #2]

	memset(&_QUICK_TONE, 0, sizeof(ton));
    1110:	f006 f9ec 	bl	74ec <memset>
	_QUICK_TONE.nSize = sizeof(ton);
	_QUICK_TONE.version = TGM_VERSION;
    1114:	240c      	movs	r4, #12
    1116:	70b7      	strb	r7, [r6, #2]
	memset(&_EMPTY_TONE, 0, sizeof(ton));
	_EMPTY_TONE.nSize = sizeof(ton);
	_EMPTY_TONE.version = TGM_VERSION;

	memset(&_QUICK_TONE, 0, sizeof(ton));
	_QUICK_TONE.nSize = sizeof(ton);
    1118:	8035      	strh	r5, [r6, #0]

void eraseAllToneStep() {

	for (int i = 0; i < TONESTEPARRAYSIZE; i++)
	{
		memset((void*)toneStepArray, 0, sizeof(toneStepArray));
    111a:	f44f 725e 	mov.w	r2, #888	; 0x378
    111e:	2100      	movs	r1, #0
    1120:	4814      	ldr	r0, [pc, #80]	; (1174 <SPI_TGMClass::init()+0xf0>)
    1122:	f006 f9e3 	bl	74ec <memset>
}
#endif // DEBUG

void eraseAllToneStep() {

	for (int i = 0; i < TONESTEPARRAYSIZE; i++)
    1126:	3c01      	subs	r4, #1
    1128:	d1f7      	bne.n	111a <SPI_TGMClass::init()+0x96>
/*-----------TGM_config-------------*/


/*-----------23LC1024------------*/
inline void _SPI_INIT() {
	CACHE.INFO = 2;
    112a:	4b13      	ldr	r3, [pc, #76]	; (1178 <SPI_TGMClass::init()+0xf4>)
	CACHE.PER = 22;
	CACHE.CS = 23;
	CACHE.SCK = 13;
	CACHE.MO = 11;
	CACHE.MI = 12;
	CACHE.SPISPEED = 4000000;
    112c:	4913      	ldr	r1, [pc, #76]	; (117c <SPI_TGMClass::init()+0xf8>)

	for (int i = 0; i < TONESTEPARRAYSIZE; i++)
	{
		memset((void*)toneStepArray, 0, sizeof(toneStepArray));
	}
	curToneStep = NULL;
    112e:	4a14      	ldr	r2, [pc, #80]	; (1180 <SPI_TGMClass::init()+0xfc>)
	CACHE.PER = 22;
	CACHE.CS = 23;
	CACHE.SCK = 13;
	CACHE.MO = 11;
	CACHE.MI = 12;
	CACHE.SPISPEED = 4000000;
    1130:	6219      	str	r1, [r3, #32]
/*-----------TGM_config-------------*/


/*-----------23LC1024------------*/
inline void _SPI_INIT() {
	CACHE.INFO = 2;
    1132:	2702      	movs	r7, #2
	CACHE.REQ = 6;
    1134:	2606      	movs	r6, #6
	CACHE.WR = 7;
    1136:	2507      	movs	r5, #7
	CACHE.PER = 22;
    1138:	2016      	movs	r0, #22
	CACHE.CS = 23;
    113a:	2117      	movs	r1, #23
/*-----------TGM_config-------------*/


/*-----------23LC1024------------*/
inline void _SPI_INIT() {
	CACHE.INFO = 2;
    113c:	60df      	str	r7, [r3, #12]
	CACHE.REQ = 6;
    113e:	601e      	str	r6, [r3, #0]
	CACHE.WR = 7;
	CACHE.PER = 22;
	CACHE.CS = 23;
	CACHE.SCK = 13;
    1140:	270d      	movs	r7, #13
	CACHE.MO = 11;
    1142:	260b      	movs	r6, #11

/*-----------23LC1024------------*/
inline void _SPI_INIT() {
	CACHE.INFO = 2;
	CACHE.REQ = 6;
	CACHE.WR = 7;
    1144:	605d      	str	r5, [r3, #4]
	CACHE.PER = 22;
	CACHE.CS = 23;
	CACHE.SCK = 13;
	CACHE.MO = 11;
	CACHE.MI = 12;
    1146:	250c      	movs	r5, #12
/*-----------23LC1024------------*/
inline void _SPI_INIT() {
	CACHE.INFO = 2;
	CACHE.REQ = 6;
	CACHE.WR = 7;
	CACHE.PER = 22;
    1148:	6098      	str	r0, [r3, #8]
	CACHE.CS = 23;
    114a:	6119      	str	r1, [r3, #16]
	CACHE.SCK = 13;
    114c:	615f      	str	r7, [r3, #20]
	CACHE.MO = 11;
	CACHE.MI = 12;
	CACHE.SPISPEED = 4000000;
	CACHE.init();
    114e:	4621      	mov	r1, r4
	CACHE.REQ = 6;
	CACHE.WR = 7;
	CACHE.PER = 22;
	CACHE.CS = 23;
	CACHE.SCK = 13;
	CACHE.MO = 11;
    1150:	619e      	str	r6, [r3, #24]
	CACHE.MI = 12;
    1152:	61dd      	str	r5, [r3, #28]

	for (int i = 0; i < TONESTEPARRAYSIZE; i++)
	{
		memset((void*)toneStepArray, 0, sizeof(toneStepArray));
	}
	curToneStep = NULL;
    1154:	6014      	str	r4, [r2, #0]
	CACHE.CS = 23;
	CACHE.SCK = 13;
	CACHE.MO = 11;
	CACHE.MI = 12;
	CACHE.SPISPEED = 4000000;
	CACHE.init();
    1156:	4618      	mov	r0, r3
	_SPI_INIT();

#ifdef DEBUG
	 Serial.begin(115200);
#endif // DEBUG
}
    1158:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	CACHE.CS = 23;
	CACHE.SCK = 13;
	CACHE.MO = 11;
	CACHE.MI = 12;
	CACHE.SPISPEED = 4000000;
	CACHE.init();
    115c:	f001 b956 	b.w	240c <CACHE_Class::init(int)>
    1160:	1fff1b48 	.word	0x1fff1b48
    1164:	0000790c 	.word	0x0000790c
    1168:	1fff1adc 	.word	0x1fff1adc
    116c:	00007924 	.word	0x00007924
    1170:	1fff1730 	.word	0x1fff1730
    1174:	1fff1bc0 	.word	0x1fff1bc0
    1178:	1fff2060 	.word	0x1fff2060
    117c:	003d0900 	.word	0x003d0900
    1180:	1fff1b44 	.word	0x1fff1b44
    1184:	1fff1aa4 	.word	0x1fff1aa4
    1188:	1fff1ffc 	.word	0x1fff1ffc

0000118c <SPI_TGMClass::wait_command()>:

inline void _write_error(TMGerror* data) {
	CACHE.q_write(ERROR_ADDR, sizeof(TMGerror), (char*)data);
}

void SPI_TGMClass::wait_command() {
    118c:	b508      	push	{r3, lr}
	while (LOW == CACHE.new_info());
    118e:	4803      	ldr	r0, [pc, #12]	; (119c <SPI_TGMClass::wait_command()+0x10>)
    1190:	f001 f9c2 	bl	2518 <CACHE_Class::new_info()>
    1194:	2800      	cmp	r0, #0
    1196:	d0fa      	beq.n	118e <SPI_TGMClass::wait_command()+0x2>
}
    1198:	bd08      	pop	{r3, pc}
    119a:	bf00      	nop
    119c:	1fff2060 	.word	0x1fff2060

000011a0 <SPI_TGMClass::init_TGM()>:

uint32_t chord_fq() {
	return chord_fq_array[curToneStep->LoopInd%chord_fq_num];
}

void SPI_TGMClass::init_TGM() {
    11a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    11a4:	4607      	mov	r7, r0
	digitalWrite(AD9850_fq_up, LOW);
	_ad9850_data_wr(0);
}

inline void _ad9850_init() {
	delay(100);
    11a6:	2064      	movs	r0, #100	; 0x64
    11a8:	f001 fd86 	bl	2cb8 <delay>
void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
}

inline void _ad9850_init_port() {
	pinMode(AD9850_w_clk, OUTPUT);
    11ac:	2101      	movs	r1, #1
    11ae:	2022      	movs	r0, #34	; 0x22
    11b0:	f001 fd7c 	bl	2cac <pinMode>
	digitalWrite(AD9850_w_clk, LOW);
    11b4:	2100      	movs	r1, #0
    11b6:	2022      	movs	r0, #34	; 0x22
    11b8:	f001 fd64 	bl	2c84 <digitalWrite>
	pinMode(AD9850_fq_up, OUTPUT);
    11bc:	2101      	movs	r1, #1
    11be:	2023      	movs	r0, #35	; 0x23
    11c0:	f001 fd74 	bl	2cac <pinMode>
	digitalWrite(AD9850_fq_up, LOW);
    11c4:	2100      	movs	r1, #0
    11c6:	2023      	movs	r0, #35	; 0x23
    11c8:	f001 fd5c 	bl	2c84 <digitalWrite>
	pinMode(AD9850_rest, OUTPUT);
    11cc:	2101      	movs	r1, #1
    11ce:	2021      	movs	r0, #33	; 0x21
    11d0:	f001 fd6c 	bl	2cac <pinMode>
	digitalWrite(AD9850_rest, LOW);
    11d4:	2100      	movs	r1, #0
    11d6:	2021      	movs	r0, #33	; 0x21
    11d8:	4ea8      	ldr	r6, [pc, #672]	; (147c <SPI_TGMClass::init_TGM()+0x2dc>)
    11da:	f001 fd53 	bl	2c84 <digitalWrite>
    11de:	f106 0420 	add.w	r4, r6, #32
    11e2:	4635      	mov	r5, r6
	for (int i = 0; i < 8; i++) pinMode(AD9850_DATA[i], OUTPUT);
    11e4:	f855 0f04 	ldr.w	r0, [r5, #4]!
    11e8:	2101      	movs	r1, #1
    11ea:	b2c0      	uxtb	r0, r0
    11ec:	f001 fd5e 	bl	2cac <pinMode>
    11f0:	42a5      	cmp	r5, r4
    11f2:	d1f7      	bne.n	11e4 <SPI_TGMClass::init_TGM()+0x44>
    11f4:	4da1      	ldr	r5, [pc, #644]	; (147c <SPI_TGMClass::init_TGM()+0x2dc>)
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
    11f6:	f855 0f04 	ldr.w	r0, [r5, #4]!
    11fa:	2100      	movs	r1, #0
    11fc:	b2c0      	uxtb	r0, r0
    11fe:	f001 fd41 	bl	2c84 <digitalWrite>
    1202:	42a5      	cmp	r5, r4
    1204:	d1f7      	bne.n	11f6 <SPI_TGMClass::init_TGM()+0x56>
	for (int i = 0; i < 8; i++) pinMode(AD9850_DATA[i], OUTPUT);
	_ad9850_data_wr(0);
}

inline void _ad9850_reset() {
	digitalWrite(AD9850_rest, LOW);
    1206:	2100      	movs	r1, #0
    1208:	2021      	movs	r0, #33	; 0x21
    120a:	f001 fd3b 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_rest, HIGH);
    120e:	2101      	movs	r1, #1
    1210:	2021      	movs	r0, #33	; 0x21
    1212:	f001 fd37 	bl	2c84 <digitalWrite>
	delay(100);
    1216:	2064      	movs	r0, #100	; 0x64
    1218:	f001 fd4e 	bl	2cb8 <delay>
	digitalWrite(AD9850_rest, LOW);
    121c:	2100      	movs	r1, #0
    121e:	2021      	movs	r0, #33	; 0x21
    1220:	f001 fd30 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
    1224:	2100      	movs	r1, #0
    1226:	2022      	movs	r0, #34	; 0x22
    1228:	f001 fd2c 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, HIGH);
    122c:	2101      	movs	r1, #1
    122e:	2022      	movs	r0, #34	; 0x22
    1230:	f001 fd28 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
    1234:	2100      	movs	r1, #0
    1236:	2022      	movs	r0, #34	; 0x22
    1238:	f001 fd24 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_fq_up, LOW);
    123c:	2100      	movs	r1, #0
    123e:	2023      	movs	r0, #35	; 0x23
    1240:	f001 fd20 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_fq_up, HIGH);
    1244:	2101      	movs	r1, #1
    1246:	2023      	movs	r0, #35	; 0x23
    1248:	f001 fd1c 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_fq_up, LOW);
    124c:	2100      	movs	r1, #0
    124e:	2023      	movs	r0, #35	; 0x23
    1250:	f001 fd18 	bl	2c84 <digitalWrite>
    1254:	4d89      	ldr	r5, [pc, #548]	; (147c <SPI_TGMClass::init_TGM()+0x2dc>)
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
    1256:	f855 0f04 	ldr.w	r0, [r5, #4]!
    125a:	2100      	movs	r1, #0
    125c:	b2c0      	uxtb	r0, r0
    125e:	f001 fd11 	bl	2c84 <digitalWrite>
    1262:	42a5      	cmp	r5, r4
    1264:	d1f7      	bne.n	1256 <SPI_TGMClass::init_TGM()+0xb6>
#define PGA2310_cs 21
#define PGA2310SPEED 32000000
volatile byte curVol = 0;

inline void _pga2310_init() {
	pinMode(PGA2310_cs, OUTPUT);
    1266:	2101      	movs	r1, #1
    1268:	2015      	movs	r0, #21
    126a:	f001 fd1f 	bl	2cac <pinMode>
	digitalWrite(PGA2310_cs, HIGH);
    126e:	2101      	movs	r1, #1
    1270:	2015      	movs	r0, #21
    1272:	f001 fd07 	bl	2c84 <digitalWrite>
}

void SPI_TGMClass::init_TGM() {
	_ad9850_init();
	_pga2310_init();
	init();
    1276:	4638      	mov	r0, r7
    1278:	f7ff ff04 	bl	1084 <SPI_TGMClass::init()>
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
    127c:	4f80      	ldr	r7, [pc, #512]	; (1480 <SPI_TGMClass::init_TGM()+0x2e0>)
	 Serial.begin(115200);
#endif // DEBUG
}

inline void _write_info(TGMinfo* data) {
	CACHE.q_write(TGM_INFO_ADDR, sizeof(TGMinfo), (char*)data);
    127e:	4b81      	ldr	r3, [pc, #516]	; (1484 <SPI_TGMClass::init_TGM()+0x2e4>)
    1280:	4881      	ldr	r0, [pc, #516]	; (1488 <SPI_TGMClass::init_TGM()+0x2e8>)
    1282:	2235      	movs	r2, #53	; 0x35
    1284:	2100      	movs	r1, #0
    1286:	f001 fb49 	bl	291c <CACHE_Class::q_write(unsigned long, unsigned short, char*)>
}

inline void _write_error(TMGerror* data) {
	CACHE.q_write(ERROR_ADDR, sizeof(TMGerror), (char*)data);
    128a:	4b80      	ldr	r3, [pc, #512]	; (148c <SPI_TGMClass::init_TGM()+0x2ec>)
    128c:	487e      	ldr	r0, [pc, #504]	; (1488 <SPI_TGMClass::init_TGM()+0x2e8>)
    128e:	2235      	movs	r2, #53	; 0x35
    1290:	2164      	movs	r1, #100	; 0x64
    1292:	f001 fb43 	bl	291c <CACHE_Class::q_write(unsigned long, unsigned short, char*)>
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
    1296:	783b      	ldrb	r3, [r7, #0]
    1298:	2b01      	cmp	r3, #1
    129a:	d06f      	beq.n	137c <SPI_TGMClass::init_TGM()+0x1dc>
	pinMode(PGA2310_cs, OUTPUT);
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _pga2310_wr(byte LGain, byte RGain) {
	digitalWrite(PGA2310_cs, LOW);
    129c:	2100      	movs	r1, #0
    129e:	2015      	movs	r0, #21
    12a0:	f001 fcf0 	bl	2c84 <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    12a4:	497a      	ldr	r1, [pc, #488]	; (1490 <SPI_TGMClass::init_TGM()+0x2f0>)
    12a6:	7ac8      	ldrb	r0, [r1, #11]
    12a8:	2800      	cmp	r0, #0
    12aa:	d027      	beq.n	12fc <SPI_TGMClass::init_TGM()+0x15c>
			__disable_irq();
    12ac:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    12ae:	7aca      	ldrb	r2, [r1, #11]
    12b0:	07d5      	lsls	r5, r2, #31
    12b2:	4613      	mov	r3, r2
    12b4:	d506      	bpl.n	12c4 <SPI_TGMClass::init_TGM()+0x124>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    12b6:	4d77      	ldr	r5, [pc, #476]	; (1494 <SPI_TGMClass::init_TGM()+0x2f4>)
    12b8:	68cb      	ldr	r3, [r1, #12]
    12ba:	6828      	ldr	r0, [r5, #0]
    12bc:	4018      	ands	r0, r3
    12be:	61c8      	str	r0, [r1, #28]
    12c0:	4613      	mov	r3, r2
				NVIC_ICER0 = interruptSave[0];
    12c2:	6028      	str	r0, [r5, #0]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    12c4:	0790      	lsls	r0, r2, #30
    12c6:	d506      	bpl.n	12d6 <SPI_TGMClass::init_TGM()+0x136>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    12c8:	4a73      	ldr	r2, [pc, #460]	; (1498 <SPI_TGMClass::init_TGM()+0x2f8>)
    12ca:	690b      	ldr	r3, [r1, #16]
    12cc:	6810      	ldr	r0, [r2, #0]
    12ce:	4003      	ands	r3, r0
    12d0:	620b      	str	r3, [r1, #32]
				NVIC_ICER1 = interruptSave[1];
    12d2:	6013      	str	r3, [r2, #0]
    12d4:	7acb      	ldrb	r3, [r1, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    12d6:	075a      	lsls	r2, r3, #29
    12d8:	d506      	bpl.n	12e8 <SPI_TGMClass::init_TGM()+0x148>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    12da:	4a70      	ldr	r2, [pc, #448]	; (149c <SPI_TGMClass::init_TGM()+0x2fc>)
    12dc:	694b      	ldr	r3, [r1, #20]
    12de:	6810      	ldr	r0, [r2, #0]
    12e0:	4003      	ands	r3, r0
    12e2:	624b      	str	r3, [r1, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    12e4:	6013      	str	r3, [r2, #0]
    12e6:	7acb      	ldrb	r3, [r1, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    12e8:	071b      	lsls	r3, r3, #28
    12ea:	d505      	bpl.n	12f8 <SPI_TGMClass::init_TGM()+0x158>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    12ec:	4a6c      	ldr	r2, [pc, #432]	; (14a0 <SPI_TGMClass::init_TGM()+0x300>)
    12ee:	698b      	ldr	r3, [r1, #24]
    12f0:	6810      	ldr	r0, [r2, #0]
    12f2:	4003      	ands	r3, r0
    12f4:	628b      	str	r3, [r1, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    12f6:	6013      	str	r3, [r2, #0]
			}
			#endif
			__enable_irq();
    12f8:	b662      	cpsie	i
    12fa:	7ac8      	ldrb	r0, [r1, #11]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    12fc:	680b      	ldr	r3, [r1, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    12fe:	68da      	ldr	r2, [r3, #12]
    1300:	f1b2 4f38 	cmp.w	r2, #3087007744	; 0xb8000000
    1304:	d009      	beq.n	131a <SPI_TGMClass::init_TGM()+0x17a>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    1306:	4d67      	ldr	r5, [pc, #412]	; (14a4 <SPI_TGMClass::init_TGM()+0x304>)
    1308:	601d      	str	r5, [r3, #0]
			port().CTAR0 = settings.ctar;
    130a:	f04f 4538 	mov.w	r5, #3087007744	; 0xb8000000
    130e:	60dd      	str	r5, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    1310:	4a65      	ldr	r2, [pc, #404]	; (14a8 <SPI_TGMClass::init_TGM()+0x308>)
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    1312:	f04f 4578 	mov.w	r5, #4160749568	; 0xf8000000
    1316:	611d      	str	r5, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    1318:	601a      	str	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    131a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
		port().PUSHR = data;
    131e:	2201      	movs	r2, #1
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    1320:	62dd      	str	r5, [r3, #44]	; 0x2c
		port().PUSHR = data;
    1322:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1326:	2a00      	cmp	r2, #0
    1328:	dafc      	bge.n	1324 <SPI_TGMClass::init_TGM()+0x184>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    132a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
		port().PUSHR = data;
    132e:	2201      	movs	r2, #1
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    1330:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    1334:	62dd      	str	r5, [r3, #44]	; 0x2c
		port().PUSHR = data;
    1336:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    133a:	2a00      	cmp	r2, #0
    133c:	dafc      	bge.n	1338 <SPI_TGMClass::init_TGM()+0x198>
		return port().POPR;
    133e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    1340:	b1b0      	cbz	r0, 1370 <SPI_TGMClass::init_TGM()+0x1d0>
			if (interruptMasksUsed & 0x01) {
    1342:	07c5      	lsls	r5, r0, #31
    1344:	d503      	bpl.n	134e <SPI_TGMClass::init_TGM()+0x1ae>
				NVIC_ISER0 = interruptSave[0];
    1346:	4b59      	ldr	r3, [pc, #356]	; (14ac <SPI_TGMClass::init_TGM()+0x30c>)
    1348:	69ca      	ldr	r2, [r1, #28]
    134a:	601a      	str	r2, [r3, #0]
    134c:	7ac8      	ldrb	r0, [r1, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    134e:	0782      	lsls	r2, r0, #30
    1350:	d503      	bpl.n	135a <SPI_TGMClass::init_TGM()+0x1ba>
				NVIC_ISER1 = interruptSave[1];
    1352:	4b57      	ldr	r3, [pc, #348]	; (14b0 <SPI_TGMClass::init_TGM()+0x310>)
    1354:	6a0a      	ldr	r2, [r1, #32]
    1356:	601a      	str	r2, [r3, #0]
    1358:	7ac8      	ldrb	r0, [r1, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    135a:	0743      	lsls	r3, r0, #29
    135c:	d503      	bpl.n	1366 <SPI_TGMClass::init_TGM()+0x1c6>
				NVIC_ISER2 = interruptSave[2];
    135e:	4b55      	ldr	r3, [pc, #340]	; (14b4 <SPI_TGMClass::init_TGM()+0x314>)
    1360:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    1362:	601a      	str	r2, [r3, #0]
    1364:	7ac8      	ldrb	r0, [r1, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    1366:	0705      	lsls	r5, r0, #28
    1368:	d502      	bpl.n	1370 <SPI_TGMClass::init_TGM()+0x1d0>
				NVIC_ISER3 = interruptSave[3];
    136a:	4b53      	ldr	r3, [pc, #332]	; (14b8 <SPI_TGMClass::init_TGM()+0x318>)
    136c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    136e:	601a      	str	r2, [r3, #0]
	SPI.beginTransaction(SPISettings(PGA2310SPEED, MSBFIRST, SPI_MODE0));
	SPI.transfer(LGain);//left channel
	SPI.transfer(RGain);//right channel
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
    1370:	2101      	movs	r1, #1
    1372:	2015      	movs	r0, #21
    1374:	f001 fc86 	bl	2c84 <digitalWrite>
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
		_pga2310_wr(vol, vol);
		curVol = vol;
    1378:	2301      	movs	r3, #1
    137a:	703b      	strb	r3, [r7, #0]
	_ad9850_data_wr(0);
}


inline void _set_fq(uint32_t fq) {
	if (curFq != fq) {
    137c:	f8df 813c 	ldr.w	r8, [pc, #316]	; 14bc <SPI_TGMClass::init_TGM()+0x31c>
    1380:	f8d8 3000 	ldr.w	r3, [r8]
    1384:	2b01      	cmp	r3, #1
    1386:	d070      	beq.n	146a <SPI_TGMClass::init_TGM()+0x2ca>
    1388:	4d3c      	ldr	r5, [pc, #240]	; (147c <SPI_TGMClass::init_TGM()+0x2dc>)
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
    138a:	f855 0f04 	ldr.w	r0, [r5, #4]!
    138e:	2100      	movs	r1, #0
    1390:	b2c0      	uxtb	r0, r0
    1392:	f001 fc77 	bl	2c84 <digitalWrite>
    1396:	42a5      	cmp	r5, r4
    1398:	d1f7      	bne.n	138a <SPI_TGMClass::init_TGM()+0x1ea>

inline void _ad9850_wr_parallel(uint32_t fq) {
	uint8_t * data = (uint8_t *)&fq;

	_ad9850_data_wr(0);
	digitalWrite(AD9850_w_clk, HIGH);
    139a:	2101      	movs	r1, #1
    139c:	2022      	movs	r0, #34	; 0x22
    139e:	f001 fc71 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
    13a2:	2100      	movs	r1, #0
    13a4:	2022      	movs	r0, #34	; 0x22
    13a6:	f001 fc6d 	bl	2c84 <digitalWrite>
    13aa:	4d34      	ldr	r5, [pc, #208]	; (147c <SPI_TGMClass::init_TGM()+0x2dc>)
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
    13ac:	f855 0f04 	ldr.w	r0, [r5, #4]!
    13b0:	2100      	movs	r1, #0
    13b2:	b2c0      	uxtb	r0, r0
    13b4:	f001 fc66 	bl	2c84 <digitalWrite>
    13b8:	42a5      	cmp	r5, r4
    13ba:	d1f7      	bne.n	13ac <SPI_TGMClass::init_TGM()+0x20c>
	_ad9850_data_wr(0);
	digitalWrite(AD9850_w_clk, HIGH);
	digitalWrite(AD9850_w_clk, LOW);

	_ad9850_data_wr(data[3]);
	digitalWrite(AD9850_w_clk, HIGH);
    13bc:	2101      	movs	r1, #1
    13be:	2022      	movs	r0, #34	; 0x22
    13c0:	f001 fc60 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
    13c4:	2100      	movs	r1, #0
    13c6:	2022      	movs	r0, #34	; 0x22
    13c8:	f001 fc5c 	bl	2c84 <digitalWrite>
    13cc:	4d2b      	ldr	r5, [pc, #172]	; (147c <SPI_TGMClass::init_TGM()+0x2dc>)
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
    13ce:	f855 0f04 	ldr.w	r0, [r5, #4]!
    13d2:	2100      	movs	r1, #0
    13d4:	b2c0      	uxtb	r0, r0
    13d6:	f001 fc55 	bl	2c84 <digitalWrite>
    13da:	42a5      	cmp	r5, r4
    13dc:	d1f7      	bne.n	13ce <SPI_TGMClass::init_TGM()+0x22e>
	_ad9850_data_wr(data[3]);
	digitalWrite(AD9850_w_clk, HIGH);
	digitalWrite(AD9850_w_clk, LOW);

	_ad9850_data_wr(data[2]);
	digitalWrite(AD9850_w_clk, HIGH);
    13de:	2101      	movs	r1, #1
    13e0:	2022      	movs	r0, #34	; 0x22
    13e2:	f001 fc4f 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
    13e6:	2100      	movs	r1, #0
    13e8:	2022      	movs	r0, #34	; 0x22
    13ea:	f001 fc4b 	bl	2c84 <digitalWrite>
    13ee:	4d23      	ldr	r5, [pc, #140]	; (147c <SPI_TGMClass::init_TGM()+0x2dc>)
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
    13f0:	f855 0f04 	ldr.w	r0, [r5, #4]!
    13f4:	2100      	movs	r1, #0
    13f6:	b2c0      	uxtb	r0, r0
    13f8:	f001 fc44 	bl	2c84 <digitalWrite>
    13fc:	42a5      	cmp	r5, r4
    13fe:	d1f7      	bne.n	13f0 <SPI_TGMClass::init_TGM()+0x250>
	_ad9850_data_wr(data[2]);
	digitalWrite(AD9850_w_clk, HIGH);
	digitalWrite(AD9850_w_clk, LOW);

	_ad9850_data_wr(data[1]);
	digitalWrite(AD9850_w_clk, HIGH);
    1400:	2101      	movs	r1, #1
    1402:	2022      	movs	r0, #34	; 0x22
    1404:	f001 fc3e 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
    1408:	2100      	movs	r1, #0
    140a:	2022      	movs	r0, #34	; 0x22
    140c:	f001 fc3a 	bl	2c84 <digitalWrite>
    1410:	f8df 9068 	ldr.w	r9, [pc, #104]	; 147c <SPI_TGMClass::init_TGM()+0x2dc>
    1414:	2500      	movs	r5, #0
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
    1416:	f04f 0a01 	mov.w	sl, #1
    141a:	f859 0f04 	ldr.w	r0, [r9, #4]!
    141e:	fa0a f105 	lsl.w	r1, sl, r5
    1422:	b2c0      	uxtb	r0, r0
    1424:	f001 0122 	and.w	r1, r1, #34	; 0x22
    1428:	3501      	adds	r5, #1
    142a:	f001 fc2b 	bl	2c84 <digitalWrite>
    142e:	2d08      	cmp	r5, #8
    1430:	d1f3      	bne.n	141a <SPI_TGMClass::init_TGM()+0x27a>
	_ad9850_data_wr(data[1]);
	digitalWrite(AD9850_w_clk, HIGH);
	digitalWrite(AD9850_w_clk, LOW);

	_ad9850_data_wr(data[0]);
	digitalWrite(AD9850_w_clk, HIGH);
    1432:	2101      	movs	r1, #1
    1434:	2022      	movs	r0, #34	; 0x22
    1436:	f001 fc25 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
    143a:	2100      	movs	r1, #0
    143c:	2022      	movs	r0, #34	; 0x22
    143e:	f001 fc21 	bl	2c84 <digitalWrite>

	digitalWrite(AD9850_fq_up, HIGH);
    1442:	2101      	movs	r1, #1
    1444:	2023      	movs	r0, #35	; 0x23
    1446:	f001 fc1d 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_fq_up, LOW);
    144a:	2100      	movs	r1, #0
    144c:	2023      	movs	r0, #35	; 0x23
    144e:	f001 fc19 	bl	2c84 <digitalWrite>
    1452:	4d0a      	ldr	r5, [pc, #40]	; (147c <SPI_TGMClass::init_TGM()+0x2dc>)
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
    1454:	f855 0f04 	ldr.w	r0, [r5, #4]!
    1458:	2100      	movs	r1, #0
    145a:	b2c0      	uxtb	r0, r0
    145c:	f001 fc12 	bl	2c84 <digitalWrite>
    1460:	42a5      	cmp	r5, r4
    1462:	d1f7      	bne.n	1454 <SPI_TGMClass::init_TGM()+0x2b4>


inline void _set_fq(uint32_t fq) {
	if (curFq != fq) {
		_ad9850_wr_parallel(fq_convert(fq));
		curFq = fq;
    1464:	2301      	movs	r3, #1
    1466:	f8c8 3000 	str.w	r3, [r8]
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
    146a:	783b      	ldrb	r3, [r7, #0]
    146c:	2b00      	cmp	r3, #0
    146e:	f040 8091 	bne.w	1594 <SPI_TGMClass::init_TGM()+0x3f4>
	_ad9850_data_wr(0);
}


inline void _set_fq(uint32_t fq) {
	if (curFq != fq) {
    1472:	f8d8 3000 	ldr.w	r3, [r8]
    1476:	bb1b      	cbnz	r3, 14c0 <SPI_TGMClass::init_TGM()+0x320>
    1478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    147c:	1fff0aa8 	.word	0x1fff0aa8
    1480:	1fff1b84 	.word	0x1fff1b84
    1484:	1fff1b48 	.word	0x1fff1b48
    1488:	1fff2060 	.word	0x1fff2060
    148c:	1fff1aa4 	.word	0x1fff1aa4
    1490:	1fff0dd0 	.word	0x1fff0dd0
    1494:	e000e180 	.word	0xe000e180
    1498:	e000e184 	.word	0xe000e184
    149c:	e000e188 	.word	0xe000e188
    14a0:	e000e18c 	.word	0xe000e18c
    14a4:	003f4001 	.word	0x003f4001
    14a8:	803f0000 	.word	0x803f0000
    14ac:	e000e100 	.word	0xe000e100
    14b0:	e000e104 	.word	0xe000e104
    14b4:	e000e108 	.word	0xe000e108
    14b8:	e000e10c 	.word	0xe000e10c
    14bc:	1fff1b40 	.word	0x1fff1b40
    14c0:	4d6d      	ldr	r5, [pc, #436]	; (1678 <SPI_TGMClass::init_TGM()+0x4d8>)
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
    14c2:	f855 0f04 	ldr.w	r0, [r5, #4]!
    14c6:	2100      	movs	r1, #0
    14c8:	b2c0      	uxtb	r0, r0
    14ca:	f001 fbdb 	bl	2c84 <digitalWrite>
    14ce:	42a5      	cmp	r5, r4
    14d0:	d1f7      	bne.n	14c2 <SPI_TGMClass::init_TGM()+0x322>

inline void _ad9850_wr_parallel(uint32_t fq) {
	uint8_t * data = (uint8_t *)&fq;

	_ad9850_data_wr(0);
	digitalWrite(AD9850_w_clk, HIGH);
    14d2:	2101      	movs	r1, #1
    14d4:	2022      	movs	r0, #34	; 0x22
    14d6:	f001 fbd5 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
    14da:	2100      	movs	r1, #0
    14dc:	2022      	movs	r0, #34	; 0x22
    14de:	f001 fbd1 	bl	2c84 <digitalWrite>
    14e2:	4d65      	ldr	r5, [pc, #404]	; (1678 <SPI_TGMClass::init_TGM()+0x4d8>)
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
    14e4:	f855 0f04 	ldr.w	r0, [r5, #4]!
    14e8:	2100      	movs	r1, #0
    14ea:	b2c0      	uxtb	r0, r0
    14ec:	f001 fbca 	bl	2c84 <digitalWrite>
    14f0:	42a5      	cmp	r5, r4
    14f2:	d1f7      	bne.n	14e4 <SPI_TGMClass::init_TGM()+0x344>
	_ad9850_data_wr(0);
	digitalWrite(AD9850_w_clk, HIGH);
	digitalWrite(AD9850_w_clk, LOW);

	_ad9850_data_wr(data[3]);
	digitalWrite(AD9850_w_clk, HIGH);
    14f4:	2101      	movs	r1, #1
    14f6:	2022      	movs	r0, #34	; 0x22
    14f8:	f001 fbc4 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
    14fc:	2100      	movs	r1, #0
    14fe:	2022      	movs	r0, #34	; 0x22
    1500:	f001 fbc0 	bl	2c84 <digitalWrite>
    1504:	4d5c      	ldr	r5, [pc, #368]	; (1678 <SPI_TGMClass::init_TGM()+0x4d8>)
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
    1506:	f855 0f04 	ldr.w	r0, [r5, #4]!
    150a:	2100      	movs	r1, #0
    150c:	b2c0      	uxtb	r0, r0
    150e:	f001 fbb9 	bl	2c84 <digitalWrite>
    1512:	42a5      	cmp	r5, r4
    1514:	d1f7      	bne.n	1506 <SPI_TGMClass::init_TGM()+0x366>
	_ad9850_data_wr(data[3]);
	digitalWrite(AD9850_w_clk, HIGH);
	digitalWrite(AD9850_w_clk, LOW);

	_ad9850_data_wr(data[2]);
	digitalWrite(AD9850_w_clk, HIGH);
    1516:	2101      	movs	r1, #1
    1518:	2022      	movs	r0, #34	; 0x22
    151a:	f001 fbb3 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
    151e:	2100      	movs	r1, #0
    1520:	2022      	movs	r0, #34	; 0x22
    1522:	f001 fbaf 	bl	2c84 <digitalWrite>
    1526:	4d54      	ldr	r5, [pc, #336]	; (1678 <SPI_TGMClass::init_TGM()+0x4d8>)
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
    1528:	f855 0f04 	ldr.w	r0, [r5, #4]!
    152c:	2100      	movs	r1, #0
    152e:	b2c0      	uxtb	r0, r0
    1530:	f001 fba8 	bl	2c84 <digitalWrite>
    1534:	42a5      	cmp	r5, r4
    1536:	d1f7      	bne.n	1528 <SPI_TGMClass::init_TGM()+0x388>
	_ad9850_data_wr(data[2]);
	digitalWrite(AD9850_w_clk, HIGH);
	digitalWrite(AD9850_w_clk, LOW);

	_ad9850_data_wr(data[1]);
	digitalWrite(AD9850_w_clk, HIGH);
    1538:	2101      	movs	r1, #1
    153a:	2022      	movs	r0, #34	; 0x22
    153c:	f001 fba2 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
    1540:	2100      	movs	r1, #0
    1542:	2022      	movs	r0, #34	; 0x22
    1544:	f001 fb9e 	bl	2c84 <digitalWrite>
    1548:	4d4b      	ldr	r5, [pc, #300]	; (1678 <SPI_TGMClass::init_TGM()+0x4d8>)
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
    154a:	f855 0f04 	ldr.w	r0, [r5, #4]!
    154e:	2100      	movs	r1, #0
    1550:	b2c0      	uxtb	r0, r0
    1552:	f001 fb97 	bl	2c84 <digitalWrite>
    1556:	42a5      	cmp	r5, r4
    1558:	d1f7      	bne.n	154a <SPI_TGMClass::init_TGM()+0x3aa>
	_ad9850_data_wr(data[1]);
	digitalWrite(AD9850_w_clk, HIGH);
	digitalWrite(AD9850_w_clk, LOW);

	_ad9850_data_wr(data[0]);
	digitalWrite(AD9850_w_clk, HIGH);
    155a:	2101      	movs	r1, #1
    155c:	2022      	movs	r0, #34	; 0x22
    155e:	f001 fb91 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_w_clk, LOW);
    1562:	2100      	movs	r1, #0
    1564:	2022      	movs	r0, #34	; 0x22
    1566:	f001 fb8d 	bl	2c84 <digitalWrite>

	digitalWrite(AD9850_fq_up, HIGH);
    156a:	2101      	movs	r1, #1
    156c:	2023      	movs	r0, #35	; 0x23
    156e:	f001 fb89 	bl	2c84 <digitalWrite>
	digitalWrite(AD9850_fq_up, LOW);
    1572:	2100      	movs	r1, #0
    1574:	2023      	movs	r0, #35	; 0x23
    1576:	f001 fb85 	bl	2c84 <digitalWrite>
//int AD9850_DATA[8] = { 39, 38, 14, 16, 10, 9, 19, 20 }; //Suit for teensy3.6Adptor4TGM3.2Ver2
int AD9850_DATA[8] = {24, 25, 26, 27, 28, 29, 30, 31}; //Suit for teensy3.6Adptor4TGM3.2Ver3
volatile uint32_t curFq = 0;

void _ad9850_data_wr(byte data) {
	for (byte i = 0; i < 8; i++) digitalWrite(AD9850_DATA[i], data & _BV(i));
    157a:	f856 0f04 	ldr.w	r0, [r6, #4]!
    157e:	2100      	movs	r1, #0
    1580:	b2c0      	uxtb	r0, r0
    1582:	f001 fb7f 	bl	2c84 <digitalWrite>
    1586:	42a6      	cmp	r6, r4
    1588:	d1f7      	bne.n	157a <SPI_TGMClass::init_TGM()+0x3da>


inline void _set_fq(uint32_t fq) {
	if (curFq != fq) {
		_ad9850_wr_parallel(fq_convert(fq));
		curFq = fq;
    158a:	2300      	movs	r3, #0
    158c:	f8c8 3000 	str.w	r3, [r8]
    1590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	pinMode(PGA2310_cs, OUTPUT);
	digitalWrite(PGA2310_cs, HIGH);
}

inline void _pga2310_wr(byte LGain, byte RGain) {
	digitalWrite(PGA2310_cs, LOW);
    1594:	2100      	movs	r1, #0
    1596:	2015      	movs	r0, #21
    1598:	f001 fb74 	bl	2c84 <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    159c:	4937      	ldr	r1, [pc, #220]	; (167c <SPI_TGMClass::init_TGM()+0x4dc>)
    159e:	7ac8      	ldrb	r0, [r1, #11]
    15a0:	2800      	cmp	r0, #0
    15a2:	d140      	bne.n	1626 <SPI_TGMClass::init_TGM()+0x486>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    15a4:	680b      	ldr	r3, [r1, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    15a6:	68da      	ldr	r2, [r3, #12]
    15a8:	f1b2 4f38 	cmp.w	r2, #3087007744	; 0xb8000000
    15ac:	d009      	beq.n	15c2 <SPI_TGMClass::init_TGM()+0x422>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    15ae:	4d34      	ldr	r5, [pc, #208]	; (1680 <SPI_TGMClass::init_TGM()+0x4e0>)
    15b0:	601d      	str	r5, [r3, #0]
			port().CTAR0 = settings.ctar;
    15b2:	f04f 4538 	mov.w	r5, #3087007744	; 0xb8000000
    15b6:	60dd      	str	r5, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    15b8:	4a32      	ldr	r2, [pc, #200]	; (1684 <SPI_TGMClass::init_TGM()+0x4e4>)
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    15ba:	f04f 4578 	mov.w	r5, #4160749568	; 0xf8000000
    15be:	611d      	str	r5, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    15c0:	601a      	str	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    15c2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
		port().PUSHR = data;
    15c6:	2200      	movs	r2, #0
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    15c8:	62dd      	str	r5, [r3, #44]	; 0x2c
		port().PUSHR = data;
    15ca:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    15cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    15ce:	2a00      	cmp	r2, #0
    15d0:	dafc      	bge.n	15cc <SPI_TGMClass::init_TGM()+0x42c>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    15d2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
		port().PUSHR = data;
    15d6:	2200      	movs	r2, #0
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    15d8:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    15dc:	62dd      	str	r5, [r3, #44]	; 0x2c
		port().PUSHR = data;
    15de:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    15e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    15e2:	2a00      	cmp	r2, #0
    15e4:	dafc      	bge.n	15e0 <SPI_TGMClass::init_TGM()+0x440>
		return port().POPR;
    15e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    15e8:	b1b0      	cbz	r0, 1618 <SPI_TGMClass::init_TGM()+0x478>
			if (interruptMasksUsed & 0x01) {
    15ea:	07c3      	lsls	r3, r0, #31
    15ec:	d503      	bpl.n	15f6 <SPI_TGMClass::init_TGM()+0x456>
				NVIC_ISER0 = interruptSave[0];
    15ee:	4b26      	ldr	r3, [pc, #152]	; (1688 <SPI_TGMClass::init_TGM()+0x4e8>)
    15f0:	69ca      	ldr	r2, [r1, #28]
    15f2:	601a      	str	r2, [r3, #0]
    15f4:	7ac8      	ldrb	r0, [r1, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    15f6:	0785      	lsls	r5, r0, #30
    15f8:	d503      	bpl.n	1602 <SPI_TGMClass::init_TGM()+0x462>
				NVIC_ISER1 = interruptSave[1];
    15fa:	4b24      	ldr	r3, [pc, #144]	; (168c <SPI_TGMClass::init_TGM()+0x4ec>)
    15fc:	6a0a      	ldr	r2, [r1, #32]
    15fe:	601a      	str	r2, [r3, #0]
    1600:	7ac8      	ldrb	r0, [r1, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    1602:	0742      	lsls	r2, r0, #29
    1604:	d503      	bpl.n	160e <SPI_TGMClass::init_TGM()+0x46e>
				NVIC_ISER2 = interruptSave[2];
    1606:	4b22      	ldr	r3, [pc, #136]	; (1690 <SPI_TGMClass::init_TGM()+0x4f0>)
    1608:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    160a:	601a      	str	r2, [r3, #0]
    160c:	7ac8      	ldrb	r0, [r1, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    160e:	0703      	lsls	r3, r0, #28
    1610:	d502      	bpl.n	1618 <SPI_TGMClass::init_TGM()+0x478>
				NVIC_ISER3 = interruptSave[3];
    1612:	4b20      	ldr	r3, [pc, #128]	; (1694 <SPI_TGMClass::init_TGM()+0x4f4>)
    1614:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    1616:	601a      	str	r2, [r3, #0]
	SPI.beginTransaction(SPISettings(PGA2310SPEED, MSBFIRST, SPI_MODE0));
	SPI.transfer(LGain);//left channel
	SPI.transfer(RGain);//right channel
	SPI.endTransaction();
	digitalWrite(PGA2310_cs, HIGH);
    1618:	2101      	movs	r1, #1
    161a:	2015      	movs	r0, #21
    161c:	f001 fb32 	bl	2c84 <digitalWrite>
}

inline void _set_vol(byte vol) {
	if (curVol != vol) {
		_pga2310_wr(vol, vol);
		curVol = vol;
    1620:	2300      	movs	r3, #0
    1622:	703b      	strb	r3, [r7, #0]
    1624:	e725      	b.n	1472 <SPI_TGMClass::init_TGM()+0x2d2>
	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
			__disable_irq();
    1626:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1628:	7acb      	ldrb	r3, [r1, #11]
    162a:	07d8      	lsls	r0, r3, #31
    162c:	461a      	mov	r2, r3
    162e:	d506      	bpl.n	163e <SPI_TGMClass::init_TGM()+0x49e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1630:	4d19      	ldr	r5, [pc, #100]	; (1698 <SPI_TGMClass::init_TGM()+0x4f8>)
    1632:	68ca      	ldr	r2, [r1, #12]
    1634:	6828      	ldr	r0, [r5, #0]
    1636:	4010      	ands	r0, r2
    1638:	61c8      	str	r0, [r1, #28]
    163a:	461a      	mov	r2, r3
				NVIC_ICER0 = interruptSave[0];
    163c:	6028      	str	r0, [r5, #0]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    163e:	079d      	lsls	r5, r3, #30
    1640:	d506      	bpl.n	1650 <SPI_TGMClass::init_TGM()+0x4b0>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1642:	4a16      	ldr	r2, [pc, #88]	; (169c <SPI_TGMClass::init_TGM()+0x4fc>)
    1644:	690b      	ldr	r3, [r1, #16]
    1646:	6810      	ldr	r0, [r2, #0]
    1648:	4003      	ands	r3, r0
    164a:	620b      	str	r3, [r1, #32]
				NVIC_ICER1 = interruptSave[1];
    164c:	6013      	str	r3, [r2, #0]
    164e:	7aca      	ldrb	r2, [r1, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    1650:	0750      	lsls	r0, r2, #29
    1652:	d506      	bpl.n	1662 <SPI_TGMClass::init_TGM()+0x4c2>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1654:	4a12      	ldr	r2, [pc, #72]	; (16a0 <SPI_TGMClass::init_TGM()+0x500>)
    1656:	694b      	ldr	r3, [r1, #20]
    1658:	6810      	ldr	r0, [r2, #0]
    165a:	4003      	ands	r3, r0
    165c:	624b      	str	r3, [r1, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    165e:	6013      	str	r3, [r2, #0]
    1660:	7aca      	ldrb	r2, [r1, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    1662:	0712      	lsls	r2, r2, #28
    1664:	d505      	bpl.n	1672 <SPI_TGMClass::init_TGM()+0x4d2>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    1666:	4a0f      	ldr	r2, [pc, #60]	; (16a4 <SPI_TGMClass::init_TGM()+0x504>)
    1668:	698b      	ldr	r3, [r1, #24]
    166a:	6810      	ldr	r0, [r2, #0]
    166c:	4003      	ands	r3, r0
    166e:	628b      	str	r3, [r1, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    1670:	6013      	str	r3, [r2, #0]
			}
			#endif
			__enable_irq();
    1672:	b662      	cpsie	i
    1674:	7ac8      	ldrb	r0, [r1, #11]
    1676:	e795      	b.n	15a4 <SPI_TGMClass::init_TGM()+0x404>
    1678:	1fff0aa8 	.word	0x1fff0aa8
    167c:	1fff0dd0 	.word	0x1fff0dd0
    1680:	003f4001 	.word	0x003f4001
    1684:	803f0000 	.word	0x803f0000
    1688:	e000e100 	.word	0xe000e100
    168c:	e000e104 	.word	0xe000e104
    1690:	e000e108 	.word	0xe000e108
    1694:	e000e10c 	.word	0xe000e10c
    1698:	e000e180 	.word	0xe000e180
    169c:	e000e184 	.word	0xe000e184
    16a0:	e000e188 	.word	0xe000e188
    16a4:	e000e18c 	.word	0xe000e18c

000016a8 <SPI_TGMClass::read_tone()>:
	_tone.step_down_flag = STEP_FLAG_COS_2MS;
	//_tone.clicks_dur = 1;
	//_tone.clicks_period = 10;
}

void SPI_TGMClass::read_tone() {
    16a8:	b510      	push	{r4, lr}
	if (TIMER1_STOP != timer1_mode)
    16aa:	4b07      	ldr	r3, [pc, #28]	; (16c8 <SPI_TGMClass::read_tone()+0x20>)
    16ac:	781b      	ldrb	r3, [r3, #0]
    16ae:	b113      	cbz	r3, 16b6 <SPI_TGMClass::read_tone()+0xe>
	}
	timer1_mode = TIMER1_RUNNING;
}

inline void _timer1_pause() {
	timer1.end();
    16b0:	4806      	ldr	r0, [pc, #24]	; (16cc <SPI_TGMClass::read_tone()+0x24>)
    16b2:	f002 fc47 	bl	3f44 <IntervalTimer::end()>
void SPI_TGMClass::read_tone() {
	if (TIMER1_STOP != timer1_mode)
	{
		_timer1_pause();
	}
	CACHE.q_read(TONE_ADDR, sizeof(ton), (char*)&_tone);
    16b6:	4b06      	ldr	r3, [pc, #24]	; (16d0 <SPI_TGMClass::read_tone()+0x28>)
    16b8:	4806      	ldr	r0, [pc, #24]	; (16d4 <SPI_TGMClass::read_tone()+0x2c>)
    16ba:	2264      	movs	r2, #100	; 0x64
    16bc:	21c8      	movs	r1, #200	; 0xc8
	Serial.println(_tone.durationL);
	Serial.println(_tone.step_up_flag);
	Serial.println(_tone.step_down_flag);
#endif // DEBUG

}
    16be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SPI_TGMClass::read_tone() {
	if (TIMER1_STOP != timer1_mode)
	{
		_timer1_pause();
	}
	CACHE.q_read(TONE_ADDR, sizeof(ton), (char*)&_tone);
    16c2:	f001 b93d 	b.w	2940 <CACHE_Class::q_read(unsigned long, unsigned short, char*)>
    16c6:	bf00      	nop
    16c8:	1fff1728 	.word	0x1fff1728
    16cc:	1fff1a9c 	.word	0x1fff1a9c
    16d0:	1fff1ffc 	.word	0x1fff1ffc
    16d4:	1fff2060 	.word	0x1fff2060

000016d8 <prepareToneStep(toneStep**, unsigned char*)>:
		ts->vol.flag = TONESTEPARRAYREV;
	}
}


void prepareToneStep(toneStep ** ts, byte * i) {
    16d8:	b570      	push	{r4, r5, r6, lr}
	toneStep * toneStep_temp = &(toneStepArray[*i]);
    16da:	4c0a      	ldr	r4, [pc, #40]	; (1704 <prepareToneStep(toneStep**, unsigned char*)+0x2c>)
    16dc:	780b      	ldrb	r3, [r1, #0]
    16de:	224a      	movs	r2, #74	; 0x4a
    16e0:	fb02 4403 	mla	r4, r2, r3, r4
		ts->vol.flag = TONESTEPARRAYREV;
	}
}


void prepareToneStep(toneStep ** ts, byte * i) {
    16e4:	4606      	mov	r6, r0
    16e6:	460d      	mov	r5, r1
	toneStep * toneStep_temp = &(toneStepArray[*i]);
	memset(toneStep_temp, 0, sizeof(toneStep));
    16e8:	4620      	mov	r0, r4
    16ea:	2100      	movs	r1, #0
    16ec:	f005 fefe 	bl	74ec <memset>
	if (NULL != (*ts)) {
    16f0:	6833      	ldr	r3, [r6, #0]
    16f2:	b10b      	cbz	r3, 16f8 <prepareToneStep(toneStep**, unsigned char*)+0x20>
		(*ts)->NextToneStep = toneStep_temp; //Add current tonestep to last member NextTonStep.
    16f4:	f8c3 4046 	str.w	r4, [r3, #70]	; 0x46
	}
	(*ts) = toneStep_temp; //toneStep_temp point to current struct.
    16f8:	6034      	str	r4, [r6, #0]
	(*i)++;
    16fa:	782b      	ldrb	r3, [r5, #0]
    16fc:	3301      	adds	r3, #1
    16fe:	702b      	strb	r3, [r5, #0]
    1700:	bd70      	pop	{r4, r5, r6, pc}
    1702:	bf00      	nop
    1704:	1fff1bc0 	.word	0x1fff1bc0

00001708 <SPI_TGMClass::set_tone()>:
}


void SPI_TGMClass::set_tone() {
    1708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    170c:	ed2d 8b02 	vpush	{d8}
	print_tone(&_tone);
#endif
	uint32_t dur_temp = 0;
	byte tsInd = 0;
	toneStep * toneStep_temp = NULL;
	if (TONE_FLAG_OFF == _tone.tone_flag) // check _tone.tone_flag is a new command.
    1710:	4ca5      	ldr	r4, [pc, #660]	; (19a8 <SPI_TGMClass::set_tone()+0x2a0>)
	(*ts) = toneStep_temp; //toneStep_temp point to current struct.
	(*i)++;
}


void SPI_TGMClass::set_tone() {
    1712:	b08b      	sub	sp, #44	; 0x2c
	print_tone(&_tone);
#endif
	uint32_t dur_temp = 0;
	byte tsInd = 0;
	toneStep * toneStep_temp = NULL;
	if (TONE_FLAG_OFF == _tone.tone_flag) // check _tone.tone_flag is a new command.
    1714:	78e2      	ldrb	r2, [r4, #3]
void SPI_TGMClass::set_tone() {
#ifdef DEBUG
	print_tone(&_tone);
#endif
	uint32_t dur_temp = 0;
	byte tsInd = 0;
    1716:	2300      	movs	r3, #0
    1718:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	toneStep * toneStep_temp = NULL;
    171c:	9309      	str	r3, [sp, #36]	; 0x24
	if (TONE_FLAG_OFF == _tone.tone_flag) // check _tone.tone_flag is a new command.
    171e:	bb0a      	cbnz	r2, 1764 <SPI_TGMClass::set_tone()+0x5c>
	{
		if (TIMER1_PAUSE == timer1_mode) _timer1_resume();
    1720:	4ba2      	ldr	r3, [pc, #648]	; (19ac <SPI_TGMClass::set_tone()+0x2a4>)
    1722:	781b      	ldrb	r3, [r3, #0]
    1724:	2b03      	cmp	r3, #3
    1726:	d012      	beq.n	174e <SPI_TGMClass::set_tone()+0x46>
#ifdef DEBUG
		else  Serial.println(F("NULL == toneStep_temp"));
#endif // DEBUG
		timer1.begin(timer1Func, MININT);
	}
}
    1728:	b00b      	add	sp, #44	; 0x2c
    172a:	ecbd 8b02 	vpop	{d8}
    172e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1732:	9b09      	ldr	r3, [sp, #36]	; 0x24
			toneStep_temp->vol.flag = TONESTEPDRT;
			toneStep_temp->vol.drtPar = 0;
		}

		/************start interrupt**************/
		if (NULL != toneStep_temp)
    1734:	b15b      	cbz	r3, 174e <SPI_TGMClass::set_tone()+0x46>
		{
			curToneStep = &toneStepArray[0]; // Add first toneStepArray address to curToneStep.
    1736:	4a9e      	ldr	r2, [pc, #632]	; (19b0 <SPI_TGMClass::set_tone()+0x2a8>)
    1738:	499e      	ldr	r1, [pc, #632]	; (19b4 <SPI_TGMClass::set_tone()+0x2ac>)
    173a:	6011      	str	r1, [r2, #0]
			toneStep_temp->NextToneStep = NULL;
    173c:	2200      	movs	r2, #0
    173e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    1742:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    1746:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    174a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	}
	bool begin(void (*funct)(), unsigned int microseconds) {
		if (microseconds == 0 || microseconds > MAX_PERIOD) return false;
		uint32_t cycles = (F_BUS / 1000000) * microseconds - 1;
		if (cycles < 36) return false;
		return beginCycles(funct, cycles);
    174e:	f240 2257 	movw	r2, #599	; 0x257
    1752:	4999      	ldr	r1, [pc, #612]	; (19b8 <SPI_TGMClass::set_tone()+0x2b0>)
    1754:	4899      	ldr	r0, [pc, #612]	; (19bc <SPI_TGMClass::set_tone()+0x2b4>)
    1756:	f002 fbab 	bl	3eb0 <IntervalTimer::beginCycles(void (*)(), unsigned long)>
#ifdef DEBUG
		else  Serial.println(F("NULL == toneStep_temp"));
#endif // DEBUG
		timer1.begin(timer1Func, MININT);
	}
}
    175a:	b00b      	add	sp, #44	; 0x2c
    175c:	ecbd 8b02 	vpop	{d8}
    1760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
uint32_t sweepExp() {
	return sweep_fq0 * pow(sweep_base, curToneStep->LoopInd);
}

inline void _timer1_stop() {
	timer1.end();
    1764:	4895      	ldr	r0, [pc, #596]	; (19bc <SPI_TGMClass::set_tone()+0x2b4>)
		if (TIMER1_PAUSE == timer1_mode) _timer1_resume();
	}
	else
	{
		_timer1_stop();
		_target_vol = _tone.volume;
    1766:	4e96      	ldr	r6, [pc, #600]	; (19c0 <SPI_TGMClass::set_tone()+0x2b8>)
		sweep_mode = _tone.sweep;
    1768:	4f96      	ldr	r7, [pc, #600]	; (19c4 <SPI_TGMClass::set_tone()+0x2bc>)
uint32_t sweepExp() {
	return sweep_fq0 * pow(sweep_base, curToneStep->LoopInd);
}

inline void _timer1_stop() {
	timer1.end();
    176a:	f002 fbeb 	bl	3f44 <IntervalTimer::end()>
	else
	{
		_timer1_stop();
		_target_vol = _tone.volume;
		sweep_mode = _tone.sweep;
		dur_temp = (_tone.version < 10) ? _tone.duration : _tone.durationL; //there is a new variable "_tone.duration_2" (32bit), so you can play sound longer than 6.5s.
    176e:	78a3      	ldrb	r3, [r4, #2]
		if (TIMER1_PAUSE == timer1_mode) _timer1_resume();
	}
	else
	{
		_timer1_stop();
		_target_vol = _tone.volume;
    1770:	79a1      	ldrb	r1, [r4, #6]
		sweep_mode = _tone.sweep;
    1772:	7922      	ldrb	r2, [r4, #4]
		if (TIMER1_PAUSE == timer1_mode) _timer1_resume();
	}
	else
	{
		_timer1_stop();
		_target_vol = _tone.volume;
    1774:	7031      	strb	r1, [r6, #0]
		sweep_mode = _tone.sweep;
		dur_temp = (_tone.version < 10) ? _tone.duration : _tone.durationL; //there is a new variable "_tone.duration_2" (32bit), so you can play sound longer than 6.5s.
    1776:	2b09      	cmp	r3, #9
	}
	else
	{
		_timer1_stop();
		_target_vol = _tone.volume;
		sweep_mode = _tone.sweep;
    1778:	703a      	strb	r2, [r7, #0]
		dur_temp = (_tone.version < 10) ? _tone.duration : _tone.durationL; //there is a new variable "_tone.duration_2" (32bit), so you can play sound longer than 6.5s.
    177a:	d92e      	bls.n	17da <SPI_TGMClass::set_tone()+0xd2>
		sweep_fq0 = (_tone.version < 11) ? _tone.frequency0 : _tone.frequencyL0;
    177c:	2b0a      	cmp	r3, #10
	else
	{
		_timer1_stop();
		_target_vol = _tone.volume;
		sweep_mode = _tone.sweep;
		dur_temp = (_tone.version < 10) ? _tone.duration : _tone.durationL; //there is a new variable "_tone.duration_2" (32bit), so you can play sound longer than 6.5s.
    177e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
		sweep_fq0 = (_tone.version < 11) ? _tone.frequency0 : _tone.frequencyL0;
    1780:	d02c      	beq.n	17dc <SPI_TGMClass::set_tone()+0xd4>
    1782:	f8df 8244 	ldr.w	r8, [pc, #580]	; 19c8 <SPI_TGMClass::set_tone()+0x2c0>
    1786:	6b23      	ldr	r3, [r4, #48]	; 0x30
		sweep_fq1 = (_tone.version < 11) ? _tone.frequency1 : _tone.frequencyL1;
    1788:	f8df 926c 	ldr.w	r9, [pc, #620]	; 19f8 <SPI_TGMClass::set_tone()+0x2f0>
    178c:	6b62      	ldr	r2, [r4, #52]	; 0x34
	{
		_timer1_stop();
		_target_vol = _tone.volume;
		sweep_mode = _tone.sweep;
		dur_temp = (_tone.version < 10) ? _tone.duration : _tone.durationL; //there is a new variable "_tone.duration_2" (32bit), so you can play sound longer than 6.5s.
		sweep_fq0 = (_tone.version < 11) ? _tone.frequency0 : _tone.frequencyL0;
    178e:	f8c8 3000 	str.w	r3, [r8]
		sweep_fq1 = (_tone.version < 11) ? _tone.frequency1 : _tone.frequencyL1;
		sweep_fq2 = (_tone.version < 11) ? _tone.frequency2 : _tone.frequencyL2;
    1792:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		_timer1_stop();
		_target_vol = _tone.volume;
		sweep_mode = _tone.sweep;
		dur_temp = (_tone.version < 10) ? _tone.duration : _tone.durationL; //there is a new variable "_tone.duration_2" (32bit), so you can play sound longer than 6.5s.
		sweep_fq0 = (_tone.version < 11) ? _tone.frequency0 : _tone.frequencyL0;
		sweep_fq1 = (_tone.version < 11) ? _tone.frequency1 : _tone.frequencyL1;
    1794:	f8c9 2000 	str.w	r2, [r9]
		sweep_fq2 = (_tone.version < 11) ? _tone.frequency2 : _tone.frequencyL2;

		memcpy((void*)chord_fq_array, &(sweep_fq0), sizeof(sweep_fq0)*_tone.chord_num);
    1798:	f8b4 b026 	ldrh.w	fp, [r4, #38]	; 0x26
		_target_vol = _tone.volume;
		sweep_mode = _tone.sweep;
		dur_temp = (_tone.version < 10) ? _tone.duration : _tone.durationL; //there is a new variable "_tone.duration_2" (32bit), so you can play sound longer than 6.5s.
		sweep_fq0 = (_tone.version < 11) ? _tone.frequency0 : _tone.frequencyL0;
		sweep_fq1 = (_tone.version < 11) ? _tone.frequency1 : _tone.frequencyL1;
		sweep_fq2 = (_tone.version < 11) ? _tone.frequency2 : _tone.frequencyL2;
    179c:	f8df a25c 	ldr.w	sl, [pc, #604]	; 19fc <SPI_TGMClass::set_tone()+0x2f4>

		memcpy((void*)chord_fq_array, &(sweep_fq0), sizeof(sweep_fq0)*_tone.chord_num);
    17a0:	4989      	ldr	r1, [pc, #548]	; (19c8 <SPI_TGMClass::set_tone()+0x2c0>)
    17a2:	488a      	ldr	r0, [pc, #552]	; (19cc <SPI_TGMClass::set_tone()+0x2c4>)
		_target_vol = _tone.volume;
		sweep_mode = _tone.sweep;
		dur_temp = (_tone.version < 10) ? _tone.duration : _tone.durationL; //there is a new variable "_tone.duration_2" (32bit), so you can play sound longer than 6.5s.
		sweep_fq0 = (_tone.version < 11) ? _tone.frequency0 : _tone.frequencyL0;
		sweep_fq1 = (_tone.version < 11) ? _tone.frequency1 : _tone.frequencyL1;
		sweep_fq2 = (_tone.version < 11) ? _tone.frequency2 : _tone.frequencyL2;
    17a4:	f8ca 3000 	str.w	r3, [sl]

		memcpy((void*)chord_fq_array, &(sweep_fq0), sizeof(sweep_fq0)*_tone.chord_num);
    17a8:	ea4f 028b 	mov.w	r2, fp, lsl #2
    17ac:	f001 f8e2 	bl	2974 <memcpy>
		chord_fq_num = _tone.chord_num;
    17b0:	4a87      	ldr	r2, [pc, #540]	; (19d0 <SPI_TGMClass::set_tone()+0x2c8>)

		/************step1 pretrigger delay**************/
		if (_tone.pre_sound_delay > 0)
    17b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		sweep_fq0 = (_tone.version < 11) ? _tone.frequency0 : _tone.frequencyL0;
		sweep_fq1 = (_tone.version < 11) ? _tone.frequency1 : _tone.frequencyL1;
		sweep_fq2 = (_tone.version < 11) ? _tone.frequency2 : _tone.frequencyL2;

		memcpy((void*)chord_fq_array, &(sweep_fq0), sizeof(sweep_fq0)*_tone.chord_num);
		chord_fq_num = _tone.chord_num;
    17b4:	f8a2 b000 	strh.w	fp, [r2]
		dur_temp = (_tone.version < 10) ? _tone.duration : _tone.durationL; //there is a new variable "_tone.duration_2" (32bit), so you can play sound longer than 6.5s.
		sweep_fq0 = (_tone.version < 11) ? _tone.frequency0 : _tone.frequencyL0;
		sweep_fq1 = (_tone.version < 11) ? _tone.frequency1 : _tone.frequencyL1;
		sweep_fq2 = (_tone.version < 11) ? _tone.frequency2 : _tone.frequencyL2;

		memcpy((void*)chord_fq_array, &(sweep_fq0), sizeof(sweep_fq0)*_tone.chord_num);
    17b8:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 19a8 <SPI_TGMClass::set_tone()+0x2a0>
		chord_fq_num = _tone.chord_num;

		/************step1 pretrigger delay**************/
		if (_tone.pre_sound_delay > 0)
    17bc:	2b00      	cmp	r3, #0
    17be:	d174      	bne.n	18aa <SPI_TGMClass::set_tone()+0x1a2>
			prepareToneStep(&toneStep_temp, &tsInd);
			setDelayStep(toneStep_temp, _tone.pre_sound_delay);
		}

		/************step2 set startup fq **************/
		if (dur_temp != 0) {
    17c0:	b38d      	cbz	r5, 1826 <SPI_TGMClass::set_tone()+0x11e>
			switch (sweep_mode) {
    17c2:	783b      	ldrb	r3, [r7, #0]
    17c4:	2b0d      	cmp	r3, #13
    17c6:	d82e      	bhi.n	1826 <SPI_TGMClass::set_tone()+0x11e>
    17c8:	e8df f003 	tbb	[pc, r3]
    17cc:	14142d14 	.word	0x14142d14
    17d0:	cbcbcb14 	.word	0xcbcbcb14
    17d4:	141414cb 	.word	0x141414cb
    17d8:	1414      	.short	0x1414
	else
	{
		_timer1_stop();
		_target_vol = _tone.volume;
		sweep_mode = _tone.sweep;
		dur_temp = (_tone.version < 10) ? _tone.duration : _tone.durationL; //there is a new variable "_tone.duration_2" (32bit), so you can play sound longer than 6.5s.
    17da:	8965      	ldrh	r5, [r4, #10]
		sweep_fq0 = (_tone.version < 11) ? _tone.frequency0 : _tone.frequencyL0;
    17dc:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 19c8 <SPI_TGMClass::set_tone()+0x2c0>
		sweep_fq1 = (_tone.version < 11) ? _tone.frequency1 : _tone.frequencyL1;
    17e0:	f8df 9214 	ldr.w	r9, [pc, #532]	; 19f8 <SPI_TGMClass::set_tone()+0x2f0>
    17e4:	89e3      	ldrh	r3, [r4, #14]
	{
		_timer1_stop();
		_target_vol = _tone.volume;
		sweep_mode = _tone.sweep;
		dur_temp = (_tone.version < 10) ? _tone.duration : _tone.durationL; //there is a new variable "_tone.duration_2" (32bit), so you can play sound longer than 6.5s.
		sweep_fq0 = (_tone.version < 11) ? _tone.frequency0 : _tone.frequencyL0;
    17e6:	89a2      	ldrh	r2, [r4, #12]
    17e8:	f8c8 2000 	str.w	r2, [r8]
		sweep_fq1 = (_tone.version < 11) ? _tone.frequency1 : _tone.frequencyL1;
    17ec:	f8c9 3000 	str.w	r3, [r9]
		sweep_fq2 = (_tone.version < 11) ? _tone.frequency2 : _tone.frequencyL2;
    17f0:	8a23      	ldrh	r3, [r4, #16]
    17f2:	e7d1      	b.n	1798 <SPI_TGMClass::set_tone()+0x90>
				toneStep_temp->fq.flag = TONESTEPDRT;
				toneStep_temp->fq.drtPar = sweep_fq0;
				break;

			case SWEEP_AM:
				prepareToneStep(&toneStep_temp, &tsInd);
    17f4:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    17f8:	a809      	add	r0, sp, #36	; 0x24
    17fa:	f7ff ff6d 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
				setOneLoopStep(toneStep_temp);
				toneStep_temp->fq.flag = TONESTEPDRT;
				toneStep_temp->fq.drtPar = sweep_fq0;
    17fe:	edd8 7a00 	vldr	s15, [r8]
				toneStep_temp->fq.drtPar = sweep_fq0;
				break;

			case SWEEP_AM:
				prepareToneStep(&toneStep_temp, &tsInd);
				setOneLoopStep(toneStep_temp);
    1802:	9b09      	ldr	r3, [sp, #36]	; 0x24
}

void setOneLoopStep(toneStep * ts) {
	ts->LoopNum = 1;
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = MININT;
    1804:	4873      	ldr	r0, [pc, #460]	; (19d4 <SPI_TGMClass::set_tone()+0x2cc>)
    1806:	f8c3 000a 	str.w	r0, [r3, #10]

			case SWEEP_AM:
				prepareToneStep(&toneStep_temp, &tsInd);
				setOneLoopStep(toneStep_temp);
				toneStep_temp->fq.flag = TONESTEPDRT;
				toneStep_temp->fq.drtPar = sweep_fq0;
    180a:	eef8 7a67 	vcvt.f32.u32	s15, s15
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
}

void setOneLoopStep(toneStep * ts) {
	ts->LoopNum = 1;
    180e:	2101      	movs	r1, #1

			case SWEEP_AM:
				prepareToneStep(&toneStep_temp, &tsInd);
				setOneLoopStep(toneStep_temp);
				toneStep_temp->fq.flag = TONESTEPDRT;
				toneStep_temp->fq.drtPar = sweep_fq0;
    1810:	ee17 2a90 	vmov	r2, s15
    1814:	f8c3 2019 	str.w	r2, [r3, #25]
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
}

void setOneLoopStep(toneStep * ts) {
	ts->LoopNum = 1;
    1818:	2200      	movs	r2, #0
    181a:	7019      	strb	r1, [r3, #0]
	ts->ISI.flag = TONESTEPDRT;
    181c:	7259      	strb	r1, [r3, #9]
				break;

			case SWEEP_AM:
				prepareToneStep(&toneStep_temp, &tsInd);
				setOneLoopStep(toneStep_temp);
				toneStep_temp->fq.flag = TONESTEPDRT;
    181e:	7619      	strb	r1, [r3, #24]
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
}

void setOneLoopStep(toneStep * ts) {
	ts->LoopNum = 1;
    1820:	705a      	strb	r2, [r3, #1]
    1822:	709a      	strb	r2, [r3, #2]
    1824:	70da      	strb	r2, [r3, #3]
				break;
			}
		}

		/************step3 ramp up**************/
		switch (_tone.step_up_flag) {
    1826:	f894 b008 	ldrb.w	fp, [r4, #8]
    182a:	f1bb 0f01 	cmp.w	fp, #1
    182e:	d056      	beq.n	18de <SPI_TGMClass::set_tone()+0x1d6>
    1830:	f1bb 0f02 	cmp.w	fp, #2
    1834:	d11c      	bne.n	1870 <SPI_TGMClass::set_tone()+0x168>
		case STEP_FLAG_COS_5MS:
			prepareToneStep(&toneStep_temp, &tsInd);
			setVolArrayStep(toneStep_temp, rampCosInterval5ms, rampCosVol5ms, sizeof(rampCosVol5ms), _target_vol, 0);
			break;
		case STEP_FLAG_COS_2MS:
			prepareToneStep(&toneStep_temp, &tsInd);
    1836:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    183a:	a809      	add	r0, sp, #36	; 0x24
    183c:	f7ff ff4c 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
			setVolArrayStep(toneStep_temp, rampCosInterval2ms, rampCosVol2ms, sizeof(rampCosVol2ms), _target_vol, 0);
    1840:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1842:	7831      	ldrb	r1, [r6, #0]
void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;

	ts->ISI.array_Size = arraySize;
	ts->ISI.arrayPar = (void *)ISIArray;
    1844:	4a64      	ldr	r2, [pc, #400]	; (19d8 <SPI_TGMClass::set_tone()+0x2d0>)

	ts->vol.array_Size = arraySize;
	ts->vol.arrayPar = (void *)VolArray;
    1846:	4865      	ldr	r0, [pc, #404]	; (19dc <SPI_TGMClass::set_tone()+0x2d4>)
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
    1848:	7219      	strb	r1, [r3, #8]
	ts->LoopNum = arraySize;

	ts->ISI.array_Size = arraySize;
	ts->ISI.arrayPar = (void *)ISIArray;
    184a:	f8c3 200e 	str.w	r2, [r3, #14]
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;
    184e:	2149      	movs	r1, #73	; 0x49
    1850:	2200      	movs	r2, #0

	ts->vol.array_Size = arraySize;
	ts->vol.arrayPar = (void *)VolArray;

	if (0 == reverse) {
		ts->ISI.flag = TONESTEPARRAY;
    1852:	f883 b009 	strb.w	fp, [r3, #9]
		ts->vol.flag = TONESTEPARRAY;
    1856:	f883 b027 	strb.w	fp, [r3, #39]	; 0x27

	ts->ISI.array_Size = arraySize;
	ts->ISI.arrayPar = (void *)ISIArray;

	ts->vol.array_Size = arraySize;
	ts->vol.arrayPar = (void *)VolArray;
    185a:	62d8      	str	r0, [r3, #44]	; 0x2c
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;
    185c:	7019      	strb	r1, [r3, #0]

	ts->ISI.array_Size = arraySize;
    185e:	7499      	strb	r1, [r3, #18]
	ts->ISI.arrayPar = (void *)ISIArray;

	ts->vol.array_Size = arraySize;
    1860:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;
    1864:	705a      	strb	r2, [r3, #1]
    1866:	709a      	strb	r2, [r3, #2]
    1868:	70da      	strb	r2, [r3, #3]

	ts->ISI.array_Size = arraySize;
    186a:	74da      	strb	r2, [r3, #19]
	ts->ISI.arrayPar = (void *)ISIArray;

	ts->vol.array_Size = arraySize;
    186c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
		}


		/************step4 set target volume**************/
		if (VOLUME_ON == _tone.volume_mode) {
    1870:	f894 b005 	ldrb.w	fp, [r4, #5]
    1874:	f1bb 0f01 	cmp.w	fp, #1
    1878:	f000 80c2 	beq.w	1a00 <SPI_TGMClass::set_tone()+0x2f8>
		uint32_t normalInterval = clicksPeriod_temp - clicksDur_temp;
		uint32_t CycleNum1_temp = dur_temp / clicksPeriod_temp;
		uint32_t lastClickInterval_temp = (dur_temp % clicksPeriod_temp > clicksDur_temp) ? (dur_temp % clicksPeriod_temp - clicksDur_temp) : 0;
		toneStep * clicksStep_temp = NULL;

		if (dur_temp != 0) {
    187c:	b325      	cbz	r5, 18c8 <SPI_TGMClass::set_tone()+0x1c0>
			switch (sweep_mode) {
    187e:	783b      	ldrb	r3, [r7, #0]
			toneStep_temp->vol.drtPar = _target_vol;
		}

		/************step5-9 duration**************/
		uint32_t sweepLoopNum_temp = 0;
		uint32_t clicksDur_temp = _tone.clicks_dur + 4; //ramp up and down cost 4ms.
    1880:	6da2      	ldr	r2, [r4, #88]	; 0x58
		uint32_t clicksPeriod_temp = (_tone.clicks_period > clicksDur_temp) ? _tone.clicks_period : clicksDur_temp;
    1882:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		uint32_t CycleNum1_temp = dur_temp / clicksPeriod_temp;
		uint32_t lastClickInterval_temp = (dur_temp % clicksPeriod_temp > clicksDur_temp) ? (dur_temp % clicksPeriod_temp - clicksDur_temp) : 0;
		toneStep * clicksStep_temp = NULL;

		if (dur_temp != 0) {
			switch (sweep_mode) {
    1884:	2b0d      	cmp	r3, #13
    1886:	f200 8483 	bhi.w	2190 <SPI_TGMClass::set_tone()+0xa88>
    188a:	e8df f013 	tbh	[pc, r3, lsl #1]
    188e:	024a      	.short	0x024a
    1890:	02200481 	.word	0x02200481
    1894:	048101d4 	.word	0x048101d4
    1898:	00460046 	.word	0x00460046
    189c:	00460046 	.word	0x00460046
    18a0:	042f0137 	.word	0x042f0137
    18a4:	033a0281 	.word	0x033a0281
    18a8:	0149      	.short	0x0149
		chord_fq_num = _tone.chord_num;

		/************step1 pretrigger delay**************/
		if (_tone.pre_sound_delay > 0)
		{
			prepareToneStep(&toneStep_temp, &tsInd);
    18aa:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    18ae:	a809      	add	r0, sp, #36	; 0x24
    18b0:	f7ff ff12 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
			setDelayStep(toneStep_temp, _tone.pre_sound_delay);
    18b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    18b6:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
    18ba:	4a49      	ldr	r2, [pc, #292]	; (19e0 <SPI_TGMClass::set_tone()+0x2d8>)
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    18bc:	6019      	str	r1, [r3, #0]
	ts->ISI.flag = TONESTEPDRT;
    18be:	2101      	movs	r1, #1
    18c0:	7259      	strb	r1, [r3, #9]
	ts->ISI.drtPar = 1000; // 1000us.
    18c2:	f8c3 200a 	str.w	r2, [r3, #10]
    18c6:	e77b      	b.n	17c0 <SPI_TGMClass::set_tone()+0xb8>
				toneStep_temp->CycleToneStep1 = clicksStep_temp; //CycleToneStep1 point to interval1 step.
				break;
			}
		}
		/************step10 ramp down**************/
		switch (_tone.step_down_flag) {
    18c8:	7a63      	ldrb	r3, [r4, #9]
    18ca:	3b01      	subs	r3, #1
    18cc:	2b03      	cmp	r3, #3
    18ce:	f63f af30 	bhi.w	1732 <SPI_TGMClass::set_tone()+0x2a>
    18d2:	e8df f013 	tbh	[pc, r3, lsl #1]
    18d6:	0105      	.short	0x0105
    18d8:	00ec00fb 	.word	0x00ec00fb
    18dc:	00b1      	.short	0x00b1
		}

		/************step3 ramp up**************/
		switch (_tone.step_up_flag) {
		case STEP_FLAG_COS_5MS:
			prepareToneStep(&toneStep_temp, &tsInd);
    18de:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    18e2:	a809      	add	r0, sp, #36	; 0x24
    18e4:	f7ff fef8 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
			setVolArrayStep(toneStep_temp, rampCosInterval5ms, rampCosVol5ms, sizeof(rampCosVol5ms), _target_vol, 0);
    18e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    18ea:	7832      	ldrb	r2, [r6, #0]
void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;

	ts->ISI.array_Size = arraySize;
	ts->ISI.arrayPar = (void *)ISIArray;
    18ec:	493d      	ldr	r1, [pc, #244]	; (19e4 <SPI_TGMClass::set_tone()+0x2dc>)
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
    18ee:	721a      	strb	r2, [r3, #8]
	ts->LoopNum = arraySize;

	ts->ISI.array_Size = arraySize;
	ts->ISI.arrayPar = (void *)ISIArray;
    18f0:	f8c3 100e 	str.w	r1, [r3, #14]

	ts->vol.array_Size = arraySize;
	ts->vol.arrayPar = (void *)VolArray;
    18f4:	4a3c      	ldr	r2, [pc, #240]	; (19e8 <SPI_TGMClass::set_tone()+0x2e0>)
    18f6:	62da      	str	r2, [r3, #44]	; 0x2c
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;
    18f8:	2168      	movs	r1, #104	; 0x68
    18fa:	2200      	movs	r2, #0
    18fc:	7019      	strb	r1, [r3, #0]

	ts->ISI.array_Size = arraySize;
    18fe:	7499      	strb	r1, [r3, #18]
	ts->ISI.arrayPar = (void *)ISIArray;

	ts->vol.array_Size = arraySize;
    1900:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
	ts->vol.arrayPar = (void *)VolArray;

	if (0 == reverse) {
		ts->ISI.flag = TONESTEPARRAY;
    1904:	2102      	movs	r1, #2
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;
    1906:	705a      	strb	r2, [r3, #1]
    1908:	709a      	strb	r2, [r3, #2]
    190a:	70da      	strb	r2, [r3, #3]

	ts->ISI.array_Size = arraySize;
    190c:	74da      	strb	r2, [r3, #19]
	ts->ISI.arrayPar = (void *)ISIArray;

	ts->vol.array_Size = arraySize;
    190e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	ts->vol.arrayPar = (void *)VolArray;

	if (0 == reverse) {
		ts->ISI.flag = TONESTEPARRAY;
    1912:	7259      	strb	r1, [r3, #9]
		ts->vol.flag = TONESTEPARRAY;
    1914:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
    1918:	e7aa      	b.n	1870 <SPI_TGMClass::set_tone()+0x168>
				break;

			case SWEEP_NOISE_GAUSS3:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;

				prepareToneStep(&toneStep_temp, &tsInd);
    191a:	f10d 0823 	add.w	r8, sp, #35	; 0x23
    191e:	af09      	add	r7, sp, #36	; 0x24
    1920:	4641      	mov	r1, r8
    1922:	4638      	mov	r0, r7
    1924:	f7ff fed8 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
    1928:	4930      	ldr	r1, [pc, #192]	; (19ec <SPI_TGMClass::set_tone()+0x2e4>)

			case SWEEP_NOISE_GAUSS3:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
    192a:	9a09      	ldr	r2, [sp, #36]	; 0x24
	ts->ISI.drtPar = MININT;
}

void setSweepLoopStep(toneStep * ts) {
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = SWEEP_INTERVAL;
    192c:	4830      	ldr	r0, [pc, #192]	; (19f0 <SPI_TGMClass::set_tone()+0x2e8>)
			case SWEEP_NOISE_GAUSS3:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
    192e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1932:	fb03 f305 	mul.w	r3, r3, r5
    1936:	fba1 1303 	umull	r1, r3, r1, r3
				toneStep_temp->fq.flag = TONESTEPFNC;
				toneStep_temp->fq.fnc = (void_fnc)random_noise_fq;
    193a:	492e      	ldr	r1, [pc, #184]	; (19f4 <SPI_TGMClass::set_tone()+0x2ec>)
	ts->ISI.drtPar = MININT;
}

void setSweepLoopStep(toneStep * ts) {
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = SWEEP_INTERVAL;
    193c:	f8c2 000a 	str.w	r0, [r2, #10]
			case SWEEP_CHORD:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
    1940:	095b      	lsrs	r3, r3, #5
    1942:	6013      	str	r3, [r2, #0]
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = MININT;
}

void setSweepLoopStep(toneStep * ts) {
	ts->ISI.flag = TONESTEPDRT;
    1944:	2301      	movs	r3, #1
    1946:	7253      	strb	r3, [r2, #9]
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
				toneStep_temp->fq.flag = TONESTEPFNC;
    1948:	2304      	movs	r3, #4
    194a:	7613      	strb	r3, [r2, #24]
				toneStep_temp->fq.fnc = (void_fnc)chord_fq;
    194c:	f8c2 1023 	str.w	r1, [r2, #35]	; 0x23
				toneStep_temp->CycleToneStep1 = clicksStep_temp; //CycleToneStep1 point to interval1 step.
				break;
			}
		}
		/************step10 ramp down**************/
		switch (_tone.step_down_flag) {
    1950:	7a63      	ldrb	r3, [r4, #9]
    1952:	3b01      	subs	r3, #1
    1954:	2b03      	cmp	r3, #3
    1956:	f200 8092 	bhi.w	1a7e <SPI_TGMClass::set_tone()+0x376>
    195a:	e8df f003 	tbb	[pc, r3]
    195e:	bac4      	.short	0xbac4
    1960:	70ab      	.short	0x70ab
				toneStep_temp->fq.flag = TONESTEPDRT;
				toneStep_temp->fq.drtPar = random_noise_fq();
				break;

			case SWEEP_NOISE_GAUSS3:
				prepareToneStep(&toneStep_temp, &tsInd);
    1962:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    1966:	a809      	add	r0, sp, #36	; 0x24
    1968:	f7ff feb6 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
				setOneLoopStep(toneStep_temp);
    196c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
}

void setOneLoopStep(toneStep * ts) {
	ts->LoopNum = 1;
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = MININT;
    1970:	4b18      	ldr	r3, [pc, #96]	; (19d4 <SPI_TGMClass::set_tone()+0x2cc>)
    1972:	f8cb 300a 	str.w	r3, [fp, #10]
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
}

void setOneLoopStep(toneStep * ts) {
	ts->LoopNum = 1;
    1976:	2201      	movs	r2, #1
    1978:	2300      	movs	r3, #0
    197a:	f88b 2000 	strb.w	r2, [fp]
	ts->ISI.flag = TONESTEPDRT;
    197e:	f88b 2009 	strb.w	r2, [fp, #9]
				break;

			case SWEEP_NOISE_GAUSS3:
				prepareToneStep(&toneStep_temp, &tsInd);
				setOneLoopStep(toneStep_temp);
				toneStep_temp->fq.flag = TONESTEPDRT;
    1982:	f88b 2018 	strb.w	r2, [fp, #24]
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
}

void setOneLoopStep(toneStep * ts) {
	ts->LoopNum = 1;
    1986:	f88b 3001 	strb.w	r3, [fp, #1]
    198a:	f88b 3002 	strb.w	r3, [fp, #2]
    198e:	f88b 3003 	strb.w	r3, [fp, #3]

			case SWEEP_NOISE_GAUSS3:
				prepareToneStep(&toneStep_temp, &tsInd);
				setOneLoopStep(toneStep_temp);
				toneStep_temp->fq.flag = TONESTEPDRT;
				toneStep_temp->fq.drtPar = random_noise_fq();
    1992:	f7fe fdfd 	bl	590 <random_noise_fq()>
    1996:	ee07 0a90 	vmov	s15, r0
    199a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    199e:	ee17 0a90 	vmov	r0, s15
    19a2:	f8cb 0019 	str.w	r0, [fp, #25]
				break;
    19a6:	e73e      	b.n	1826 <SPI_TGMClass::set_tone()+0x11e>
    19a8:	1fff1ffc 	.word	0x1fff1ffc
    19ac:	1fff1728 	.word	0x1fff1728
    19b0:	1fff1b44 	.word	0x1fff1b44
    19b4:	1fff1bc0 	.word	0x1fff1bc0
    19b8:	00000641 	.word	0x00000641
    19bc:	1fff1a9c 	.word	0x1fff1a9c
    19c0:	1fff0acc 	.word	0x1fff0acc
    19c4:	1fff179a 	.word	0x1fff179a
    19c8:	1fff1b88 	.word	0x1fff1b88
    19cc:	1fff1b94 	.word	0x1fff1b94
    19d0:	1fff1798 	.word	0x1fff1798
    19d4:	41200000 	.word	0x41200000
    19d8:	1fff0988 	.word	0x1fff0988
    19dc:	1fff08d4 	.word	0x1fff08d4
    19e0:	447a0000 	.word	0x447a0000
    19e4:	1fff0734 	.word	0x1fff0734
    19e8:	1fff0920 	.word	0x1fff0920
    19ec:	51eb851f 	.word	0x51eb851f
    19f0:	42c80000 	.word	0x42c80000
    19f4:	00000591 	.word	0x00000591
    19f8:	1fff1b8c 	.word	0x1fff1b8c
    19fc:	1fff1b90 	.word	0x1fff1b90
		}


		/************step4 set target volume**************/
		if (VOLUME_ON == _tone.volume_mode) {
			prepareToneStep(&toneStep_temp, &tsInd);
    1a00:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    1a04:	a809      	add	r0, sp, #36	; 0x24
    1a06:	f7ff fe67 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
			setOneLoopStep(toneStep_temp);
    1a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}

void setOneLoopStep(toneStep * ts) {
	ts->LoopNum = 1;
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = MININT;
    1a0c:	48cc      	ldr	r0, [pc, #816]	; (1d40 <SPI_TGMClass::set_tone()+0x638>)
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
}

void setOneLoopStep(toneStep * ts) {
	ts->LoopNum = 1;
    1a0e:	f883 b000 	strb.w	fp, [r3]
		if (VOLUME_ON == _tone.volume_mode) {
			prepareToneStep(&toneStep_temp, &tsInd);
			setOneLoopStep(toneStep_temp);
			toneStep_temp->LoopNum = 1;
			toneStep_temp->vol.flag = TONESTEPDRT;
			toneStep_temp->vol.drtPar = _target_vol;
    1a12:	7831      	ldrb	r1, [r6, #0]
	ts->ISI.drtPar = 1000; // 1000us.
}

void setOneLoopStep(toneStep * ts) {
	ts->LoopNum = 1;
	ts->ISI.flag = TONESTEPDRT;
    1a14:	f883 b009 	strb.w	fp, [r3, #9]
		if (VOLUME_ON == _tone.volume_mode) {
			prepareToneStep(&toneStep_temp, &tsInd);
			setOneLoopStep(toneStep_temp);
			toneStep_temp->LoopNum = 1;
			toneStep_temp->vol.flag = TONESTEPDRT;
			toneStep_temp->vol.drtPar = _target_vol;
    1a18:	ee07 1a90 	vmov	s15, r1
    1a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
}

void setOneLoopStep(toneStep * ts) {
	ts->LoopNum = 1;
    1a20:	2200      	movs	r2, #0
		if (VOLUME_ON == _tone.volume_mode) {
			prepareToneStep(&toneStep_temp, &tsInd);
			setOneLoopStep(toneStep_temp);
			toneStep_temp->LoopNum = 1;
			toneStep_temp->vol.flag = TONESTEPDRT;
			toneStep_temp->vol.drtPar = _target_vol;
    1a22:	ee17 1a90 	vmov	r1, s15
		/************step4 set target volume**************/
		if (VOLUME_ON == _tone.volume_mode) {
			prepareToneStep(&toneStep_temp, &tsInd);
			setOneLoopStep(toneStep_temp);
			toneStep_temp->LoopNum = 1;
			toneStep_temp->vol.flag = TONESTEPDRT;
    1a26:	f883 b027 	strb.w	fp, [r3, #39]	; 0x27
}

void setOneLoopStep(toneStep * ts) {
	ts->LoopNum = 1;
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = MININT;
    1a2a:	f8c3 000a 	str.w	r0, [r3, #10]
		if (VOLUME_ON == _tone.volume_mode) {
			prepareToneStep(&toneStep_temp, &tsInd);
			setOneLoopStep(toneStep_temp);
			toneStep_temp->LoopNum = 1;
			toneStep_temp->vol.flag = TONESTEPDRT;
			toneStep_temp->vol.drtPar = _target_vol;
    1a2e:	6299      	str	r1, [r3, #40]	; 0x28
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
}

void setOneLoopStep(toneStep * ts) {
	ts->LoopNum = 1;
    1a30:	705a      	strb	r2, [r3, #1]
    1a32:	709a      	strb	r2, [r3, #2]
    1a34:	70da      	strb	r2, [r3, #3]
    1a36:	e721      	b.n	187c <SPI_TGMClass::set_tone()+0x174>
    1a38:	f10d 0823 	add.w	r8, sp, #35	; 0x23
    1a3c:	af09      	add	r7, sp, #36	; 0x24
			prepareToneStep(&toneStep_temp, &tsInd);
			setVolArrayStep(toneStep_temp, rampCosInterval5ms, rampCosVol5ms, sizeof(rampCosVol5ms), curVol, 1);
			break;

		case STEP_FLAG_CANCEL_COS_2MS:
			prepareToneStep(&toneStep_temp, &tsInd);
    1a3e:	4641      	mov	r1, r8
    1a40:	4638      	mov	r0, r7
    1a42:	f7ff fe49 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
			setVolArrayStep(toneStep_temp, rampCosInterval2ms, rampCosVol2ms, sizeof(rampCosVol2ms), curVol, 1);
    1a46:	4abf      	ldr	r2, [pc, #764]	; (1d44 <SPI_TGMClass::set_tone()+0x63c>)
    1a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a4a:	7812      	ldrb	r2, [r2, #0]
void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;

	ts->ISI.array_Size = arraySize;
	ts->ISI.arrayPar = (void *)ISIArray;
    1a4c:	48be      	ldr	r0, [pc, #760]	; (1d48 <SPI_TGMClass::set_tone()+0x640>)

	ts->vol.array_Size = arraySize;
	ts->vol.arrayPar = (void *)VolArray;
    1a4e:	4cbf      	ldr	r4, [pc, #764]	; (1d4c <SPI_TGMClass::set_tone()+0x644>)
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
    1a50:	721a      	strb	r2, [r3, #8]
	ts->LoopNum = arraySize;
    1a52:	2149      	movs	r1, #73	; 0x49
    1a54:	2200      	movs	r2, #0

	ts->ISI.array_Size = arraySize;
	ts->ISI.arrayPar = (void *)ISIArray;
    1a56:	f8c3 000e 	str.w	r0, [r3, #14]
	if (0 == reverse) {
		ts->ISI.flag = TONESTEPARRAY;
		ts->vol.flag = TONESTEPARRAY;
	}
	else {
		ts->ISI.flag = TONESTEPARRAYREV;
    1a5a:	2003      	movs	r0, #3

	ts->ISI.array_Size = arraySize;
	ts->ISI.arrayPar = (void *)ISIArray;

	ts->vol.array_Size = arraySize;
	ts->vol.arrayPar = (void *)VolArray;
    1a5c:	62dc      	str	r4, [r3, #44]	; 0x2c
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;
    1a5e:	7019      	strb	r1, [r3, #0]

	ts->ISI.array_Size = arraySize;
    1a60:	7499      	strb	r1, [r3, #18]
	ts->ISI.arrayPar = (void *)ISIArray;

	ts->vol.array_Size = arraySize;
    1a62:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;
    1a66:	705a      	strb	r2, [r3, #1]
    1a68:	709a      	strb	r2, [r3, #2]
    1a6a:	70da      	strb	r2, [r3, #3]

	ts->ISI.array_Size = arraySize;
    1a6c:	74da      	strb	r2, [r3, #19]
	ts->ISI.arrayPar = (void *)ISIArray;

	ts->vol.array_Size = arraySize;
    1a6e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	if (0 == reverse) {
		ts->ISI.flag = TONESTEPARRAY;
		ts->vol.flag = TONESTEPARRAY;
	}
	else {
		ts->ISI.flag = TONESTEPARRAYREV;
    1a72:	7258      	strb	r0, [r3, #9]
		ts->vol.flag = TONESTEPARRAYREV;
    1a74:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
			setVolArrayStep(toneStep_temp, rampCosInterval2ms, rampCosVol2ms, sizeof(rampCosVol2ms), curVol, 1);
			break;
		}

		/************step11 close fq and vol step**************/
		if (dur_temp != 0) {
    1a78:	2d00      	cmp	r5, #0
    1a7a:	f43f ae5b 	beq.w	1734 <SPI_TGMClass::set_tone()+0x2c>
			prepareToneStep(&toneStep_temp, &tsInd);
    1a7e:	4641      	mov	r1, r8
    1a80:	4638      	mov	r0, r7
    1a82:	f7ff fe29 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
			setOneLoopStep(toneStep_temp);
    1a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
}

void setOneLoopStep(toneStep * ts) {
	ts->LoopNum = 1;
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = MININT;
    1a88:	4cad      	ldr	r4, [pc, #692]	; (1d40 <SPI_TGMClass::set_tone()+0x638>)
    1a8a:	f8c3 400a 	str.w	r4, [r3, #10]
		if (dur_temp != 0) {
			prepareToneStep(&toneStep_temp, &tsInd);
			setOneLoopStep(toneStep_temp);

			toneStep_temp->fq.flag = TONESTEPDRT;
			toneStep_temp->fq.drtPar = 0;
    1a8e:	2200      	movs	r2, #0
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
}

void setOneLoopStep(toneStep * ts) {
	ts->LoopNum = 1;
    1a90:	2100      	movs	r1, #0

			toneStep_temp->fq.flag = TONESTEPDRT;
			toneStep_temp->fq.drtPar = 0;

			toneStep_temp->vol.flag = TONESTEPDRT;
			toneStep_temp->vol.drtPar = 0;
    1a92:	4610      	mov	r0, r2
		if (dur_temp != 0) {
			prepareToneStep(&toneStep_temp, &tsInd);
			setOneLoopStep(toneStep_temp);

			toneStep_temp->fq.flag = TONESTEPDRT;
			toneStep_temp->fq.drtPar = 0;
    1a94:	f8c3 2019 	str.w	r2, [r3, #25]
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
}

void setOneLoopStep(toneStep * ts) {
	ts->LoopNum = 1;
    1a98:	2201      	movs	r2, #1

			toneStep_temp->fq.flag = TONESTEPDRT;
			toneStep_temp->fq.drtPar = 0;

			toneStep_temp->vol.flag = TONESTEPDRT;
			toneStep_temp->vol.drtPar = 0;
    1a9a:	6298      	str	r0, [r3, #40]	; 0x28
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
}

void setOneLoopStep(toneStep * ts) {
	ts->LoopNum = 1;
    1a9c:	701a      	strb	r2, [r3, #0]
	ts->ISI.flag = TONESTEPDRT;
    1a9e:	725a      	strb	r2, [r3, #9]
		/************step11 close fq and vol step**************/
		if (dur_temp != 0) {
			prepareToneStep(&toneStep_temp, &tsInd);
			setOneLoopStep(toneStep_temp);

			toneStep_temp->fq.flag = TONESTEPDRT;
    1aa0:	761a      	strb	r2, [r3, #24]
			toneStep_temp->fq.drtPar = 0;

			toneStep_temp->vol.flag = TONESTEPDRT;
    1aa2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
}

void setOneLoopStep(toneStep * ts) {
	ts->LoopNum = 1;
    1aa6:	7059      	strb	r1, [r3, #1]
    1aa8:	7099      	strb	r1, [r3, #2]
    1aaa:	70d9      	strb	r1, [r3, #3]
    1aac:	e643      	b.n	1736 <SPI_TGMClass::set_tone()+0x2e>
    1aae:	f10d 0823 	add.w	r8, sp, #35	; 0x23
    1ab2:	af09      	add	r7, sp, #36	; 0x24
			prepareToneStep(&toneStep_temp, &tsInd);
			setVolArrayStep(toneStep_temp, rampCosInterval2ms, rampCosVol2ms, sizeof(rampCosVol2ms), _target_vol, 1);
			break;

		case STEP_FLAG_CANCEL_COS_5MS:
			prepareToneStep(&toneStep_temp, &tsInd);
    1ab4:	4641      	mov	r1, r8
    1ab6:	4638      	mov	r0, r7
    1ab8:	f7ff fe0e 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
			setVolArrayStep(toneStep_temp, rampCosInterval5ms, rampCosVol5ms, sizeof(rampCosVol5ms), curVol, 1);
    1abc:	4aa1      	ldr	r2, [pc, #644]	; (1d44 <SPI_TGMClass::set_tone()+0x63c>)
    1abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ac0:	7812      	ldrb	r2, [r2, #0]
void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;

	ts->ISI.array_Size = arraySize;
	ts->ISI.arrayPar = (void *)ISIArray;
    1ac2:	48a3      	ldr	r0, [pc, #652]	; (1d50 <SPI_TGMClass::set_tone()+0x648>)

	ts->vol.array_Size = arraySize;
	ts->vol.arrayPar = (void *)VolArray;
    1ac4:	4ca3      	ldr	r4, [pc, #652]	; (1d54 <SPI_TGMClass::set_tone()+0x64c>)
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
    1ac6:	721a      	strb	r2, [r3, #8]
	ts->LoopNum = arraySize;
    1ac8:	2168      	movs	r1, #104	; 0x68
    1aca:	e7c3      	b.n	1a54 <SPI_TGMClass::set_tone()+0x34c>
    1acc:	f10d 0823 	add.w	r8, sp, #35	; 0x23
    1ad0:	af09      	add	r7, sp, #36	; 0x24
			prepareToneStep(&toneStep_temp, &tsInd);
			setVolArrayStep(toneStep_temp, rampCosInterval5ms, rampCosVol5ms, sizeof(rampCosVol5ms), _target_vol, 1);
			break;

		case STEP_FLAG_COS_2MS:
			prepareToneStep(&toneStep_temp, &tsInd);
    1ad2:	4641      	mov	r1, r8
    1ad4:	4638      	mov	r0, r7
    1ad6:	f7ff fdff 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
			setVolArrayStep(toneStep_temp, rampCosInterval2ms, rampCosVol2ms, sizeof(rampCosVol2ms), _target_vol, 1);
    1ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1adc:	7832      	ldrb	r2, [r6, #0]
    1ade:	e7b5      	b.n	1a4c <SPI_TGMClass::set_tone()+0x344>
    1ae0:	f10d 0823 	add.w	r8, sp, #35	; 0x23
    1ae4:	af09      	add	r7, sp, #36	; 0x24
			}
		}
		/************step10 ramp down**************/
		switch (_tone.step_down_flag) {
		case STEP_FLAG_COS_5MS:
			prepareToneStep(&toneStep_temp, &tsInd);
    1ae6:	4641      	mov	r1, r8
    1ae8:	4638      	mov	r0, r7
    1aea:	f7ff fdf5 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
			setVolArrayStep(toneStep_temp, rampCosInterval5ms, rampCosVol5ms, sizeof(rampCosVol5ms), _target_vol, 1);
    1aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1af0:	7832      	ldrb	r2, [r6, #0]
void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;

	ts->ISI.array_Size = arraySize;
	ts->ISI.arrayPar = (void *)ISIArray;
    1af2:	4897      	ldr	r0, [pc, #604]	; (1d50 <SPI_TGMClass::set_tone()+0x648>)

	ts->vol.array_Size = arraySize;
	ts->vol.arrayPar = (void *)VolArray;
    1af4:	4c97      	ldr	r4, [pc, #604]	; (1d54 <SPI_TGMClass::set_tone()+0x64c>)
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
    1af6:	721a      	strb	r2, [r3, #8]
	ts->LoopNum = arraySize;
    1af8:	2168      	movs	r1, #104	; 0x68
    1afa:	e7ab      	b.n	1a54 <SPI_TGMClass::set_tone()+0x34c>
				break;

			case SWEEP_CHORD:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;

				prepareToneStep(&toneStep_temp, &tsInd);
    1afc:	f10d 0823 	add.w	r8, sp, #35	; 0x23
    1b00:	af09      	add	r7, sp, #36	; 0x24
    1b02:	4641      	mov	r1, r8
    1b04:	4638      	mov	r0, r7
    1b06:	f7ff fde7 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
    1b0a:	4993      	ldr	r1, [pc, #588]	; (1d58 <SPI_TGMClass::set_tone()+0x650>)

			case SWEEP_CHORD:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
    1b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
	ts->ISI.drtPar = MININT;
}

void setSweepLoopStep(toneStep * ts) {
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = SWEEP_INTERVAL;
    1b0e:	4893      	ldr	r0, [pc, #588]	; (1d5c <SPI_TGMClass::set_tone()+0x654>)
			case SWEEP_CHORD:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
    1b10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1b14:	fb03 f305 	mul.w	r3, r3, r5
    1b18:	fba1 1303 	umull	r1, r3, r1, r3
				toneStep_temp->fq.flag = TONESTEPFNC;
				toneStep_temp->fq.fnc = (void_fnc)chord_fq;
    1b1c:	4990      	ldr	r1, [pc, #576]	; (1d60 <SPI_TGMClass::set_tone()+0x658>)
    1b1e:	e70d      	b.n	193c <SPI_TGMClass::set_tone()+0x234>
				toneStep_temp->CycleToneStep1 = clicksStep_temp;
				toneStep_temp->NextToneStep = clicksStep_temp; //Useless, this will reset at last step.
				break;

			case SWEEP_AM:
				float AMperiod = (float)1 / (float)_tone.AMFrequncy * 1000; //miniseconds.
    1b20:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
    1b24:	ed9f 6a8f 	vldr	s12, [pc, #572]	; 1d64 <SPI_TGMClass::set_tone()+0x65c>
    1b28:	498f      	ldr	r1, [pc, #572]	; (1d68 <SPI_TGMClass::set_tone()+0x660>)
				float rawIntervalScale = AMperiod / 2 * 1000; //microseconds.
				float minRawInt = MININT / rawIntervalScale;
				uint32_t CycleNum1_temp = (float)dur_temp / AMperiod;
				float AM_temp = 0;
    1b2a:	eddf 7a90 	vldr	s15, [pc, #576]	; 1d6c <SPI_TGMClass::set_tone()+0x664>
    1b2e:	f8df a254 	ldr.w	sl, [pc, #596]	; 1d84 <SPI_TGMClass::set_tone()+0x67c>
    1b32:	f8df 9254 	ldr.w	r9, [pc, #596]	; 1d88 <SPI_TGMClass::set_tone()+0x680>
				toneStep_temp->CycleToneStep1 = clicksStep_temp;
				toneStep_temp->NextToneStep = clicksStep_temp; //Useless, this will reset at last step.
				break;

			case SWEEP_AM:
				float AMperiod = (float)1 / (float)_tone.AMFrequncy * 1000; //miniseconds.
    1b36:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    1b3a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    1b3e:	eec5 6a87 	vdiv.f32	s13, s11, s14
				float rawIntervalScale = AMperiod / 2 * 1000; //microseconds.
				float minRawInt = MININT / rawIntervalScale;
				uint32_t CycleNum1_temp = (float)dur_temp / AMperiod;
    1b42:	23bf      	movs	r3, #191	; 0xbf
				float AM_temp = 0;
				byte j = 0;
    1b44:	2200      	movs	r2, #0

			case SWEEP_AM:
				float AMperiod = (float)1 / (float)_tone.AMFrequncy * 1000; //miniseconds.
				float rawIntervalScale = AMperiod / 2 * 1000; //microseconds.
				float minRawInt = MININT / rawIntervalScale;
				uint32_t CycleNum1_temp = (float)dur_temp / AMperiod;
    1b46:	ee05 5a90 	vmov	s11, r5
				toneStep_temp->CycleToneStep1 = clicksStep_temp;
				toneStep_temp->NextToneStep = clicksStep_temp; //Useless, this will reset at last step.
				break;

			case SWEEP_AM:
				float AMperiod = (float)1 / (float)_tone.AMFrequncy * 1000; //miniseconds.
    1b4a:	ee66 6a86 	vmul.f32	s13, s13, s12
				float rawIntervalScale = AMperiod / 2 * 1000; //microseconds.
    1b4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    1b52:	ee26 7a87 	vmul.f32	s14, s13, s14
				float minRawInt = MININT / rawIntervalScale;
				uint32_t CycleNum1_temp = (float)dur_temp / AMperiod;
    1b56:	eef8 5a65 	vcvt.f32.u32	s11, s11
				toneStep_temp->NextToneStep = clicksStep_temp; //Useless, this will reset at last step.
				break;

			case SWEEP_AM:
				float AMperiod = (float)1 / (float)_tone.AMFrequncy * 1000; //miniseconds.
				float rawIntervalScale = AMperiod / 2 * 1000; //microseconds.
    1b5a:	ee27 6a06 	vmul.f32	s12, s14, s12
				float minRawInt = MININT / rawIntervalScale;
				uint32_t CycleNum1_temp = (float)dur_temp / AMperiod;
    1b5e:	ee85 8aa6 	vdiv.f32	s16, s11, s13
				break;

			case SWEEP_AM:
				float AMperiod = (float)1 / (float)_tone.AMFrequncy * 1000; //miniseconds.
				float rawIntervalScale = AMperiod / 2 * 1000; //microseconds.
				float minRawInt = MININT / rawIntervalScale;
    1b62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    1b66:	eec7 6a06 	vdiv.f32	s13, s14, s12
				uint32_t CycleNum1_temp = (float)dur_temp / AMperiod;
    1b6a:	eebc 8ac8 	vcvt.u32.f32	s16, s16
				float AM_temp = 0;
				byte j = 0;
				for (byte i = 0; i < MaxAMArraySize; i++) {
					AM_temp = AM_temp + rawInterval[i];
    1b6e:	ecb1 7a01 	vldmia	r1!, {s14}
    1b72:	ee77 7a87 	vadd.f32	s15, s15, s14
    1b76:	1e58      	subs	r0, r3, #1
					if ( AM_temp >= minRawInt) {
    1b78:	eef4 6ae7 	vcmpe.f32	s13, s15
    1b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1b80:	d80b      	bhi.n	1b9a <SPI_TGMClass::set_tone()+0x492>
						AMInterval[j] = AM_temp * rawIntervalScale;
    1b82:	ee26 7a27 	vmul.f32	s14, s12, s15
						AMVol[j] = 191 - i;
    1b86:	f809 3002 	strb.w	r3, [r9, r2]
						j++;
						AM_temp = 0;
    1b8a:	eddf 7a78 	vldr	s15, [pc, #480]	; 1d6c <SPI_TGMClass::set_tone()+0x664>
				float AM_temp = 0;
				byte j = 0;
				for (byte i = 0; i < MaxAMArraySize; i++) {
					AM_temp = AM_temp + rawInterval[i];
					if ( AM_temp >= minRawInt) {
						AMInterval[j] = AM_temp * rawIntervalScale;
    1b8e:	eb0a 0382 	add.w	r3, sl, r2, lsl #2
						AMVol[j] = 191 - i;
						j++;
    1b92:	3201      	adds	r2, #1
				float AM_temp = 0;
				byte j = 0;
				for (byte i = 0; i < MaxAMArraySize; i++) {
					AM_temp = AM_temp + rawInterval[i];
					if ( AM_temp >= minRawInt) {
						AMInterval[j] = AM_temp * rawIntervalScale;
    1b94:	ed83 7a00 	vstr	s14, [r3]
						AMVol[j] = 191 - i;
						j++;
    1b98:	b2d2      	uxtb	r2, r2
    1b9a:	b2c3      	uxtb	r3, r0
				float rawIntervalScale = AMperiod / 2 * 1000; //microseconds.
				float minRawInt = MININT / rawIntervalScale;
				uint32_t CycleNum1_temp = (float)dur_temp / AMperiod;
				float AM_temp = 0;
				byte j = 0;
				for (byte i = 0; i < MaxAMArraySize; i++) {
    1b9c:	2bff      	cmp	r3, #255	; 0xff
    1b9e:	d1e6      	bne.n	1b6e <SPI_TGMClass::set_tone()+0x466>
						AMVol[j] = 191 - i;
						j++;
						AM_temp = 0;
					}
				}
				if (0 != AM_temp) {
    1ba0:	eef5 7a40 	vcmp.f32	s15, #0.0
    1ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1ba8:	d008      	beq.n	1bbc <SPI_TGMClass::set_tone()+0x4b4>
						AMInterval[j] = MININT;
						AMVol[j] = 0;
    1baa:	2100      	movs	r1, #0
						j++;
						AM_temp = 0;
					}
				}
				if (0 != AM_temp) {
						AMInterval[j] = MININT;
    1bac:	eb0a 0382 	add.w	r3, sl, r2, lsl #2
						AMVol[j] = 0;
    1bb0:	f809 1002 	strb.w	r1, [r9, r2]
						j++;
    1bb4:	1c50      	adds	r0, r2, #1
						j++;
						AM_temp = 0;
					}
				}
				if (0 != AM_temp) {
						AMInterval[j] = MININT;
    1bb6:	4962      	ldr	r1, [pc, #392]	; (1d40 <SPI_TGMClass::set_tone()+0x638>)
    1bb8:	6019      	str	r1, [r3, #0]
						AMVol[j] = 0;
						j++;
    1bba:	b2c2      	uxtb	r2, r0
						AM_temp = 0;
				}
				AMArraySize = j;
    1bbc:	4b6c      	ldr	r3, [pc, #432]	; (1d70 <SPI_TGMClass::set_tone()+0x668>)
    1bbe:	9300      	str	r3, [sp, #0]
				Serial.println();
				Serial.print("CycleNum1_temp = ");
				Serial.println(CycleNum1_temp);
#endif // DEBUG
				/*ramp up*/
				prepareToneStep(&toneStep_temp, &tsInd);
    1bc0:	f10d 0823 	add.w	r8, sp, #35	; 0x23
    1bc4:	af09      	add	r7, sp, #36	; 0x24
    1bc6:	4641      	mov	r1, r8
    1bc8:	4638      	mov	r0, r7
						AMInterval[j] = MININT;
						AMVol[j] = 0;
						j++;
						AM_temp = 0;
				}
				AMArraySize = j;
    1bca:	701a      	strb	r2, [r3, #0]
				Serial.println();
				Serial.print("CycleNum1_temp = ");
				Serial.println(CycleNum1_temp);
#endif // DEBUG
				/*ramp up*/
				prepareToneStep(&toneStep_temp, &tsInd);
    1bcc:	f7ff fd84 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
				setVolArrayStep(toneStep_temp, AMInterval, AMVol, AMArraySize, _target_vol, 0);
    1bd0:	9b00      	ldr	r3, [sp, #0]
    1bd2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    1bd6:	781a      	ldrb	r2, [r3, #0]
    1bd8:	7830      	ldrb	r0, [r6, #0]
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
    1bda:	f88b 0008 	strb.w	r0, [fp, #8]
				Serial.print("CycleNum1_temp = ");
				Serial.println(CycleNum1_temp);
#endif // DEBUG
				/*ramp up*/
				prepareToneStep(&toneStep_temp, &tsInd);
				setVolArrayStep(toneStep_temp, AMInterval, AMVol, AMArraySize, _target_vol, 0);
    1bde:	b2d2      	uxtb	r2, r2

	ts->vol.array_Size = arraySize;
	ts->vol.arrayPar = (void *)VolArray;

	if (0 == reverse) {
		ts->ISI.flag = TONESTEPARRAY;
    1be0:	2102      	movs	r1, #2

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;

	ts->ISI.array_Size = arraySize;
    1be2:	f8ab 2012 	strh.w	r2, [fp, #18]
	ts->ISI.arrayPar = (void *)ISIArray;

	ts->vol.array_Size = arraySize;
    1be6:	f8ab 2030 	strh.w	r2, [fp, #48]	; 0x30
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;
    1bea:	f8cb 2000 	str.w	r2, [fp]

	ts->vol.array_Size = arraySize;
	ts->vol.arrayPar = (void *)VolArray;

	if (0 == reverse) {
		ts->ISI.flag = TONESTEPARRAY;
    1bee:	f88b 1009 	strb.w	r1, [fp, #9]
		ts->vol.flag = TONESTEPARRAY;
    1bf2:	f88b 1027 	strb.w	r1, [fp, #39]	; 0x27
				prepareToneStep(&toneStep_temp, &tsInd);
				setVolArrayStep(toneStep_temp, AMInterval, AMVol, AMArraySize, _target_vol, 0);
				clicksStep_temp = toneStep_temp;

				/*ramp down*/
				prepareToneStep(&toneStep_temp, &tsInd);
    1bf6:	4638      	mov	r0, r7
    1bf8:	4641      	mov	r1, r8
void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;

	ts->ISI.array_Size = arraySize;
	ts->ISI.arrayPar = (void *)ISIArray;
    1bfa:	f8cb a00e 	str.w	sl, [fp, #14]

	ts->vol.array_Size = arraySize;
	ts->vol.arrayPar = (void *)VolArray;
    1bfe:	f8cb 902c 	str.w	r9, [fp, #44]	; 0x2c
				prepareToneStep(&toneStep_temp, &tsInd);
				setVolArrayStep(toneStep_temp, AMInterval, AMVol, AMArraySize, _target_vol, 0);
				clicksStep_temp = toneStep_temp;

				/*ramp down*/
				prepareToneStep(&toneStep_temp, &tsInd);
    1c02:	f7ff fd69 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
				setVolArrayStep(toneStep_temp, AMInterval, AMVol, AMArraySize, _target_vol, 1);
    1c06:	9b00      	ldr	r3, [sp, #0]
    1c08:	781a      	ldrb	r2, [r3, #0]
    1c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c0c:	7830      	ldrb	r0, [r6, #0]
				toneStep_temp->CycleNum1 = CycleNum1_temp;
				toneStep_temp->CycleToneStep1 = clicksStep_temp; //CycleToneStep1 point to interval1 step.
    1c0e:	f8c3 b03a 	str.w	fp, [r3, #58]	; 0x3a
				clicksStep_temp = toneStep_temp;

				/*ramp down*/
				prepareToneStep(&toneStep_temp, &tsInd);
				setVolArrayStep(toneStep_temp, AMInterval, AMVol, AMArraySize, _target_vol, 1);
				toneStep_temp->CycleNum1 = CycleNum1_temp;
    1c12:	ee18 ca10 	vmov	ip, s16
				setVolArrayStep(toneStep_temp, AMInterval, AMVol, AMArraySize, _target_vol, 0);
				clicksStep_temp = toneStep_temp;

				/*ramp down*/
				prepareToneStep(&toneStep_temp, &tsInd);
				setVolArrayStep(toneStep_temp, AMInterval, AMVol, AMArraySize, _target_vol, 1);
    1c16:	b2d2      	uxtb	r2, r2
	if (0 == reverse) {
		ts->ISI.flag = TONESTEPARRAY;
		ts->vol.flag = TONESTEPARRAY;
	}
	else {
		ts->ISI.flag = TONESTEPARRAYREV;
    1c18:	2103      	movs	r1, #3
void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;

	ts->ISI.array_Size = arraySize;
	ts->ISI.arrayPar = (void *)ISIArray;
    1c1a:	f8c3 a00e 	str.w	sl, [r3, #14]

	ts->vol.array_Size = arraySize;
	ts->vol.arrayPar = (void *)VolArray;
    1c1e:	f8c3 902c 	str.w	r9, [r3, #44]	; 0x2c
				clicksStep_temp = toneStep_temp;

				/*ramp down*/
				prepareToneStep(&toneStep_temp, &tsInd);
				setVolArrayStep(toneStep_temp, AMInterval, AMVol, AMArraySize, _target_vol, 1);
				toneStep_temp->CycleNum1 = CycleNum1_temp;
    1c22:	f8c3 c036 	str.w	ip, [r3, #54]	; 0x36
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
    1c26:	7218      	strb	r0, [r3, #8]
	ts->LoopNum = arraySize;
    1c28:	601a      	str	r2, [r3, #0]

	ts->ISI.array_Size = arraySize;
    1c2a:	825a      	strh	r2, [r3, #18]
	ts->ISI.arrayPar = (void *)ISIArray;

	ts->vol.array_Size = arraySize;
    1c2c:	861a      	strh	r2, [r3, #48]	; 0x30
	if (0 == reverse) {
		ts->ISI.flag = TONESTEPARRAY;
		ts->vol.flag = TONESTEPARRAY;
	}
	else {
		ts->ISI.flag = TONESTEPARRAYREV;
    1c2e:	7259      	strb	r1, [r3, #9]
		ts->vol.flag = TONESTEPARRAYREV;
    1c30:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
				/*ramp down*/
				prepareToneStep(&toneStep_temp, &tsInd);
				setVolArrayStep(toneStep_temp, AMInterval, AMVol, AMArraySize, _target_vol, 1);
				toneStep_temp->CycleNum1 = CycleNum1_temp;
				toneStep_temp->CycleToneStep1 = clicksStep_temp; //CycleToneStep1 point to interval1 step.
				break;
    1c34:	e68c      	b.n	1950 <SPI_TGMClass::set_tone()+0x248>
				toneStep_temp->fq.fnc = (void_fnc)sweepLinear;
				break;

			case SWEEP_EXP:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;
				sweep_base = exp(log((float)sweep_fq1 / (float)sweep_fq0) / (float)sweepLoopNum_temp);
    1c36:	ed99 7a00 	vldr	s14, [r9]
    1c3a:	edd8 7a00 	vldr	s15, [r8]
				toneStep_temp->fq.flag = TONESTEPFNC;
				toneStep_temp->fq.fnc = (void_fnc)sweepLinear;
				break;

			case SWEEP_EXP:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;
    1c3e:	4a46      	ldr	r2, [pc, #280]	; (1d58 <SPI_TGMClass::set_tone()+0x650>)
				sweep_base = exp(log((float)sweep_fq1 / (float)sweep_fq0) / (float)sweepLoopNum_temp);
    1c40:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    1c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
				toneStep_temp->fq.flag = TONESTEPFNC;
				toneStep_temp->fq.fnc = (void_fnc)sweepLinear;
				break;

			case SWEEP_EXP:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;
    1c48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
				sweep_base = exp(log((float)sweep_fq1 / (float)sweep_fq0) / (float)sweepLoopNum_temp);
    1c4c:	eec7 6a27 	vdiv.f32	s13, s14, s15
				toneStep_temp->fq.flag = TONESTEPFNC;
				toneStep_temp->fq.fnc = (void_fnc)sweepLinear;
				break;

			case SWEEP_EXP:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;
    1c50:	fb03 f305 	mul.w	r3, r3, r5
    1c54:	fba2 3903 	umull	r3, r9, r2, r3
    1c58:	ea4f 1959 	mov.w	r9, r9, lsr #5
				sweep_base = exp(log((float)sweep_fq1 / (float)sweep_fq0) / (float)sweepLoopNum_temp);

				prepareToneStep(&toneStep_temp, &tsInd);
    1c5c:	f10d 0823 	add.w	r8, sp, #35	; 0x23
    1c60:	af09      	add	r7, sp, #36	; 0x24
				toneStep_temp->fq.fnc = (void_fnc)sweepLinear;
				break;

			case SWEEP_EXP:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;
				sweep_base = exp(log((float)sweep_fq1 / (float)sweep_fq0) / (float)sweepLoopNum_temp);
    1c62:	ee16 0a90 	vmov	r0, s13
    1c66:	f004 fdab 	bl	67c0 <__aeabi_f2d>
    1c6a:	ec41 0b10 	vmov	d0, r0, r1
    1c6e:	f002 feeb 	bl	4a48 <log>
    1c72:	ee07 9a90 	vmov	s15, r9
    1c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1c7a:	ed8d 0b00 	vstr	d0, [sp]
    1c7e:	ee17 0a90 	vmov	r0, s15
    1c82:	f004 fd9d 	bl	67c0 <__aeabi_f2d>
    1c86:	ed9d 0b00 	vldr	d0, [sp]
    1c8a:	4602      	mov	r2, r0
    1c8c:	460b      	mov	r3, r1
    1c8e:	ec51 0b10 	vmov	r0, r1, d0
    1c92:	f004 ff13 	bl	6abc <__aeabi_ddiv>
    1c96:	ec41 0b10 	vmov	d0, r0, r1
    1c9a:	f002 fe51 	bl	4940 <exp>
    1c9e:	ec51 0b10 	vmov	r0, r1, d0
    1ca2:	f005 f8d9 	bl	6e58 <__aeabi_d2f>
    1ca6:	4b33      	ldr	r3, [pc, #204]	; (1d74 <SPI_TGMClass::set_tone()+0x66c>)

				prepareToneStep(&toneStep_temp, &tsInd);
    1ca8:	4641      	mov	r1, r8
				toneStep_temp->fq.fnc = (void_fnc)sweepLinear;
				break;

			case SWEEP_EXP:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;
				sweep_base = exp(log((float)sweep_fq1 / (float)sweep_fq0) / (float)sweepLoopNum_temp);
    1caa:	6018      	str	r0, [r3, #0]

				prepareToneStep(&toneStep_temp, &tsInd);
    1cac:	4638      	mov	r0, r7
    1cae:	f7ff fd13 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
				setSweepLoopStep(toneStep_temp);
    1cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
	ts->ISI.drtPar = MININT;
}

void setSweepLoopStep(toneStep * ts) {
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = SWEEP_INTERVAL;
    1cb4:	4829      	ldr	r0, [pc, #164]	; (1d5c <SPI_TGMClass::set_tone()+0x654>)

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
				toneStep_temp->fq.flag = TONESTEPFNC;
				toneStep_temp->fq.fnc = (void_fnc)sweepExp;
    1cb6:	4a30      	ldr	r2, [pc, #192]	; (1d78 <SPI_TGMClass::set_tone()+0x670>)
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;
				sweep_base = exp(log((float)sweep_fq1 / (float)sweep_fq0) / (float)sweepLoopNum_temp);

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
    1cb8:	f8c3 9000 	str.w	r9, [r3]
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = MININT;
}

void setSweepLoopStep(toneStep * ts) {
	ts->ISI.flag = TONESTEPDRT;
    1cbc:	2101      	movs	r1, #1
    1cbe:	7259      	strb	r1, [r3, #9]
				sweep_base = exp(log((float)sweep_fq1 / (float)sweep_fq0) / (float)sweepLoopNum_temp);

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
				toneStep_temp->fq.flag = TONESTEPFNC;
    1cc0:	2104      	movs	r1, #4
	ts->ISI.drtPar = MININT;
}

void setSweepLoopStep(toneStep * ts) {
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = SWEEP_INTERVAL;
    1cc2:	f8c3 000a 	str.w	r0, [r3, #10]
				sweep_base = exp(log((float)sweep_fq1 / (float)sweep_fq0) / (float)sweepLoopNum_temp);

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
				toneStep_temp->fq.flag = TONESTEPFNC;
    1cc6:	7619      	strb	r1, [r3, #24]
				toneStep_temp->fq.fnc = (void_fnc)sweepExp;
    1cc8:	f8c3 2023 	str.w	r2, [r3, #35]	; 0x23
				break;
    1ccc:	e640      	b.n	1950 <SPI_TGMClass::set_tone()+0x248>
				prepareToneStep(&toneStep_temp, &tsInd);
				setDelayStep(toneStep_temp, dur_temp);
				break;
			case SWEEP_LINEAR:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;
				sweep_linear_step = ((float)sweep_fq1 - (float)sweep_fq0) / ((float)sweepLoopNum_temp);
    1cce:	edd9 7a00 	vldr	s15, [r9]
    1cd2:	f8d8 2000 	ldr.w	r2, [r8]
			case SWEEP_OFF:
				prepareToneStep(&toneStep_temp, &tsInd);
				setDelayStep(toneStep_temp, dur_temp);
				break;
			case SWEEP_LINEAR:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;
    1cd6:	4920      	ldr	r1, [pc, #128]	; (1d58 <SPI_TGMClass::set_tone()+0x650>)
				sweep_linear_step = ((float)sweep_fq1 - (float)sweep_fq0) / ((float)sweepLoopNum_temp);
    1cd8:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 1d8c <SPI_TGMClass::set_tone()+0x684>
			case SWEEP_OFF:
				prepareToneStep(&toneStep_temp, &tsInd);
				setDelayStep(toneStep_temp, dur_temp);
				break;
			case SWEEP_LINEAR:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;
    1cdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1ce0:	fb03 f305 	mul.w	r3, r3, r5
    1ce4:	fba1 3903 	umull	r3, r9, r1, r3
				sweep_linear_step = ((float)sweep_fq1 - (float)sweep_fq0) / ((float)sweepLoopNum_temp);
    1ce8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    1cec:	ee07 2a90 	vmov	s15, r2
			case SWEEP_OFF:
				prepareToneStep(&toneStep_temp, &tsInd);
				setDelayStep(toneStep_temp, dur_temp);
				break;
			case SWEEP_LINEAR:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;
    1cf0:	ea4f 1959 	mov.w	r9, r9, lsr #5
				sweep_linear_step = ((float)sweep_fq1 - (float)sweep_fq0) / ((float)sweepLoopNum_temp);
    1cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1cf8:	ee06 9a90 	vmov	s13, r9
    1cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
    1d00:	eef8 6ae6 	vcvt.f32.s32	s13, s13

				prepareToneStep(&toneStep_temp, &tsInd);
    1d04:	f10d 0823 	add.w	r8, sp, #35	; 0x23
				prepareToneStep(&toneStep_temp, &tsInd);
				setDelayStep(toneStep_temp, dur_temp);
				break;
			case SWEEP_LINEAR:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;
				sweep_linear_step = ((float)sweep_fq1 - (float)sweep_fq0) / ((float)sweepLoopNum_temp);
    1d08:	ee87 7aa6 	vdiv.f32	s14, s15, s13

				prepareToneStep(&toneStep_temp, &tsInd);
    1d0c:	af09      	add	r7, sp, #36	; 0x24
    1d0e:	4638      	mov	r0, r7
    1d10:	4641      	mov	r1, r8
				prepareToneStep(&toneStep_temp, &tsInd);
				setDelayStep(toneStep_temp, dur_temp);
				break;
			case SWEEP_LINEAR:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL;
				sweep_linear_step = ((float)sweep_fq1 - (float)sweep_fq0) / ((float)sweepLoopNum_temp);
    1d12:	ed8e 7a00 	vstr	s14, [lr]

				prepareToneStep(&toneStep_temp, &tsInd);
    1d16:	f7ff fcdf 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
				setSweepLoopStep(toneStep_temp);
    1d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	ts->ISI.drtPar = MININT;
}

void setSweepLoopStep(toneStep * ts) {
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = SWEEP_INTERVAL;
    1d1c:	480f      	ldr	r0, [pc, #60]	; (1d5c <SPI_TGMClass::set_tone()+0x654>)

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
				toneStep_temp->fq.flag = TONESTEPFNC;
				toneStep_temp->fq.fnc = (void_fnc)sweepLinear;
    1d1e:	4a17      	ldr	r2, [pc, #92]	; (1d7c <SPI_TGMClass::set_tone()+0x674>)
    1d20:	e7ca      	b.n	1cb8 <SPI_TGMClass::set_tone()+0x5b0>
		toneStep * clicksStep_temp = NULL;

		if (dur_temp != 0) {
			switch (sweep_mode) {
			case SWEEP_OFF:
				prepareToneStep(&toneStep_temp, &tsInd);
    1d22:	f10d 0823 	add.w	r8, sp, #35	; 0x23
    1d26:	af09      	add	r7, sp, #36	; 0x24
    1d28:	4641      	mov	r1, r8
    1d2a:	4638      	mov	r0, r7
    1d2c:	f7ff fcd4 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
				setDelayStep(toneStep_temp, dur_temp);
    1d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
    1d32:	4a13      	ldr	r2, [pc, #76]	; (1d80 <SPI_TGMClass::set_tone()+0x678>)
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    1d34:	601d      	str	r5, [r3, #0]
	ts->ISI.flag = TONESTEPDRT;
    1d36:	2101      	movs	r1, #1
    1d38:	7259      	strb	r1, [r3, #9]
	ts->ISI.drtPar = 1000; // 1000us.
    1d3a:	f8c3 200a 	str.w	r2, [r3, #10]
    1d3e:	e607      	b.n	1950 <SPI_TGMClass::set_tone()+0x248>
    1d40:	41200000 	.word	0x41200000
    1d44:	1fff1b84 	.word	0x1fff1b84
    1d48:	1fff0988 	.word	0x1fff0988
    1d4c:	1fff08d4 	.word	0x1fff08d4
    1d50:	1fff0734 	.word	0x1fff0734
    1d54:	1fff0920 	.word	0x1fff0920
    1d58:	51eb851f 	.word	0x51eb851f
    1d5c:	42c80000 	.word	0x42c80000
    1d60:	00000509 	.word	0x00000509
    1d64:	447a0000 	.word	0x447a0000
    1d68:	1fff0ad0 	.word	0x1fff0ad0
    1d6c:	00000000 	.word	0x00000000
    1d70:	1fff1bbc 	.word	0x1fff1bbc
    1d74:	1fff1b80 	.word	0x1fff1b80
    1d78:	00000531 	.word	0x00000531
    1d7c:	00000499 	.word	0x00000499
    1d80:	447a0000 	.word	0x447a0000
    1d84:	1fff179c 	.word	0x1fff179c
    1d88:	1fff1f3c 	.word	0x1fff1f3c
    1d8c:	1fff1f38 	.word	0x1fff1f38
    1d90:	4291      	cmp	r1, r2
    1d92:	bf38      	it	cc
    1d94:	4611      	movcc	r1, r2

			case SWEEP_CLICKS:
				clicksDur_temp = _tone.clicks_dur;
				clicksPeriod_temp = (_tone.clicks_period > clicksDur_temp) ? _tone.clicks_period : clicksDur_temp;
				normalInterval = clicksPeriod_temp - clicksDur_temp;
				CycleNum1_temp = dur_temp / clicksPeriod_temp;
    1d96:	fbb5 faf1 	udiv	sl, r5, r1
				lastClickInterval_temp = (dur_temp % clicksPeriod_temp > clicksDur_temp) ? (dur_temp % clicksPeriod_temp - clicksDur_temp) : 0;
    1d9a:	fb01 531a 	mls	r3, r1, sl, r5
    1d9e:	429a      	cmp	r2, r3
				break;

			case SWEEP_CLICKS:
				clicksDur_temp = _tone.clicks_dur;
				clicksPeriod_temp = (_tone.clicks_period > clicksDur_temp) ? _tone.clicks_period : clicksDur_temp;
				normalInterval = clicksPeriod_temp - clicksDur_temp;
    1da0:	eba1 0102 	sub.w	r1, r1, r2
				CycleNum1_temp = dur_temp / clicksPeriod_temp;
				lastClickInterval_temp = (dur_temp % clicksPeriod_temp > clicksDur_temp) ? (dur_temp % clicksPeriod_temp - clicksDur_temp) : 0;

				/*clicks duration*/
				prepareToneStep(&toneStep_temp, &tsInd);
    1da4:	f10d 0823 	add.w	r8, sp, #35	; 0x23
    1da8:	af09      	add	r7, sp, #36	; 0x24
			case SWEEP_CLICKS:
				clicksDur_temp = _tone.clicks_dur;
				clicksPeriod_temp = (_tone.clicks_period > clicksDur_temp) ? _tone.clicks_period : clicksDur_temp;
				normalInterval = clicksPeriod_temp - clicksDur_temp;
				CycleNum1_temp = dur_temp / clicksPeriod_temp;
				lastClickInterval_temp = (dur_temp % clicksPeriod_temp > clicksDur_temp) ? (dur_temp % clicksPeriod_temp - clicksDur_temp) : 0;
    1daa:	bf34      	ite	cc
    1dac:	1a9b      	subcc	r3, r3, r2
    1dae:	2300      	movcs	r3, #0
				break;

			case SWEEP_CLICKS:
				clicksDur_temp = _tone.clicks_dur;
				clicksPeriod_temp = (_tone.clicks_period > clicksDur_temp) ? _tone.clicks_period : clicksDur_temp;
				normalInterval = clicksPeriod_temp - clicksDur_temp;
    1db0:	9103      	str	r1, [sp, #12]
				CycleNum1_temp = dur_temp / clicksPeriod_temp;
				lastClickInterval_temp = (dur_temp % clicksPeriod_temp > clicksDur_temp) ? (dur_temp % clicksPeriod_temp - clicksDur_temp) : 0;

				/*clicks duration*/
				prepareToneStep(&toneStep_temp, &tsInd);
    1db2:	4638      	mov	r0, r7
    1db4:	4641      	mov	r1, r8
			case SWEEP_CLICKS:
				clicksDur_temp = _tone.clicks_dur;
				clicksPeriod_temp = (_tone.clicks_period > clicksDur_temp) ? _tone.clicks_period : clicksDur_temp;
				normalInterval = clicksPeriod_temp - clicksDur_temp;
				CycleNum1_temp = dur_temp / clicksPeriod_temp;
				lastClickInterval_temp = (dur_temp % clicksPeriod_temp > clicksDur_temp) ? (dur_temp % clicksPeriod_temp - clicksDur_temp) : 0;
    1db6:	9302      	str	r3, [sp, #8]

				/*clicks duration*/
				prepareToneStep(&toneStep_temp, &tsInd);
    1db8:	f7ff fc8e 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
				setDelayStep(toneStep_temp, _tone.clicks_dur);
    1dbc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    1dc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
    1dc2:	f8c9 3000 	str.w	r3, [r9]
				/*clicks duration*/
				prepareToneStep(&toneStep_temp, &tsInd);
				setDelayStep(toneStep_temp, _tone.clicks_dur);
				clicksStep_temp = toneStep_temp;
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = _target_vol;
    1dc6:	7833      	ldrb	r3, [r6, #0]
}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
    1dc8:	49c2      	ldr	r1, [pc, #776]	; (20d4 <SPI_TGMClass::set_tone()+0x9cc>)
				prepareToneStep(&toneStep_temp, &tsInd);
				setDelayStep(toneStep_temp, _tone.clicks_dur);
				clicksStep_temp = toneStep_temp;
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = _target_vol;
				toneStep_temp->CycleNum1 = CycleNum1_temp;
    1dca:	f8c9 a036 	str.w	sl, [r9, #54]	; 0x36
				/*clicks duration*/
				prepareToneStep(&toneStep_temp, &tsInd);
				setDelayStep(toneStep_temp, _tone.clicks_dur);
				clicksStep_temp = toneStep_temp;
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = _target_vol;
    1dce:	ee07 3a90 	vmov	s15, r3
    1dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
	ts->ISI.flag = TONESTEPDRT;
    1dd6:	2201      	movs	r2, #1
				/*clicks duration*/
				prepareToneStep(&toneStep_temp, &tsInd);
				setDelayStep(toneStep_temp, _tone.clicks_dur);
				clicksStep_temp = toneStep_temp;
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = _target_vol;
    1dd8:	ee17 3a90 	vmov	r3, s15
    1ddc:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
				toneStep_temp->CycleNum1 = CycleNum1_temp;
				toneStep_temp->CycleToneStep1 = (0 != normalInterval) ? &(toneStepArray[tsInd]) : clicksStep_temp; //CycleToneStep1 point to interval1 step.
    1de0:	9b03      	ldr	r3, [sp, #12]
}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
    1de2:	f8c9 100a 	str.w	r1, [r9, #10]

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
	ts->ISI.flag = TONESTEPDRT;
    1de6:	f889 2009 	strb.w	r2, [r9, #9]

				/*clicks duration*/
				prepareToneStep(&toneStep_temp, &tsInd);
				setDelayStep(toneStep_temp, _tone.clicks_dur);
				clicksStep_temp = toneStep_temp;
				toneStep_temp->vol.flag = TONESTEPDRT;
    1dea:	f889 2027 	strb.w	r2, [r9, #39]	; 0x27
				toneStep_temp->vol.drtPar = _target_vol;
				toneStep_temp->CycleNum1 = CycleNum1_temp;
				toneStep_temp->CycleToneStep1 = (0 != normalInterval) ? &(toneStepArray[tsInd]) : clicksStep_temp; //CycleToneStep1 point to interval1 step.
    1dee:	2b00      	cmp	r3, #0
    1df0:	f000 81ec 	beq.w	21cc <SPI_TGMClass::set_tone()+0xac4>
    1df4:	4bb8      	ldr	r3, [pc, #736]	; (20d8 <SPI_TGMClass::set_tone()+0x9d0>)
    1df6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    1dfa:	9300      	str	r3, [sp, #0]
    1dfc:	214a      	movs	r1, #74	; 0x4a
    1dfe:	fb01 3102 	mla	r1, r1, r2, r3
				toneStep_temp->CycleNum2 = 1;
    1e02:	2300      	movs	r3, #0
    1e04:	f889 303f 	strb.w	r3, [r9, #63]	; 0x3f
    1e08:	f889 3040 	strb.w	r3, [r9, #64]	; 0x40
    1e0c:	f889 3041 	strb.w	r3, [r9, #65]	; 0x41
				toneStep_temp->CycleToneStep2 = (0 != lastClickInterval_temp) ? &(toneStepArray[tsInd + 1]) : &(toneStepArray[tsInd + 2]); //CycleToneStep1 point to interval1 step.
    1e10:	9b02      	ldr	r3, [sp, #8]
				setDelayStep(toneStep_temp, _tone.clicks_dur);
				clicksStep_temp = toneStep_temp;
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = _target_vol;
				toneStep_temp->CycleNum1 = CycleNum1_temp;
				toneStep_temp->CycleToneStep1 = (0 != normalInterval) ? &(toneStepArray[tsInd]) : clicksStep_temp; //CycleToneStep1 point to interval1 step.
    1e12:	f8c9 103a 	str.w	r1, [r9, #58]	; 0x3a
				toneStep_temp->CycleNum2 = 1;
    1e16:	2101      	movs	r1, #1
    1e18:	f889 103e 	strb.w	r1, [r9, #62]	; 0x3e
				toneStep_temp->CycleToneStep2 = (0 != lastClickInterval_temp) ? &(toneStepArray[tsInd + 1]) : &(toneStepArray[tsInd + 2]); //CycleToneStep1 point to interval1 step.
    1e1c:	2b00      	cmp	r3, #0
    1e1e:	f000 81cb 	beq.w	21b8 <SPI_TGMClass::set_tone()+0xab0>
    1e22:	1c93      	adds	r3, r2, #2
    1e24:	469e      	mov	lr, r3
    1e26:	9307      	str	r3, [sp, #28]
    1e28:	9800      	ldr	r0, [sp, #0]
    1e2a:	9b00      	ldr	r3, [sp, #0]
    1e2c:	eb02 0a01 	add.w	sl, r2, r1
    1e30:	214a      	movs	r1, #74	; 0x4a
    1e32:	fb01 000a 	mla	r0, r1, sl, r0
    1e36:	fb01 310e 	mla	r1, r1, lr, r3
				toneStep_temp->NextToneStep = &(toneStepArray[tsInd + 2]); //Stop tone when cycle finished.

				/*normalInterval*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    1e3a:	234a      	movs	r3, #74	; 0x4a
    1e3c:	fb03 f202 	mul.w	r2, r3, r2
    1e40:	9204      	str	r2, [sp, #16]
    1e42:	9a00      	ldr	r2, [sp, #0]
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = _target_vol;
				toneStep_temp->CycleNum1 = CycleNum1_temp;
				toneStep_temp->CycleToneStep1 = (0 != normalInterval) ? &(toneStepArray[tsInd]) : clicksStep_temp; //CycleToneStep1 point to interval1 step.
				toneStep_temp->CycleNum2 = 1;
				toneStep_temp->CycleToneStep2 = (0 != lastClickInterval_temp) ? &(toneStepArray[tsInd + 1]) : &(toneStepArray[tsInd + 2]); //CycleToneStep1 point to interval1 step.
    1e44:	f8c9 0042 	str.w	r0, [r9, #66]	; 0x42
				toneStep_temp->NextToneStep = &(toneStepArray[tsInd + 2]); //Stop tone when cycle finished.

				/*normalInterval*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    1e48:	4696      	mov	lr, r2
    1e4a:	9a04      	ldr	r2, [sp, #16]
				toneStep_temp->vol.drtPar = _target_vol;
				toneStep_temp->CycleNum1 = CycleNum1_temp;
				toneStep_temp->CycleToneStep1 = (0 != normalInterval) ? &(toneStepArray[tsInd]) : clicksStep_temp; //CycleToneStep1 point to interval1 step.
				toneStep_temp->CycleNum2 = 1;
				toneStep_temp->CycleToneStep2 = (0 != lastClickInterval_temp) ? &(toneStepArray[tsInd + 1]) : &(toneStepArray[tsInd + 2]); //CycleToneStep1 point to interval1 step.
				toneStep_temp->NextToneStep = &(toneStepArray[tsInd + 2]); //Stop tone when cycle finished.
    1e4c:	f8c9 1046 	str.w	r1, [r9, #70]	; 0x46

				/*normalInterval*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    1e50:	eb0e 0b02 	add.w	fp, lr, r2
    1e54:	4658      	mov	r0, fp
    1e56:	461a      	mov	r2, r3
    1e58:	2100      	movs	r1, #0
    1e5a:	9305      	str	r3, [sp, #20]
    1e5c:	f005 fb46 	bl	74ec <memset>
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
				tsInd++;
				setDelayStep(toneStep_temp, normalInterval);
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
    1e60:	eddf 7a9e 	vldr	s15, [pc, #632]	; 20dc <SPI_TGMClass::set_tone()+0x9d4>
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    1e64:	9b05      	ldr	r3, [sp, #20]
    1e66:	9800      	ldr	r0, [sp, #0]
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
				tsInd++;
				setDelayStep(toneStep_temp, normalInterval);
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.
    1e68:	f8cb 9046 	str.w	r9, [fp, #70]	; 0x46
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
				tsInd++;
				setDelayStep(toneStep_temp, normalInterval);
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
    1e6c:	ee17 ca90 	vmov	ip, s15
}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
    1e70:	eddf 7a9b 	vldr	s15, [pc, #620]	; 20e0 <SPI_TGMClass::set_tone()+0x9d8>
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
				tsInd++;
				setDelayStep(toneStep_temp, normalInterval);
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
    1e74:	f8cb c028 	str.w	ip, [fp, #40]	; 0x28
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    1e78:	fa5f fa8a 	uxtb.w	sl, sl
    1e7c:	fb03 f10a 	mul.w	r1, r3, sl
}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
    1e80:	edcd 7a05 	vstr	s15, [sp, #20]
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    1e84:	eb00 0a01 	add.w	sl, r0, r1
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    1e88:	4686      	mov	lr, r0
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    1e8a:	9106      	str	r1, [sp, #24]
    1e8c:	461a      	mov	r2, r3
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    1e8e:	9904      	ldr	r1, [sp, #16]
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
    1e90:	9b05      	ldr	r3, [sp, #20]
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    1e92:	9803      	ldr	r0, [sp, #12]
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
    1e94:	f8cb 300a 	str.w	r3, [fp, #10]

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
	ts->ISI.flag = TONESTEPDRT;
    1e98:	f04f 0301 	mov.w	r3, #1
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    1e9c:	f84e 0001 	str.w	r0, [lr, r1]
	ts->ISI.flag = TONESTEPDRT;
    1ea0:	f88b 3009 	strb.w	r3, [fp, #9]
				/*normalInterval*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
				tsInd++;
				setDelayStep(toneStep_temp, normalInterval);
				toneStep_temp->vol.flag = TONESTEPDRT;
    1ea4:	f88b 3027 	strb.w	r3, [fp, #39]	; 0x27
				toneStep_temp->vol.drtPar = 0;
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    1ea8:	4661      	mov	r1, ip
    1eaa:	4650      	mov	r0, sl
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
				tsInd++;
				setDelayStep(toneStep_temp, normalInterval);
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
    1eac:	f8cd c00c 	str.w	ip, [sp, #12]
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    1eb0:	f005 fb1c 	bl	74ec <memset>
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    1eb4:	9900      	ldr	r1, [sp, #0]
				tsInd++;
				setDelayStep(toneStep_temp, lastClickInterval_temp);
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
				toneStep_temp->CycleNum1 = 1;
				toneStep_temp->CycleToneStep1 = clicksStep_temp;
    1eb6:	f8ca 903a 	str.w	r9, [sl, #58]	; 0x3a
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    1eba:	468e      	mov	lr, r1
    1ebc:	9906      	ldr	r1, [sp, #24]
				setDelayStep(toneStep_temp, lastClickInterval_temp);
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
				toneStep_temp->CycleNum1 = 1;
				toneStep_temp->CycleToneStep1 = clicksStep_temp;
				toneStep_temp->NextToneStep = clicksStep_temp; //Useless, this will reset at last step.
    1ebe:	f8ca 9046 	str.w	r9, [sl, #70]	; 0x46

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
	ts->ISI.flag = TONESTEPDRT;
    1ec2:	f04f 0301 	mov.w	r3, #1
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    1ec6:	4689      	mov	r9, r1
	ts->ISI.flag = TONESTEPDRT;
    1ec8:	f88a 3009 	strb.w	r3, [sl, #9]
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    1ecc:	9902      	ldr	r1, [sp, #8]
				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
				tsInd++;
				setDelayStep(toneStep_temp, lastClickInterval_temp);
				toneStep_temp->vol.flag = TONESTEPDRT;
    1ece:	f88a 3027 	strb.w	r3, [sl, #39]	; 0x27
				toneStep_temp->vol.drtPar = 0;
				toneStep_temp->CycleNum1 = 1;
    1ed2:	f04f 0301 	mov.w	r3, #1
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    1ed6:	f84e 1009 	str.w	r1, [lr, r9]
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
    1eda:	487e      	ldr	r0, [pc, #504]	; (20d4 <SPI_TGMClass::set_tone()+0x9cc>)
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
				tsInd++;
    1edc:	f89d 101c 	ldrb.w	r1, [sp, #28]
				setDelayStep(toneStep_temp, lastClickInterval_temp);
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
				toneStep_temp->CycleNum1 = 1;
    1ee0:	f8aa 3036 	strh.w	r3, [sl, #54]	; 0x36
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
				tsInd++;
				setDelayStep(toneStep_temp, lastClickInterval_temp);
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
    1ee4:	f04f 0b00 	mov.w	fp, #0
				toneStep_temp->CycleNum1 = 1;
    1ee8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
				toneStep_temp->vol.drtPar = 0;
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
    1eec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
				tsInd++;
    1ef0:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
    1ef4:	f8ca 000a 	str.w	r0, [sl, #10]
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
				tsInd++;
				setDelayStep(toneStep_temp, lastClickInterval_temp);
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
    1ef8:	f8ca b028 	str.w	fp, [sl, #40]	; 0x28
				toneStep_temp->CycleNum1 = 1;
    1efc:	f8aa 3038 	strh.w	r3, [sl, #56]	; 0x38
				toneStep_temp->CycleToneStep1 = clicksStep_temp;
				toneStep_temp->NextToneStep = clicksStep_temp; //Useless, this will reset at last step.
				break;
    1f00:	e526      	b.n	1950 <SPI_TGMClass::set_tone()+0x248>
			toneStep_temp->vol.drtPar = _target_vol;
		}

		/************step5-9 duration**************/
		uint32_t sweepLoopNum_temp = 0;
		uint32_t clicksDur_temp = _tone.clicks_dur + 4; //ramp up and down cost 4ms.
    1f02:	3204      	adds	r2, #4
    1f04:	4291      	cmp	r1, r2
    1f06:	bf38      	it	cc
    1f08:	4611      	movcc	r1, r2

			case SWEEP_CLICKS_RAMP_2MS:
				clicksDur_temp = _tone.clicks_dur + 4; //ramp up and down cost 4ms.
				clicksPeriod_temp = (_tone.clicks_period > clicksDur_temp) ? _tone.clicks_period : clicksDur_temp;
				normalInterval = clicksPeriod_temp - clicksDur_temp;
				CycleNum1_temp = dur_temp / clicksPeriod_temp;
    1f0a:	fbb5 f3f1 	udiv	r3, r5, r1
    1f0e:	9300      	str	r3, [sp, #0]
				lastClickInterval_temp = (dur_temp % clicksPeriod_temp > clicksDur_temp) ? (dur_temp % clicksPeriod_temp - clicksDur_temp) : 0;
    1f10:	fb01 5313 	mls	r3, r1, r3, r5
    1f14:	429a      	cmp	r2, r3
				break;

			case SWEEP_CLICKS_RAMP_2MS:
				clicksDur_temp = _tone.clicks_dur + 4; //ramp up and down cost 4ms.
				clicksPeriod_temp = (_tone.clicks_period > clicksDur_temp) ? _tone.clicks_period : clicksDur_temp;
				normalInterval = clicksPeriod_temp - clicksDur_temp;
    1f16:	eba1 0102 	sub.w	r1, r1, r2
				CycleNum1_temp = dur_temp / clicksPeriod_temp;
				lastClickInterval_temp = (dur_temp % clicksPeriod_temp > clicksDur_temp) ? (dur_temp % clicksPeriod_temp - clicksDur_temp) : 0;

				/*ramp up*/
				prepareToneStep(&toneStep_temp, &tsInd);
    1f1a:	f10d 0823 	add.w	r8, sp, #35	; 0x23
    1f1e:	af09      	add	r7, sp, #36	; 0x24
			case SWEEP_CLICKS_RAMP_2MS:
				clicksDur_temp = _tone.clicks_dur + 4; //ramp up and down cost 4ms.
				clicksPeriod_temp = (_tone.clicks_period > clicksDur_temp) ? _tone.clicks_period : clicksDur_temp;
				normalInterval = clicksPeriod_temp - clicksDur_temp;
				CycleNum1_temp = dur_temp / clicksPeriod_temp;
				lastClickInterval_temp = (dur_temp % clicksPeriod_temp > clicksDur_temp) ? (dur_temp % clicksPeriod_temp - clicksDur_temp) : 0;
    1f20:	bf34      	ite	cc
    1f22:	1a9b      	subcc	r3, r3, r2
    1f24:	2300      	movcs	r3, #0
				break;

			case SWEEP_CLICKS_RAMP_2MS:
				clicksDur_temp = _tone.clicks_dur + 4; //ramp up and down cost 4ms.
				clicksPeriod_temp = (_tone.clicks_period > clicksDur_temp) ? _tone.clicks_period : clicksDur_temp;
				normalInterval = clicksPeriod_temp - clicksDur_temp;
    1f26:	9103      	str	r1, [sp, #12]
				CycleNum1_temp = dur_temp / clicksPeriod_temp;
				lastClickInterval_temp = (dur_temp % clicksPeriod_temp > clicksDur_temp) ? (dur_temp % clicksPeriod_temp - clicksDur_temp) : 0;

				/*ramp up*/
				prepareToneStep(&toneStep_temp, &tsInd);
    1f28:	4638      	mov	r0, r7
    1f2a:	4641      	mov	r1, r8
			case SWEEP_CLICKS_RAMP_2MS:
				clicksDur_temp = _tone.clicks_dur + 4; //ramp up and down cost 4ms.
				clicksPeriod_temp = (_tone.clicks_period > clicksDur_temp) ? _tone.clicks_period : clicksDur_temp;
				normalInterval = clicksPeriod_temp - clicksDur_temp;
				CycleNum1_temp = dur_temp / clicksPeriod_temp;
				lastClickInterval_temp = (dur_temp % clicksPeriod_temp > clicksDur_temp) ? (dur_temp % clicksPeriod_temp - clicksDur_temp) : 0;
    1f2c:	9302      	str	r3, [sp, #8]

				/*ramp up*/
				prepareToneStep(&toneStep_temp, &tsInd);
    1f2e:	f7ff fbd3 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
				setVolArrayStep(toneStep_temp, rampCosInterval2ms, rampCosVol2ms, sizeof(rampCosVol2ms), _target_vol, 0);
    1f32:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    1f36:	7833      	ldrb	r3, [r6, #0]
void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;

	ts->ISI.array_Size = arraySize;
	ts->ISI.arrayPar = (void *)ISIArray;
    1f38:	4a6a      	ldr	r2, [pc, #424]	; (20e4 <SPI_TGMClass::set_tone()+0x9dc>)
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
    1f3a:	f889 3008 	strb.w	r3, [r9, #8]
	ts->LoopNum = arraySize;
    1f3e:	f04f 0a00 	mov.w	sl, #0
    1f42:	f04f 0b49 	mov.w	fp, #73	; 0x49

	ts->vol.array_Size = arraySize;
	ts->vol.arrayPar = (void *)VolArray;

	if (0 == reverse) {
		ts->ISI.flag = TONESTEPARRAY;
    1f46:	2302      	movs	r3, #2
void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;

	ts->ISI.array_Size = arraySize;
	ts->ISI.arrayPar = (void *)ISIArray;
    1f48:	f8c9 200e 	str.w	r2, [r9, #14]
    1f4c:	9204      	str	r2, [sp, #16]

	ts->vol.array_Size = arraySize;
	ts->vol.arrayPar = (void *)VolArray;
    1f4e:	4a66      	ldr	r2, [pc, #408]	; (20e8 <SPI_TGMClass::set_tone()+0x9e0>)
    1f50:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
				prepareToneStep(&toneStep_temp, &tsInd);
				setVolArrayStep(toneStep_temp, rampCosInterval2ms, rampCosVol2ms, sizeof(rampCosVol2ms), _target_vol, 0);
				clicksStep_temp = toneStep_temp;

				/*clicks duration*/
				prepareToneStep(&toneStep_temp, &tsInd);
    1f54:	4641      	mov	r1, r8
    1f56:	4638      	mov	r0, r7
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;
    1f58:	f889 a001 	strb.w	sl, [r9, #1]
    1f5c:	f889 a002 	strb.w	sl, [r9, #2]
    1f60:	f889 a003 	strb.w	sl, [r9, #3]

	ts->ISI.array_Size = arraySize;
    1f64:	f889 a013 	strb.w	sl, [r9, #19]
	ts->ISI.arrayPar = (void *)ISIArray;

	ts->vol.array_Size = arraySize;
    1f68:	f889 a031 	strb.w	sl, [r9, #49]	; 0x31
	ts->vol.arrayPar = (void *)VolArray;

	if (0 == reverse) {
		ts->ISI.flag = TONESTEPARRAY;
    1f6c:	f889 3009 	strb.w	r3, [r9, #9]
		ts->vol.flag = TONESTEPARRAY;
    1f70:	f889 3027 	strb.w	r3, [r9, #39]	; 0x27
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;
    1f74:	f889 b000 	strb.w	fp, [r9]

	ts->ISI.array_Size = arraySize;
    1f78:	f889 b012 	strb.w	fp, [r9, #18]
	ts->ISI.arrayPar = (void *)ISIArray;

	ts->vol.array_Size = arraySize;
    1f7c:	f889 b030 	strb.w	fp, [r9, #48]	; 0x30
				prepareToneStep(&toneStep_temp, &tsInd);
				setVolArrayStep(toneStep_temp, rampCosInterval2ms, rampCosVol2ms, sizeof(rampCosVol2ms), _target_vol, 0);
				clicksStep_temp = toneStep_temp;

				/*clicks duration*/
				prepareToneStep(&toneStep_temp, &tsInd);
    1f80:	f7ff fbaa 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
				setDelayStep(toneStep_temp, _tone.clicks_dur);
    1f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    1f86:	6da1      	ldr	r1, [r4, #88]	; 0x58
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
    1f88:	f8df e148 	ldr.w	lr, [pc, #328]	; 20d4 <SPI_TGMClass::set_tone()+0x9cc>
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    1f8c:	6019      	str	r1, [r3, #0]
	ts->ISI.flag = TONESTEPDRT;
    1f8e:	f04f 0c01 	mov.w	ip, #1
				/*clicks duration*/
				prepareToneStep(&toneStep_temp, &tsInd);
				setDelayStep(toneStep_temp, _tone.clicks_dur);

				/*ramp down*/
				prepareToneStep(&toneStep_temp, &tsInd);
    1f92:	4641      	mov	r1, r8
    1f94:	4638      	mov	r0, r7

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
	ts->ISI.flag = TONESTEPDRT;
    1f96:	f883 c009 	strb.w	ip, [r3, #9]
	ts->ISI.drtPar = 1000; // 1000us.
    1f9a:	f8c3 e00a 	str.w	lr, [r3, #10]
				/*clicks duration*/
				prepareToneStep(&toneStep_temp, &tsInd);
				setDelayStep(toneStep_temp, _tone.clicks_dur);

				/*ramp down*/
				prepareToneStep(&toneStep_temp, &tsInd);
    1f9e:	f7ff fb9b 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
				setVolArrayStep(toneStep_temp, rampCosInterval2ms, rampCosVol2ms, sizeof(rampCosVol2ms), _target_vol, 1);
    1fa2:	9909      	ldr	r1, [sp, #36]	; 0x24
void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;

	ts->ISI.array_Size = arraySize;
	ts->ISI.arrayPar = (void *)ISIArray;
    1fa4:	9a04      	ldr	r2, [sp, #16]
    1fa6:	f8c1 200e 	str.w	r2, [r1, #14]
	if (0 == reverse) {
		ts->ISI.flag = TONESTEPARRAY;
		ts->vol.flag = TONESTEPARRAY;
	}
	else {
		ts->ISI.flag = TONESTEPARRAYREV;
    1faa:	2303      	movs	r3, #3

	ts->ISI.array_Size = arraySize;
	ts->ISI.arrayPar = (void *)ISIArray;

	ts->vol.array_Size = arraySize;
	ts->vol.arrayPar = (void *)VolArray;
    1fac:	4a4e      	ldr	r2, [pc, #312]	; (20e8 <SPI_TGMClass::set_tone()+0x9e0>)
	if (0 == reverse) {
		ts->ISI.flag = TONESTEPARRAY;
		ts->vol.flag = TONESTEPARRAY;
	}
	else {
		ts->ISI.flag = TONESTEPARRAYREV;
    1fae:	724b      	strb	r3, [r1, #9]
		ts->vol.flag = TONESTEPARRAYREV;
    1fb0:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27

				/*ramp down*/
				prepareToneStep(&toneStep_temp, &tsInd);
				setVolArrayStep(toneStep_temp, rampCosInterval2ms, rampCosVol2ms, sizeof(rampCosVol2ms), _target_vol, 1);
				toneStep_temp->CycleNum1 = CycleNum1_temp;
				toneStep_temp->CycleToneStep1 = (0 != normalInterval) ? &(toneStepArray[tsInd]) : clicksStep_temp; //CycleToneStep1 point to interval1 step.
    1fb4:	9b03      	ldr	r3, [sp, #12]
				prepareToneStep(&toneStep_temp, &tsInd);
				setDelayStep(toneStep_temp, _tone.clicks_dur);

				/*ramp down*/
				prepareToneStep(&toneStep_temp, &tsInd);
				setVolArrayStep(toneStep_temp, rampCosInterval2ms, rampCosVol2ms, sizeof(rampCosVol2ms), _target_vol, 1);
    1fb6:	7830      	ldrb	r0, [r6, #0]

	ts->ISI.array_Size = arraySize;
	ts->ISI.arrayPar = (void *)ISIArray;

	ts->vol.array_Size = arraySize;
	ts->vol.arrayPar = (void *)VolArray;
    1fb8:	62ca      	str	r2, [r1, #44]	; 0x2c
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;
    1fba:	f881 b000 	strb.w	fp, [r1]
				setDelayStep(toneStep_temp, _tone.clicks_dur);

				/*ramp down*/
				prepareToneStep(&toneStep_temp, &tsInd);
				setVolArrayStep(toneStep_temp, rampCosInterval2ms, rampCosVol2ms, sizeof(rampCosVol2ms), _target_vol, 1);
				toneStep_temp->CycleNum1 = CycleNum1_temp;
    1fbe:	9a00      	ldr	r2, [sp, #0]
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;
    1fc0:	f881 a001 	strb.w	sl, [r1, #1]
    1fc4:	f881 a002 	strb.w	sl, [r1, #2]
    1fc8:	f881 a003 	strb.w	sl, [r1, #3]

	ts->ISI.array_Size = arraySize;
    1fcc:	f881 a013 	strb.w	sl, [r1, #19]
	ts->ISI.arrayPar = (void *)ISIArray;

	ts->vol.array_Size = arraySize;
    1fd0:	f881 a031 	strb.w	sl, [r1, #49]	; 0x31

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
	ts->LoopNum = arraySize;

	ts->ISI.array_Size = arraySize;
    1fd4:	f881 b012 	strb.w	fp, [r1, #18]
	ts->ISI.arrayPar = (void *)ISIArray;

	ts->vol.array_Size = arraySize;
    1fd8:	f881 b030 	strb.w	fp, [r1, #48]	; 0x30
				setDelayStep(toneStep_temp, _tone.clicks_dur);

				/*ramp down*/
				prepareToneStep(&toneStep_temp, &tsInd);
				setVolArrayStep(toneStep_temp, rampCosInterval2ms, rampCosVol2ms, sizeof(rampCosVol2ms), _target_vol, 1);
				toneStep_temp->CycleNum1 = CycleNum1_temp;
    1fdc:	f8c1 2036 	str.w	r2, [r1, #54]	; 0x36
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = SWEEP_INTERVAL;
}

void setVolArrayStep(toneStep * ts, float * ISIArray, byte * VolArray, uint32_t arraySize, byte targetVol, byte reverse) {
	ts->targetVol = targetVol;
    1fe0:	7208      	strb	r0, [r1, #8]

				/*ramp down*/
				prepareToneStep(&toneStep_temp, &tsInd);
				setVolArrayStep(toneStep_temp, rampCosInterval2ms, rampCosVol2ms, sizeof(rampCosVol2ms), _target_vol, 1);
				toneStep_temp->CycleNum1 = CycleNum1_temp;
				toneStep_temp->CycleToneStep1 = (0 != normalInterval) ? &(toneStepArray[tsInd]) : clicksStep_temp; //CycleToneStep1 point to interval1 step.
    1fe2:	f89d a023 	ldrb.w	sl, [sp, #35]	; 0x23
    1fe6:	2b00      	cmp	r3, #0
    1fe8:	f040 8102 	bne.w	21f0 <SPI_TGMClass::set_tone()+0xae8>
    1fec:	4b3a      	ldr	r3, [pc, #232]	; (20d8 <SPI_TGMClass::set_tone()+0x9d0>)
    1fee:	9300      	str	r3, [sp, #0]
    1ff0:	204a      	movs	r0, #74	; 0x4a
    1ff2:	fb00 3c0a 	mla	ip, r0, sl, r3
    1ff6:	464a      	mov	r2, r9
				toneStep_temp->CycleNum2 = 1;
    1ff8:	2300      	movs	r3, #0
    1ffa:	f881 303f 	strb.w	r3, [r1, #63]	; 0x3f
    1ffe:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
    2002:	f881 3041 	strb.w	r3, [r1, #65]	; 0x41
				toneStep_temp->CycleToneStep2 = (0 != lastClickInterval_temp) ? &(toneStepArray[tsInd + 1]) : &(toneStepArray[tsInd + 2]); //CycleToneStep1 point to interval1 step.
    2006:	9b02      	ldr	r3, [sp, #8]

				/*ramp down*/
				prepareToneStep(&toneStep_temp, &tsInd);
				setVolArrayStep(toneStep_temp, rampCosInterval2ms, rampCosVol2ms, sizeof(rampCosVol2ms), _target_vol, 1);
				toneStep_temp->CycleNum1 = CycleNum1_temp;
				toneStep_temp->CycleToneStep1 = (0 != normalInterval) ? &(toneStepArray[tsInd]) : clicksStep_temp; //CycleToneStep1 point to interval1 step.
    2008:	f8c1 203a 	str.w	r2, [r1, #58]	; 0x3a
				toneStep_temp->CycleNum2 = 1;
    200c:	2201      	movs	r2, #1
    200e:	f881 203e 	strb.w	r2, [r1, #62]	; 0x3e
				toneStep_temp->CycleToneStep2 = (0 != lastClickInterval_temp) ? &(toneStepArray[tsInd + 1]) : &(toneStepArray[tsInd + 2]); //CycleToneStep1 point to interval1 step.
    2012:	2b00      	cmp	r3, #0
    2014:	f000 80e0 	beq.w	21d8 <SPI_TGMClass::set_tone()+0xad0>
    2018:	9800      	ldr	r0, [sp, #0]
    201a:	eb0a 0302 	add.w	r3, sl, r2
    201e:	f04f 0b4a 	mov.w	fp, #74	; 0x4a
    2022:	f10a 0202 	add.w	r2, sl, #2
    2026:	9205      	str	r2, [sp, #20]
    2028:	fb0b 0e03 	mla	lr, fp, r3, r0
    202c:	fb0b 0202 	mla	r2, fp, r2, r0
				toneStep_temp->NextToneStep = &(toneStepArray[tsInd + 2]); //Stop tone when cycle finished.

				/*normalInterval*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    2030:	f04f 0b4a 	mov.w	fp, #74	; 0x4a
				prepareToneStep(&toneStep_temp, &tsInd);
				setVolArrayStep(toneStep_temp, rampCosInterval2ms, rampCosVol2ms, sizeof(rampCosVol2ms), _target_vol, 1);
				toneStep_temp->CycleNum1 = CycleNum1_temp;
				toneStep_temp->CycleToneStep1 = (0 != normalInterval) ? &(toneStepArray[tsInd]) : clicksStep_temp; //CycleToneStep1 point to interval1 step.
				toneStep_temp->CycleNum2 = 1;
				toneStep_temp->CycleToneStep2 = (0 != lastClickInterval_temp) ? &(toneStepArray[tsInd + 1]) : &(toneStepArray[tsInd + 2]); //CycleToneStep1 point to interval1 step.
    2034:	f8c1 e042 	str.w	lr, [r1, #66]	; 0x42
				toneStep_temp->NextToneStep = &(toneStepArray[tsInd + 2]); //Stop tone when cycle finished.
    2038:	f8c1 2046 	str.w	r2, [r1, #70]	; 0x46

				/*normalInterval*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    203c:	4660      	mov	r0, ip
    203e:	465a      	mov	r2, fp
    2040:	2100      	movs	r1, #0
    2042:	9304      	str	r3, [sp, #16]
    2044:	f005 fa52 	bl	74ec <memset>
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    2048:	9b04      	ldr	r3, [sp, #16]
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    204a:	9800      	ldr	r0, [sp, #0]
    204c:	9a03      	ldr	r2, [sp, #12]
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
    204e:	4921      	ldr	r1, [pc, #132]	; (20d4 <SPI_TGMClass::set_tone()+0x9cc>)
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    2050:	b2db      	uxtb	r3, r3
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    2052:	fb0b fe0a 	mul.w	lr, fp, sl
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    2056:	fb0b f303 	mul.w	r3, fp, r3
    205a:	9304      	str	r3, [sp, #16]
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    205c:	4684      	mov	ip, r0
    205e:	f840 200e 	str.w	r2, [r0, lr]
    2062:	4486      	add	lr, r0
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    2064:	9804      	ldr	r0, [sp, #16]
}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
    2066:	f8ce 100a 	str.w	r1, [lr, #10]
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    206a:	eb0c 0a00 	add.w	sl, ip, r0
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
				tsInd++;
				setDelayStep(toneStep_temp, normalInterval);
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
    206e:	2300      	movs	r3, #0
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    2070:	465a      	mov	r2, fp

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
	ts->ISI.flag = TONESTEPDRT;
    2072:	f04f 0b01 	mov.w	fp, #1
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    2076:	4619      	mov	r1, r3
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
				tsInd++;
				setDelayStep(toneStep_temp, normalInterval);
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
    2078:	f8ce 3028 	str.w	r3, [lr, #40]	; 0x28
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.
    207c:	f8ce 9046 	str.w	r9, [lr, #70]	; 0x46

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
	ts->ISI.flag = TONESTEPDRT;
    2080:	f88e b009 	strb.w	fp, [lr, #9]
				/*normalInterval*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
				tsInd++;
				setDelayStep(toneStep_temp, normalInterval);
				toneStep_temp->vol.flag = TONESTEPDRT;
    2084:	f88e b027 	strb.w	fp, [lr, #39]	; 0x27
				toneStep_temp->vol.drtPar = 0;
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    2088:	4650      	mov	r0, sl
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
				tsInd++;
				setDelayStep(toneStep_temp, normalInterval);
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
    208a:	9303      	str	r3, [sp, #12]
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
    208c:	f005 fa2e 	bl	74ec <memset>
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    2090:	9b00      	ldr	r3, [sp, #0]
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
    2092:	4810      	ldr	r0, [pc, #64]	; (20d4 <SPI_TGMClass::set_tone()+0x9cc>)
				toneStep_temp->vol.drtPar = 0;
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
    2094:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    2098:	469e      	mov	lr, r3
    209a:	9b04      	ldr	r3, [sp, #16]
	ts->ISI.flag = TONESTEPDRT;
    209c:	f88a b009 	strb.w	fp, [sl, #9]
#endif // DEBUG

}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
    20a0:	469c      	mov	ip, r3
    20a2:	9b02      	ldr	r3, [sp, #8]
    20a4:	f84e 300c 	str.w	r3, [lr, ip]
				toneStep_temp->NextToneStep = clicksStep_temp; //NextToneStep point to ramp up step.

				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
				tsInd++;
    20a8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    20ac:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				setDelayStep(toneStep_temp, lastClickInterval_temp);
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
    20b0:	2100      	movs	r1, #0
				toneStep_temp->CycleNum1 = 1;
    20b2:	9b03      	ldr	r3, [sp, #12]
				/*lastInterval.*/
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
				tsInd++;
				setDelayStep(toneStep_temp, lastClickInterval_temp);
				toneStep_temp->vol.flag = TONESTEPDRT;
    20b4:	f88a b027 	strb.w	fp, [sl, #39]	; 0x27
				toneStep_temp->vol.drtPar = 0;
				toneStep_temp->CycleNum1 = 1;
				toneStep_temp->CycleToneStep1 = clicksStep_temp;
    20b8:	f8ca 903a 	str.w	r9, [sl, #58]	; 0x3a
				toneStep_temp->NextToneStep = clicksStep_temp; //Useless, this will reset at last step.
    20bc:	f8ca 9046 	str.w	r9, [sl, #70]	; 0x46
}

void setDelayStep(toneStep * ts, uint32_t t) {
	ts->LoopNum = t; //delay ms
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = 1000; // 1000us.
    20c0:	f8ca 000a 	str.w	r0, [sl, #10]
				memset(&(toneStepArray[tsInd]), 0, sizeof(toneStep));
				toneStep_temp = &(toneStepArray[tsInd]); //toneStep_temp point to current struct.
				tsInd++;
				setDelayStep(toneStep_temp, lastClickInterval_temp);
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = 0;
    20c4:	f8ca 1028 	str.w	r1, [sl, #40]	; 0x28
				toneStep_temp->CycleNum1 = 1;
    20c8:	f8aa b036 	strh.w	fp, [sl, #54]	; 0x36
    20cc:	f8aa 3038 	strh.w	r3, [sl, #56]	; 0x38
				toneStep_temp->CycleToneStep1 = clicksStep_temp;
				toneStep_temp->NextToneStep = clicksStep_temp; //Useless, this will reset at last step.
				break;
    20d0:	e43e      	b.n	1950 <SPI_TGMClass::set_tone()+0x248>
    20d2:	bf00      	nop
    20d4:	447a0000 	.word	0x447a0000
    20d8:	1fff1bc0 	.word	0x1fff1bc0
    20dc:	00000000 	.word	0x00000000
    20e0:	447a0000 	.word	0x447a0000
    20e4:	1fff0988 	.word	0x1fff0988
    20e8:	1fff08d4 	.word	0x1fff08d4
				toneStep_temp->fq.flag = TONESTEPFNC;
				toneStep_temp->fq.fnc = (void_fnc)chord_fq;
				break;

			case SWEEP_PEAK:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL / 2;
    20ec:	4844      	ldr	r0, [pc, #272]	; (2200 <SPI_TGMClass::set_tone()+0xaf8>)
				sweep_linear_step = ((float)sweep_fq1 - (float)sweep_fq0) / ((float)sweepLoopNum_temp);
    20ee:	edd9 6a00 	vldr	s13, [r9]
    20f2:	ed98 7a00 	vldr	s14, [r8]
				sweep_linear_step2 = ((float)sweep_fq2 - (float)sweep_fq1) / ((float)sweepLoopNum_temp);
    20f6:	edda 7a00 	vldr	s15, [sl]
				toneStep_temp->fq.fnc = (void_fnc)chord_fq;
				break;

			case SWEEP_PEAK:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL / 2;
				sweep_linear_step = ((float)sweep_fq1 - (float)sweep_fq0) / ((float)sweepLoopNum_temp);
    20fa:	4a42      	ldr	r2, [pc, #264]	; (2204 <SPI_TGMClass::set_tone()+0xafc>)
				sweep_linear_step2 = ((float)sweep_fq2 - (float)sweep_fq1) / ((float)sweepLoopNum_temp);
    20fc:	4b42      	ldr	r3, [pc, #264]	; (2208 <SPI_TGMClass::set_tone()+0xb00>)
				toneStep_temp->fq.flag = TONESTEPFNC;
				toneStep_temp->fq.fnc = (void_fnc)chord_fq;
				break;

			case SWEEP_PEAK:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL / 2;
    20fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    2102:	fb01 f105 	mul.w	r1, r1, r5
    2106:	fba0 1901 	umull	r1, r9, r0, r1
    210a:	ea4f 1999 	mov.w	r9, r9, lsr #6
				sweep_linear_step = ((float)sweep_fq1 - (float)sweep_fq0) / ((float)sweepLoopNum_temp);
    210e:	eef8 6a66 	vcvt.f32.u32	s13, s13
    2112:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				sweep_linear_step2 = ((float)sweep_fq2 - (float)sweep_fq1) / ((float)sweepLoopNum_temp);
    2116:	eef8 7a67 	vcvt.f32.u32	s15, s15
				toneStep_temp->fq.fnc = (void_fnc)chord_fq;
				break;

			case SWEEP_PEAK:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL / 2;
				sweep_linear_step = ((float)sweep_fq1 - (float)sweep_fq0) / ((float)sweepLoopNum_temp);
    211a:	ee06 9a10 	vmov	s12, r9
				sweep_linear_step2 = ((float)sweep_fq2 - (float)sweep_fq1) / ((float)sweepLoopNum_temp);
    211e:	ee77 7ae6 	vsub.f32	s15, s15, s13
				toneStep_temp->fq.fnc = (void_fnc)chord_fq;
				break;

			case SWEEP_PEAK:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL / 2;
				sweep_linear_step = ((float)sweep_fq1 - (float)sweep_fq0) / ((float)sweepLoopNum_temp);
    2122:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    2126:	ee36 7ac7 	vsub.f32	s14, s13, s14
				sweep_linear_step2 = ((float)sweep_fq2 - (float)sweep_fq1) / ((float)sweepLoopNum_temp);

				prepareToneStep(&toneStep_temp, &tsInd);
    212a:	f10d 0823 	add.w	r8, sp, #35	; 0x23
				toneStep_temp->fq.fnc = (void_fnc)chord_fq;
				break;

			case SWEEP_PEAK:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL / 2;
				sweep_linear_step = ((float)sweep_fq1 - (float)sweep_fq0) / ((float)sweepLoopNum_temp);
    212e:	eec7 6a06 	vdiv.f32	s13, s14, s12
				sweep_linear_step2 = ((float)sweep_fq2 - (float)sweep_fq1) / ((float)sweepLoopNum_temp);

				prepareToneStep(&toneStep_temp, &tsInd);
    2132:	af09      	add	r7, sp, #36	; 0x24
    2134:	4641      	mov	r1, r8
    2136:	4638      	mov	r0, r7
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = MININT;
}

void setSweepLoopStep(toneStep * ts) {
	ts->ISI.flag = TONESTEPDRT;
    2138:	f04f 0a01 	mov.w	sl, #1
				sweep_linear_step2 = ((float)sweep_fq2 - (float)sweep_fq1) / ((float)sweepLoopNum_temp);

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
				toneStep_temp->fq.flag = TONESTEPFNC;
    213c:	f04f 0b04 	mov.w	fp, #4
				break;

			case SWEEP_PEAK:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL / 2;
				sweep_linear_step = ((float)sweep_fq1 - (float)sweep_fq0) / ((float)sweepLoopNum_temp);
				sweep_linear_step2 = ((float)sweep_fq2 - (float)sweep_fq1) / ((float)sweepLoopNum_temp);
    2140:	ee87 7a86 	vdiv.f32	s14, s15, s12
				toneStep_temp->fq.fnc = (void_fnc)chord_fq;
				break;

			case SWEEP_PEAK:
				sweepLoopNum_temp = dur_temp * 1000 / SWEEP_INTERVAL / 2;
				sweep_linear_step = ((float)sweep_fq1 - (float)sweep_fq0) / ((float)sweepLoopNum_temp);
    2144:	edc2 6a00 	vstr	s13, [r2]
				sweep_linear_step2 = ((float)sweep_fq2 - (float)sweep_fq1) / ((float)sweepLoopNum_temp);
    2148:	ed83 7a00 	vstr	s14, [r3]

				prepareToneStep(&toneStep_temp, &tsInd);
    214c:	f7ff fac4 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
				setSweepLoopStep(toneStep_temp);
    2150:	9b09      	ldr	r3, [sp, #36]	; 0x24
				toneStep_temp->LoopNum = sweepLoopNum_temp;
				toneStep_temp->fq.flag = TONESTEPFNC;
				toneStep_temp->fq.fnc = (void_fnc)sweepLinear;
    2152:	4a2e      	ldr	r2, [pc, #184]	; (220c <SPI_TGMClass::set_tone()+0xb04>)
	ts->ISI.drtPar = MININT;
}

void setSweepLoopStep(toneStep * ts) {
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = SWEEP_INTERVAL;
    2154:	492e      	ldr	r1, [pc, #184]	; (2210 <SPI_TGMClass::set_tone()+0xb08>)
    2156:	f8c3 100a 	str.w	r1, [r3, #10]

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
				toneStep_temp->fq.flag = TONESTEPFNC;
				toneStep_temp->fq.fnc = (void_fnc)sweepLinear;
    215a:	f8c3 2023 	str.w	r2, [r3, #35]	; 0x23
				sweep_linear_step = ((float)sweep_fq1 - (float)sweep_fq0) / ((float)sweepLoopNum_temp);
				sweep_linear_step2 = ((float)sweep_fq2 - (float)sweep_fq1) / ((float)sweepLoopNum_temp);

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
    215e:	f8c3 9000 	str.w	r9, [r3]
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = MININT;
}

void setSweepLoopStep(toneStep * ts) {
	ts->ISI.flag = TONESTEPDRT;
    2162:	f883 a009 	strb.w	sl, [r3, #9]
				sweep_linear_step2 = ((float)sweep_fq2 - (float)sweep_fq1) / ((float)sweepLoopNum_temp);

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
				toneStep_temp->fq.flag = TONESTEPFNC;
    2166:	f883 b018 	strb.w	fp, [r3, #24]
				toneStep_temp->fq.fnc = (void_fnc)sweepLinear;

				prepareToneStep(&toneStep_temp, &tsInd);
    216a:	4641      	mov	r1, r8
    216c:	4638      	mov	r0, r7
    216e:	f7ff fab3 	bl	16d8 <prepareToneStep(toneStep**, unsigned char*)>
				setSweepLoopStep(toneStep_temp);
    2172:	9b09      	ldr	r3, [sp, #36]	; 0x24
	ts->ISI.drtPar = MININT;
}

void setSweepLoopStep(toneStep * ts) {
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = SWEEP_INTERVAL;
    2174:	4926      	ldr	r1, [pc, #152]	; (2210 <SPI_TGMClass::set_tone()+0xb08>)

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
				toneStep_temp->fq.flag = TONESTEPFNC;
				toneStep_temp->fq.fnc = (void_fnc)sweepLinear2;
    2176:	4a27      	ldr	r2, [pc, #156]	; (2214 <SPI_TGMClass::set_tone()+0xb0c>)
				toneStep_temp->fq.flag = TONESTEPFNC;
				toneStep_temp->fq.fnc = (void_fnc)sweepLinear;

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
    2178:	f8c3 9000 	str.w	r9, [r3]
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = MININT;
}

void setSweepLoopStep(toneStep * ts) {
	ts->ISI.flag = TONESTEPDRT;
    217c:	f883 a009 	strb.w	sl, [r3, #9]
				toneStep_temp->fq.fnc = (void_fnc)sweepLinear;

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
				toneStep_temp->fq.flag = TONESTEPFNC;
    2180:	f883 b018 	strb.w	fp, [r3, #24]
	ts->ISI.drtPar = MININT;
}

void setSweepLoopStep(toneStep * ts) {
	ts->ISI.flag = TONESTEPDRT;
	ts->ISI.drtPar = SWEEP_INTERVAL;
    2184:	f8c3 100a 	str.w	r1, [r3, #10]

				prepareToneStep(&toneStep_temp, &tsInd);
				setSweepLoopStep(toneStep_temp);
				toneStep_temp->LoopNum = sweepLoopNum_temp;
				toneStep_temp->fq.flag = TONESTEPFNC;
				toneStep_temp->fq.fnc = (void_fnc)sweepLinear2;
    2188:	f8c3 2023 	str.w	r2, [r3, #35]	; 0x23
				break;
    218c:	f7ff bbe0 	b.w	1950 <SPI_TGMClass::set_tone()+0x248>
				toneStep_temp->CycleToneStep1 = clicksStep_temp; //CycleToneStep1 point to interval1 step.
				break;
			}
		}
		/************step10 ramp down**************/
		switch (_tone.step_down_flag) {
    2190:	7a63      	ldrb	r3, [r4, #9]
    2192:	3b01      	subs	r3, #1
    2194:	f10d 0823 	add.w	r8, sp, #35	; 0x23
    2198:	af09      	add	r7, sp, #36	; 0x24
    219a:	2b03      	cmp	r3, #3
    219c:	f63f ac6f 	bhi.w	1a7e <SPI_TGMClass::set_tone()+0x376>
    21a0:	a201      	add	r2, pc, #4	; (adr r2, 21a8 <SPI_TGMClass::set_tone()+0xaa0>)
    21a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    21a6:	bf00      	nop
    21a8:	00001ae7 	.word	0x00001ae7
    21ac:	00001ad3 	.word	0x00001ad3
    21b0:	00001ab5 	.word	0x00001ab5
    21b4:	00001a3f 	.word	0x00001a3f
				toneStep_temp->vol.flag = TONESTEPDRT;
				toneStep_temp->vol.drtPar = _target_vol;
				toneStep_temp->CycleNum1 = CycleNum1_temp;
				toneStep_temp->CycleToneStep1 = (0 != normalInterval) ? &(toneStepArray[tsInd]) : clicksStep_temp; //CycleToneStep1 point to interval1 step.
				toneStep_temp->CycleNum2 = 1;
				toneStep_temp->CycleToneStep2 = (0 != lastClickInterval_temp) ? &(toneStepArray[tsInd + 1]) : &(toneStepArray[tsInd + 2]); //CycleToneStep1 point to interval1 step.
    21b8:	9900      	ldr	r1, [sp, #0]
    21ba:	1c93      	adds	r3, r2, #2
    21bc:	204a      	movs	r0, #74	; 0x4a
    21be:	fb00 1003 	mla	r0, r0, r3, r1
    21c2:	9307      	str	r3, [sp, #28]
    21c4:	4601      	mov	r1, r0
    21c6:	f102 0a01 	add.w	sl, r2, #1
    21ca:	e636      	b.n	1e3a <SPI_TGMClass::set_tone()+0x732>
    21cc:	4b12      	ldr	r3, [pc, #72]	; (2218 <SPI_TGMClass::set_tone()+0xb10>)
    21ce:	9300      	str	r3, [sp, #0]
    21d0:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    21d4:	4649      	mov	r1, r9
    21d6:	e614      	b.n	1e02 <SPI_TGMClass::set_tone()+0x6fa>
				prepareToneStep(&toneStep_temp, &tsInd);
				setVolArrayStep(toneStep_temp, rampCosInterval2ms, rampCosVol2ms, sizeof(rampCosVol2ms), _target_vol, 1);
				toneStep_temp->CycleNum1 = CycleNum1_temp;
				toneStep_temp->CycleToneStep1 = (0 != normalInterval) ? &(toneStepArray[tsInd]) : clicksStep_temp; //CycleToneStep1 point to interval1 step.
				toneStep_temp->CycleNum2 = 1;
				toneStep_temp->CycleToneStep2 = (0 != lastClickInterval_temp) ? &(toneStepArray[tsInd + 1]) : &(toneStepArray[tsInd + 2]); //CycleToneStep1 point to interval1 step.
    21d8:	9a00      	ldr	r2, [sp, #0]
    21da:	f10a 0302 	add.w	r3, sl, #2
    21de:	f04f 0e4a 	mov.w	lr, #74	; 0x4a
    21e2:	fb0e 2e03 	mla	lr, lr, r3, r2
    21e6:	9305      	str	r3, [sp, #20]
    21e8:	4672      	mov	r2, lr
    21ea:	f10a 0301 	add.w	r3, sl, #1
    21ee:	e71f      	b.n	2030 <SPI_TGMClass::set_tone()+0x928>

				/*ramp down*/
				prepareToneStep(&toneStep_temp, &tsInd);
				setVolArrayStep(toneStep_temp, rampCosInterval2ms, rampCosVol2ms, sizeof(rampCosVol2ms), _target_vol, 1);
				toneStep_temp->CycleNum1 = CycleNum1_temp;
				toneStep_temp->CycleToneStep1 = (0 != normalInterval) ? &(toneStepArray[tsInd]) : clicksStep_temp; //CycleToneStep1 point to interval1 step.
    21f0:	4b09      	ldr	r3, [pc, #36]	; (2218 <SPI_TGMClass::set_tone()+0xb10>)
    21f2:	9300      	str	r3, [sp, #0]
    21f4:	224a      	movs	r2, #74	; 0x4a
    21f6:	fb02 320a 	mla	r2, r2, sl, r3
    21fa:	4694      	mov	ip, r2
    21fc:	e6fc      	b.n	1ff8 <SPI_TGMClass::set_tone()+0x8f0>
    21fe:	bf00      	nop
    2200:	51eb851f 	.word	0x51eb851f
    2204:	1fff1f38 	.word	0x1fff1f38
    2208:	1fff1794 	.word	0x1fff1794
    220c:	00000499 	.word	0x00000499
    2210:	42c80000 	.word	0x42c80000
    2214:	000004d1 	.word	0x000004d1
    2218:	1fff1bc0 	.word	0x1fff1bc0

0000221c <_GLOBAL__sub_I_temp_error_string>:
#endif // DEBUG
		timer1.begin(timer1Func, MININT);
	}
}

SPI_TGMClass SPI_TGM;
    221c:	b430      	push	{r4, r5}
class IntervalTimer {
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (F_BUS / 1000000.0);
public:
	IntervalTimer() {
		channel = NULL;
    221e:	4b05      	ldr	r3, [pc, #20]	; (2234 <_GLOBAL__sub_I_temp_error_string+0x18>)
typedef byte(*byte_fnc)();
typedef uint16_t(*uint16_fnc)();
typedef float(*float_fnc)();
typedef uint32_t(*uint32_fnc)();
typedef void(*void_fnc)();
IntervalTimer timer1;
    2220:	4a05      	ldr	r2, [pc, #20]	; (2238 <_GLOBAL__sub_I_temp_error_string+0x1c>)
    2222:	4906      	ldr	r1, [pc, #24]	; (223c <_GLOBAL__sub_I_temp_error_string+0x20>)
		nvic_priority = 128;
    2224:	2480      	movs	r4, #128	; 0x80
class IntervalTimer {
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (F_BUS / 1000000.0);
public:
	IntervalTimer() {
		channel = NULL;
    2226:	2500      	movs	r5, #0
		nvic_priority = 128;
    2228:	711c      	strb	r4, [r3, #4]
class IntervalTimer {
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (F_BUS / 1000000.0);
public:
	IntervalTimer() {
		channel = NULL;
    222a:	601d      	str	r5, [r3, #0]
    222c:	4618      	mov	r0, r3
#endif // DEBUG
		timer1.begin(timer1Func, MININT);
	}
}

SPI_TGMClass SPI_TGM;
    222e:	bc30      	pop	{r4, r5}
typedef byte(*byte_fnc)();
typedef uint16_t(*uint16_fnc)();
typedef float(*float_fnc)();
typedef uint32_t(*uint32_fnc)();
typedef void(*void_fnc)();
IntervalTimer timer1;
    2230:	f004 be62 	b.w	6ef8 <__aeabi_atexit>
    2234:	1fff1a9c 	.word	0x1fff1a9c
    2238:	1fff0730 	.word	0x1fff0730
    223c:	00000585 	.word	0x00000585

00002240 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    2240:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2242:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2244:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2246:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2248:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    224a:	d003      	beq.n	2254 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    224c:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2250:	f001 bd40 	b.w	3cd4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2254:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    2256:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    225a:	4718      	bx	r3

0000225c <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    225c:	b4f0      	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    225e:	4b46      	ldr	r3, [pc, #280]	; (2378 <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    2260:	4a46      	ldr	r2, [pc, #280]	; (237c <_spi_dma_rxISR0()+0x120>)
    2262:	6b98      	ldr	r0, [r3, #56]	; 0x38
    2264:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    2266:	7901      	ldrb	r1, [r0, #4]
    2268:	7011      	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    226a:	4945      	ldr	r1, [pc, #276]	; (2380 <_spi_dma_rxISR0()+0x124>)
    226c:	7922      	ldrb	r2, [r4, #4]
    226e:	700a      	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    2270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2272:	7900      	ldrb	r0, [r0, #4]
    2274:	7008      	strb	r0, [r1, #0]
    2276:	2a00      	cmp	r2, #0
    2278:	d046      	beq.n	2308 <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    227a:	6859      	ldr	r1, [r3, #4]
    227c:	68c9      	ldr	r1, [r1, #12]
    227e:	428a      	cmp	r2, r1
    2280:	d83e      	bhi.n	2300 <_spi_dma_rxISR0()+0xa4>
    2282:	6821      	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2284:	8bcc      	ldrh	r4, [r1, #30]
    2286:	0424      	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    2288:	f102 30ff 	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    228c:	d465      	bmi.n	235a <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    228e:	f3c0 000e 	ubfx	r0, r0, #0, #15
    2292:	83c8      	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    2294:	8bc8      	ldrh	r0, [r1, #30]
    2296:	b280      	uxth	r0, r0
    2298:	82c8      	strh	r0, [r1, #22]
    229a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    229c:	6809      	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    229e:	8bc8      	ldrh	r0, [r1, #30]
    22a0:	0400      	lsls	r0, r0, #16
    22a2:	d452      	bmi.n	234a <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    22a4:	f3c2 000e 	ubfx	r0, r2, #0, #15
    22a8:	83c8      	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    22aa:	8bc8      	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    22ac:	2400      	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    22ae:	b280      	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    22b0:	f112 32ff 	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    22b4:	82c8      	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    22b6:	bf18      	it	ne
    22b8:	2201      	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    22ba:	631c      	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    22bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
    22be:	482e      	ldr	r0, [pc, #184]	; (2378 <_spi_dma_rxISR0()+0x11c>)
    22c0:	6809      	ldr	r1, [r1, #0]
    22c2:	680d      	ldr	r5, [r1, #0]
    22c4:	f100 042c 	add.w	r4, r0, #44	; 0x2c
    22c8:	42a5      	cmp	r5, r4
    22ca:	d036      	beq.n	233a <_spi_dma_rxISR0()+0xde>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    22cc:	6800      	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    22ce:	68c4      	ldr	r4, [r0, #12]
    22d0:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    22d4:	680c      	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    22d6:	680d      	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    22d8:	bf15      	itete	ne
    22da:	8824      	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    22dc:	7824      	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    22de:	3502      	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    22e0:	3501      	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    22e2:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    22e6:	600d      	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    22e8:	6344      	str	r4, [r0, #52]	; 0x34
    22ea:	6b99      	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    22ec:	4b25      	ldr	r3, [pc, #148]	; (2384 <_spi_dma_rxISR0()+0x128>)
    22ee:	7909      	ldrb	r1, [r1, #4]
    22f0:	7019      	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    22f2:	4921      	ldr	r1, [pc, #132]	; (2378 <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    22f4:	b112      	cbz	r2, 22fc <_spi_dma_rxISR0()+0xa0>
    22f6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    22f8:	7912      	ldrb	r2, [r2, #4]
    22fa:	701a      	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    22fc:	bcf0      	pop	{r4, r5, r6, r7}
    22fe:	4770      	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    2300:	1a52      	subs	r2, r2, r1
    2302:	631a      	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    2304:	2201      	movs	r2, #1
    2306:	e7d9      	b.n	22bc <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2308:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    230a:	6819      	ldr	r1, [r3, #0]
    230c:	6805      	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    230e:	4c1e      	ldr	r4, [pc, #120]	; (2388 <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    2310:	630a      	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    2312:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    2314:	68cc      	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2316:	682d      	ldr	r5, [r5, #0]
    2318:	4e1c      	ldr	r6, [pc, #112]	; (238c <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    231a:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    231e:	2703      	movs	r7, #3
    2320:	42b5      	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    2322:	60cc      	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2324:	f883 702d 	strb.w	r7, [r3, #45]	; 0x2d
    2328:	d11f      	bne.n	236a <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    232a:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    232c:	6042      	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    232e:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2330:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2332:	d01e      	beq.n	2372 <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2334:	bcf0      	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2336:	f001 bccd 	b.w	3cd4 <EventResponder::triggerEventNotImmediate()>
    233a:	6801      	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    233c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    2340:	68cc      	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    2342:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    2346:	6348      	str	r0, [r1, #52]	; 0x34
    2348:	e7cf      	b.n	22ea <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    234a:	8bcc      	ldrh	r4, [r1, #30]
    234c:	f3c2 0008 	ubfx	r0, r2, #0, #9
    2350:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    2354:	4320      	orrs	r0, r4
    2356:	83c8      	strh	r0, [r1, #30]
    2358:	e7a7      	b.n	22aa <_spi_dma_rxISR0()+0x4e>
    235a:	8bcc      	ldrh	r4, [r1, #30]
    235c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    2360:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    2364:	4320      	orrs	r0, r4
    2366:	83c8      	strh	r0, [r1, #30]
    2368:	e794      	b.n	2294 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    236a:	462b      	mov	r3, r5
    236c:	4611      	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    236e:	bcf0      	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2370:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2372:	6883      	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2374:	bcf0      	pop	{r4, r5, r6, r7}
    2376:	4718      	bx	r3
    2378:	1fff0dd0 	.word	0x1fff0dd0
    237c:	4000801f 	.word	0x4000801f
    2380:	4000801c 	.word	0x4000801c
    2384:	4000801b 	.word	0x4000801b
    2388:	ff0f0000 	.word	0xff0f0000
    238c:	00002241 	.word	0x00002241

00002390 <SPIClass::begin()>:
    2390:	e890 000c 	ldmia.w	r0, {r2, r3}
SPIClass SPI2((uintptr_t)&KINETISK_SPI2, (uintptr_t)&SPIClass::spi2_hardware);
#endif


void SPIClass::begin()
{
    2394:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    2396:	681c      	ldr	r4, [r3, #0]
    2398:	6859      	ldr	r1, [r3, #4]
    239a:	6825      	ldr	r5, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    239c:	4f16      	ldr	r7, [pc, #88]	; (23f8 <SPIClass::begin()+0x68>)
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    239e:	4e17      	ldr	r6, [pc, #92]	; (23fc <SPIClass::begin()+0x6c>)

void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    23a0:	4329      	orrs	r1, r5
    23a2:	6021      	str	r1, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    23a4:	4d16      	ldr	r5, [pc, #88]	; (2400 <SPIClass::begin()+0x70>)
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    23a6:	4917      	ldr	r1, [pc, #92]	; (2404 <SPIClass::begin()+0x74>)
void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    23a8:	6017      	str	r7, [r2, #0]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    23aa:	60d6      	str	r6, [r2, #12]
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    23ac:	6115      	str	r5, [r2, #16]
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    23ae:	6011      	str	r1, [r2, #0]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    23b0:	7a41      	ldrb	r1, [r0, #9]
    23b2:	4a15      	ldr	r2, [pc, #84]	; (2408 <SPIClass::begin()+0x78>)
    23b4:	185c      	adds	r4, r3, r1
	*reg = hardware().mosi_mux[mosi_pin_index];
    23b6:	310c      	adds	r1, #12
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    23b8:	f894 402c 	ldrb.w	r4, [r4, #44]	; 0x2c
	*reg = hardware().mosi_mux[mosi_pin_index];
    23bc:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    23c0:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    23c4:	6849      	ldr	r1, [r1, #4]
	*reg = hardware().mosi_mux[mosi_pin_index];
    23c6:	600d      	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    23c8:	7a01      	ldrb	r1, [r0, #8]
    23ca:	185c      	adds	r4, r3, r1
	*reg= hardware().miso_mux[miso_pin_index];
    23cc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    23d0:	7e24      	ldrb	r4, [r4, #24]
	*reg= hardware().miso_mux[miso_pin_index];
    23d2:	69cd      	ldr	r5, [r1, #28]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    23d4:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    23d8:	6849      	ldr	r1, [r1, #4]
	*reg= hardware().miso_mux[miso_pin_index];
    23da:	600d      	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    23dc:	7a81      	ldrb	r1, [r0, #10]
    23de:	1858      	adds	r0, r3, r1
	*reg = hardware().sck_mux[sck_pin_index];
    23e0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    23e4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
	*reg = hardware().sck_mux[sck_pin_index];
    23e8:	6c59      	ldr	r1, [r3, #68]	; 0x44
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    23ea:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
	*reg = hardware().sck_mux[sck_pin_index];
}
    23ee:	bcf0      	pop	{r4, r5, r6, r7}
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    23f0:	6853      	ldr	r3, [r2, #4]
	*reg = hardware().sck_mux[sck_pin_index];
    23f2:	6019      	str	r1, [r3, #0]
}
    23f4:	4770      	bx	lr
    23f6:	bf00      	nop
    23f8:	001f4001 	.word	0x001f4001
    23fc:	38001001 	.word	0x38001001
    2400:	78001001 	.word	0x78001001
    2404:	801f0000 	.word	0x801f0000
    2408:	00007a50 	.word	0x00007a50

0000240c <CACHE_Class::init(int)>:
#define RDMR 0x05 //Read Mode Register
#define WRMR 0x01 //Write Mode Register


void CACHE_Class::init(int board_type){
	switch(board_type){
    240c:	2901      	cmp	r1, #1
#define RSTIO 0xFF //Reset Dual and Quad I/O access
#define RDMR 0x05 //Read Mode Register
#define WRMR 0x01 //Write Mode Register


void CACHE_Class::init(int board_type){
    240e:	b510      	push	{r4, lr}
    2410:	4604      	mov	r4, r0
	switch(board_type){
    2412:	d076      	beq.n	2502 <CACHE_Class::init(int)+0xf6>
    2414:	2902      	cmp	r1, #2
    2416:	d107      	bne.n	2428 <CACHE_Class::init(int)+0x1c>
		SCK=Mega2560_SCK;
		MO=Mega2560_MO;
		MI=Mega2560_MI;
		break;
	case MEGA328:
		CS=Mega328_CS;
    2418:	200a      	movs	r0, #10
		SCK=Mega328_SCK;
    241a:	210d      	movs	r1, #13
		MO=Mega328_MO;
    241c:	220b      	movs	r2, #11
		MI=Mega328_MI;
    241e:	230c      	movs	r3, #12
		SCK=Mega2560_SCK;
		MO=Mega2560_MO;
		MI=Mega2560_MI;
		break;
	case MEGA328:
		CS=Mega328_CS;
    2420:	6120      	str	r0, [r4, #16]
		SCK=Mega328_SCK;
    2422:	6161      	str	r1, [r4, #20]
		MO=Mega328_MO;
    2424:	61a2      	str	r2, [r4, #24]
		MI=Mega328_MI;
    2426:	61e3      	str	r3, [r4, #28]
		break;
	default:break;
	}
	pinMode(REQ, INPUT);digitalWrite(REQ, LOW);
    2428:	7820      	ldrb	r0, [r4, #0]
    242a:	2100      	movs	r1, #0
    242c:	f000 fc3e 	bl	2cac <pinMode>
    2430:	7820      	ldrb	r0, [r4, #0]
    2432:	2100      	movs	r1, #0
    2434:	f000 fc26 	bl	2c84 <digitalWrite>
	pinMode(WR, INPUT);digitalWrite(WR, LOW);
    2438:	7920      	ldrb	r0, [r4, #4]
    243a:	2100      	movs	r1, #0
    243c:	f000 fc36 	bl	2cac <pinMode>
    2440:	7920      	ldrb	r0, [r4, #4]
    2442:	2100      	movs	r1, #0
    2444:	f000 fc1e 	bl	2c84 <digitalWrite>
	pinMode(PER, INPUT);digitalWrite(PER, LOW);
    2448:	7a20      	ldrb	r0, [r4, #8]
    244a:	2100      	movs	r1, #0
    244c:	f000 fc2e 	bl	2cac <pinMode>
    2450:	7a20      	ldrb	r0, [r4, #8]
    2452:	2100      	movs	r1, #0
    2454:	f000 fc16 	bl	2c84 <digitalWrite>
	pinMode(INFO, INPUT);digitalWrite(INFO, LOW);
    2458:	7b20      	ldrb	r0, [r4, #12]
    245a:	2100      	movs	r1, #0
    245c:	f000 fc26 	bl	2cac <pinMode>
    2460:	7b20      	ldrb	r0, [r4, #12]
    2462:	2100      	movs	r1, #0
    2464:	f000 fc0e 	bl	2c84 <digitalWrite>
	pinMode(CS, INPUT);digitalWrite(CS, LOW);
    2468:	7c20      	ldrb	r0, [r4, #16]
    246a:	2100      	movs	r1, #0
    246c:	f000 fc1e 	bl	2cac <pinMode>
    2470:	7c20      	ldrb	r0, [r4, #16]
    2472:	2100      	movs	r1, #0
    2474:	f000 fc06 	bl	2c84 <digitalWrite>
	pinMode(SCK, INPUT);digitalWrite(SCK, LOW);
    2478:	7d20      	ldrb	r0, [r4, #20]
    247a:	2100      	movs	r1, #0
    247c:	f000 fc16 	bl	2cac <pinMode>
    2480:	7d20      	ldrb	r0, [r4, #20]
    2482:	2100      	movs	r1, #0
    2484:	f000 fbfe 	bl	2c84 <digitalWrite>
	pinMode(MO, INPUT);digitalWrite(MO, LOW);
    2488:	7e20      	ldrb	r0, [r4, #24]
    248a:	2100      	movs	r1, #0
    248c:	f000 fc0e 	bl	2cac <pinMode>
    2490:	7e20      	ldrb	r0, [r4, #24]
    2492:	2100      	movs	r1, #0
    2494:	f000 fbf6 	bl	2c84 <digitalWrite>
	pinMode(MI, INPUT);digitalWrite(MI, LOW);
    2498:	7f20      	ldrb	r0, [r4, #28]
    249a:	2100      	movs	r1, #0
    249c:	f000 fc06 	bl	2cac <pinMode>
    24a0:	7f20      	ldrb	r0, [r4, #28]
    24a2:	2100      	movs	r1, #0
    24a4:	f000 fbee 	bl	2c84 <digitalWrite>

	pinMode(REQ, OUTPUT);digitalWrite(REQ, LOW);
    24a8:	7820      	ldrb	r0, [r4, #0]
    24aa:	2101      	movs	r1, #1
    24ac:	f000 fbfe 	bl	2cac <pinMode>
    24b0:	7820      	ldrb	r0, [r4, #0]
    24b2:	2100      	movs	r1, #0
    24b4:	f000 fbe6 	bl	2c84 <digitalWrite>
	pinMode(WR, OUTPUT);digitalWrite(WR, LOW);
    24b8:	7920      	ldrb	r0, [r4, #4]
    24ba:	2101      	movs	r1, #1
    24bc:	f000 fbf6 	bl	2cac <pinMode>
    24c0:	7920      	ldrb	r0, [r4, #4]
    24c2:	2100      	movs	r1, #0
    24c4:	f000 fbde 	bl	2c84 <digitalWrite>
	pinMode(CS, OUTPUT);digitalWrite(CS, HIGH);
    24c8:	7c20      	ldrb	r0, [r4, #16]
    24ca:	2101      	movs	r1, #1
    24cc:	f000 fbee 	bl	2cac <pinMode>
    24d0:	7c20      	ldrb	r0, [r4, #16]
    24d2:	2101      	movs	r1, #1
    24d4:	f000 fbd6 	bl	2c84 <digitalWrite>
	pinMode(SCK, OUTPUT);digitalWrite(SCK, LOW);
    24d8:	7d20      	ldrb	r0, [r4, #20]
    24da:	2101      	movs	r1, #1
    24dc:	f000 fbe6 	bl	2cac <pinMode>
    24e0:	7d20      	ldrb	r0, [r4, #20]
    24e2:	2100      	movs	r1, #0
    24e4:	f000 fbce 	bl	2c84 <digitalWrite>
	pinMode(MO, OUTPUT);digitalWrite(MO, LOW);
    24e8:	7e20      	ldrb	r0, [r4, #24]
    24ea:	2101      	movs	r1, #1
    24ec:	f000 fbde 	bl	2cac <pinMode>
    24f0:	7e20      	ldrb	r0, [r4, #24]
    24f2:	2100      	movs	r1, #0
    24f4:	f000 fbc6 	bl	2c84 <digitalWrite>

	// SPI.setDataMode(SPI_MODE0);
	// SPI.setBitOrder(MSBFIRST);
	// SPI.setClockDivider(SPI_CLOCK_DIV128); //half speed, if the wire is too long may set this to SPI_CLOCK_DIV8
	// SPI.setClockDivider(SPI_CLOCK_DIV4); //half speed, if the wire is too long may set this to SPI_CLOCK_DIV8
	SPI.begin();
    24f8:	4806      	ldr	r0, [pc, #24]	; (2514 <CACHE_Class::init(int)+0x108>)
}
    24fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	// SPI.setDataMode(SPI_MODE0);
	// SPI.setBitOrder(MSBFIRST);
	// SPI.setClockDivider(SPI_CLOCK_DIV128); //half speed, if the wire is too long may set this to SPI_CLOCK_DIV8
	// SPI.setClockDivider(SPI_CLOCK_DIV4); //half speed, if the wire is too long may set this to SPI_CLOCK_DIV8
	SPI.begin();
    24fe:	f7ff bf47 	b.w	2390 <SPIClass::begin()>


void CACHE_Class::init(int board_type){
	switch(board_type){
	case MEGA2560:
		CS=Mega2560_CS;
    2502:	2035      	movs	r0, #53	; 0x35
		SCK=Mega2560_SCK;
    2504:	2134      	movs	r1, #52	; 0x34
		MO=Mega2560_MO;
    2506:	2233      	movs	r2, #51	; 0x33
		MI=Mega2560_MI;
    2508:	2332      	movs	r3, #50	; 0x32


void CACHE_Class::init(int board_type){
	switch(board_type){
	case MEGA2560:
		CS=Mega2560_CS;
    250a:	6120      	str	r0, [r4, #16]
		SCK=Mega2560_SCK;
    250c:	6161      	str	r1, [r4, #20]
		MO=Mega2560_MO;
    250e:	61a2      	str	r2, [r4, #24]
		MI=Mega2560_MI;
    2510:	61e3      	str	r3, [r4, #28]
		break;
    2512:	e789      	b.n	2428 <CACHE_Class::init(int)+0x1c>
    2514:	1fff0dd0 	.word	0x1fff0dd0

00002518 <CACHE_Class::new_info()>:
	// SPI.setClockDivider(SPI_CLOCK_DIV128); //half speed, if the wire is too long may set this to SPI_CLOCK_DIV8
	// SPI.setClockDivider(SPI_CLOCK_DIV4); //half speed, if the wire is too long may set this to SPI_CLOCK_DIV8
	SPI.begin();
}

int CACHE_Class::new_info(){
    2518:	b508      	push	{r3, lr}
	return digitalRead(INFO);
    251a:	7b00      	ldrb	r0, [r0, #12]
    251c:	f000 fbb8 	bl	2c90 <digitalRead>
}
    2520:	bd08      	pop	{r3, pc}
    2522:	bf00      	nop

00002524 <CACHE_Class::request()>:

void CACHE_Class::request(){
    2524:	b510      	push	{r4, lr}
	digitalWrite(REQ, HIGH);
    2526:	2101      	movs	r1, #1

int CACHE_Class::new_info(){
	return digitalRead(INFO);
}

void CACHE_Class::request(){
    2528:	4604      	mov	r4, r0
	digitalWrite(REQ, HIGH);
    252a:	7800      	ldrb	r0, [r0, #0]
    252c:	f000 fbaa 	bl	2c84 <digitalWrite>
	while(LOW == digitalRead(PER));
    2530:	7a20      	ldrb	r0, [r4, #8]
    2532:	f000 fbad 	bl	2c90 <digitalRead>
    2536:	2800      	cmp	r0, #0
    2538:	d0fa      	beq.n	2530 <CACHE_Class::request()+0xc>
}
    253a:	bd10      	pop	{r4, pc}

0000253c <CACHE_Class::release()>:


void CACHE_Class::release(){
    253c:	b510      	push	{r4, lr}
    253e:	4604      	mov	r4, r0
	digitalWrite(REQ, LOW);
    2540:	2100      	movs	r1, #0
    2542:	7800      	ldrb	r0, [r0, #0]
    2544:	f000 fb9e 	bl	2c84 <digitalWrite>
	digitalWrite(WR, LOW);
    2548:	7920      	ldrb	r0, [r4, #4]
    254a:	2100      	movs	r1, #0
}
    254c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}


void CACHE_Class::release(){
	digitalWrite(REQ, LOW);
	digitalWrite(WR, LOW);
    2550:	f000 bb98 	b.w	2c84 <digitalWrite>

00002554 <CACHE_Class::write(unsigned long, unsigned short, char*)>:
}


void CACHE_Class::write(uint32_t addr, uint16_t size, char *data){
    2554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2558:	4605      	mov	r5, r0
    255a:	460f      	mov	r7, r1
	digitalWrite(CS, LOW);
    255c:	7c00      	ldrb	r0, [r0, #16]
    255e:	2100      	movs	r1, #0
	digitalWrite(REQ, LOW);
	digitalWrite(WR, LOW);
}


void CACHE_Class::write(uint32_t addr, uint16_t size, char *data){
    2560:	4616      	mov	r6, r2
    2562:	461c      	mov	r4, r3
	digitalWrite(CS, LOW);
    2564:	f000 fb8e 	bl	2c84 <digitalWrite>
	digitalWrite(WR, HIGH);
    2568:	7928      	ldrb	r0, [r5, #4]
    256a:	2101      	movs	r1, #1
    256c:	f000 fb8a 	bl	2c84 <digitalWrite>

	SPI.beginTransaction(SPISettings(SPISPEED, MSBFIRST, SPI_MODE0));
    2570:	f8d5 c020 	ldr.w	ip, [r5, #32]
    2574:	4866      	ldr	r0, [pc, #408]	; (2710 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x1bc>)
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    2576:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 272c <CACHE_Class::write(unsigned long, unsigned short, char*)+0x1d8>
    257a:	2200      	movs	r2, #0
    257c:	e002      	b.n	2584 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x30>
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    257e:	2917      	cmp	r1, #23
    2580:	d008      	beq.n	2594 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x40>
    2582:	460a      	mov	r2, r1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    2584:	f830 3f02 	ldrh.w	r3, [r0, #2]!
    2588:	fb9e f3f3 	sdiv	r3, lr, r3
    258c:	459c      	cmp	ip, r3
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    258e:	f102 0101 	add.w	r1, r2, #1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    2592:	d3f4      	bcc.n	257e <CACHE_Class::write(unsigned long, unsigned short, char*)+0x2a>
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    2594:	4b5f      	ldr	r3, [pc, #380]	; (2714 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x1c0>)

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    2596:	4860      	ldr	r0, [pc, #384]	; (2718 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x1c4>)
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    2598:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    259c:	f890 e00b 	ldrb.w	lr, [r0, #11]
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    25a0:	f048 5260 	orr.w	r2, r8, #939524096	; 0x38000000

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    25a4:	f1be 0f00 	cmp.w	lr, #0
    25a8:	d032      	beq.n	2610 <CACHE_Class::write(unsigned long, unsigned short, char*)+0xbc>
			__disable_irq();
    25aa:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    25ac:	f890 c00b 	ldrb.w	ip, [r0, #11]
    25b0:	f01c 0f01 	tst.w	ip, #1
    25b4:	46e6      	mov	lr, ip
    25b6:	d009      	beq.n	25cc <CACHE_Class::write(unsigned long, unsigned short, char*)+0x78>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    25b8:	f8df e174 	ldr.w	lr, [pc, #372]	; 2730 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x1dc>
    25bc:	68c3      	ldr	r3, [r0, #12]
    25be:	f8de 1000 	ldr.w	r1, [lr]
    25c2:	4019      	ands	r1, r3
    25c4:	61c1      	str	r1, [r0, #28]
				NVIC_ICER0 = interruptSave[0];
    25c6:	f8ce 1000 	str.w	r1, [lr]
    25ca:	46e6      	mov	lr, ip
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    25cc:	f01c 0f02 	tst.w	ip, #2
    25d0:	d00a      	beq.n	25e8 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x94>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    25d2:	f8df c160 	ldr.w	ip, [pc, #352]	; 2734 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x1e0>
    25d6:	6903      	ldr	r3, [r0, #16]
    25d8:	f8dc 1000 	ldr.w	r1, [ip]
    25dc:	f890 e00b 	ldrb.w	lr, [r0, #11]
    25e0:	4019      	ands	r1, r3
    25e2:	6201      	str	r1, [r0, #32]
				NVIC_ICER1 = interruptSave[1];
    25e4:	f8cc 1000 	str.w	r1, [ip]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    25e8:	f01e 0f04 	tst.w	lr, #4
    25ec:	d00a      	beq.n	2604 <CACHE_Class::write(unsigned long, unsigned short, char*)+0xb0>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    25ee:	f8df c148 	ldr.w	ip, [pc, #328]	; 2738 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x1e4>
    25f2:	6943      	ldr	r3, [r0, #20]
    25f4:	f8dc 1000 	ldr.w	r1, [ip]
    25f8:	f890 e00b 	ldrb.w	lr, [r0, #11]
    25fc:	4019      	ands	r1, r3
    25fe:	6241      	str	r1, [r0, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    2600:	f8cc 1000 	str.w	r1, [ip]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    2604:	f01e 0f08 	tst.w	lr, #8
    2608:	d177      	bne.n	26fa <CACHE_Class::write(unsigned long, unsigned short, char*)+0x1a6>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    260a:	b662      	cpsie	i
    260c:	f890 e00b 	ldrb.w	lr, [r0, #11]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    2610:	6801      	ldr	r1, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    2612:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    2616:	4594      	cmp	ip, r2
    2618:	d00b      	beq.n	2632 <CACHE_Class::write(unsigned long, unsigned short, char*)+0xde>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    261a:	f048 43f0 	orr.w	r3, r8, #2013265920	; 0x78000000
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    261e:	f8df c11c 	ldr.w	ip, [pc, #284]	; 273c <CACHE_Class::write(unsigned long, unsigned short, char*)+0x1e8>
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    2622:	f8df 811c 	ldr.w	r8, [pc, #284]	; 2740 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x1ec>
    2626:	f8c1 8000 	str.w	r8, [r1]
			port().CTAR0 = settings.ctar;
    262a:	60ca      	str	r2, [r1, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    262c:	610b      	str	r3, [r1, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    262e:	f8c1 c000 	str.w	ip, [r1]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    2632:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
    2636:	2302      	movs	r3, #2
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    2638:	62ca      	str	r2, [r1, #44]	; 0x2c
		port().PUSHR = data;
    263a:	634b      	str	r3, [r1, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    263c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    263e:	2b00      	cmp	r3, #0
    2640:	dafc      	bge.n	263c <CACHE_Class::write(unsigned long, unsigned short, char*)+0xe8>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    2642:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2646:	f3c7 4307 	ubfx	r3, r7, #16, #8
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    264a:	f8d1 c038 	ldr.w	ip, [r1, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    264e:	62ca      	str	r2, [r1, #44]	; 0x2c
		port().PUSHR = data;
    2650:	634b      	str	r3, [r1, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    2652:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    2654:	2b00      	cmp	r3, #0
    2656:	dafc      	bge.n	2652 <CACHE_Class::write(unsigned long, unsigned short, char*)+0xfe>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    2658:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    265c:	f3c7 2307 	ubfx	r3, r7, #8, #8
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    2660:	f8d1 c038 	ldr.w	ip, [r1, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    2664:	62ca      	str	r2, [r1, #44]	; 0x2c
		port().PUSHR = data;
    2666:	634b      	str	r3, [r1, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    2668:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    266a:	2b00      	cmp	r3, #0
    266c:	dafc      	bge.n	2668 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x114>
    266e:	b2ff      	uxtb	r7, r7
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    2670:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    2674:	6b8a      	ldr	r2, [r1, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    2676:	62cb      	str	r3, [r1, #44]	; 0x2c
		port().PUSHR = data;
    2678:	634f      	str	r7, [r1, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    267a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    267c:	2b00      	cmp	r3, #0
    267e:	dafc      	bge.n	267a <CACHE_Class::write(unsigned long, unsigned short, char*)+0x126>
		return port().POPR;
    2680:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	SPI.transfer(wr_code);
	SPI.transfer(addr>>16);
	SPI.transfer(addr>>8);
	SPI.transfer(addr);
	for(uint16_t i = 0; i<size; i++){
    2682:	b17e      	cbz	r6, 26a4 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x150>
    2684:	3e01      	subs	r6, #1
    2686:	fa14 f686 	uxtah	r6, r4, r6
    268a:	1e62      	subs	r2, r4, #1
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    268c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
		SPI.transfer(data[i]);
    2690:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    2694:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().PUSHR = data;
    2696:	634b      	str	r3, [r1, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    2698:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    269a:	2b00      	cmp	r3, #0
    269c:	dafc      	bge.n	2698 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x144>
	SPI.beginTransaction(SPISettings(SPISPEED, MSBFIRST, SPI_MODE0));
	SPI.transfer(wr_code);
	SPI.transfer(addr>>16);
	SPI.transfer(addr>>8);
	SPI.transfer(addr);
	for(uint16_t i = 0; i<size; i++){
    269e:	4296      	cmp	r6, r2
		return port().POPR;
    26a0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    26a2:	d1f5      	bne.n	2690 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x13c>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    26a4:	f1be 0f00 	cmp.w	lr, #0
    26a8:	d01d      	beq.n	26e6 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x192>
			if (interruptMasksUsed & 0x01) {
    26aa:	f01e 0f01 	tst.w	lr, #1
    26ae:	d004      	beq.n	26ba <CACHE_Class::write(unsigned long, unsigned short, char*)+0x166>
				NVIC_ISER0 = interruptSave[0];
    26b0:	4b1a      	ldr	r3, [pc, #104]	; (271c <CACHE_Class::write(unsigned long, unsigned short, char*)+0x1c8>)
    26b2:	69c2      	ldr	r2, [r0, #28]
    26b4:	f890 e00b 	ldrb.w	lr, [r0, #11]
    26b8:	601a      	str	r2, [r3, #0]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    26ba:	f01e 0f02 	tst.w	lr, #2
    26be:	d004      	beq.n	26ca <CACHE_Class::write(unsigned long, unsigned short, char*)+0x176>
				NVIC_ISER1 = interruptSave[1];
    26c0:	4b17      	ldr	r3, [pc, #92]	; (2720 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x1cc>)
    26c2:	6a02      	ldr	r2, [r0, #32]
    26c4:	f890 e00b 	ldrb.w	lr, [r0, #11]
    26c8:	601a      	str	r2, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    26ca:	f01e 0f04 	tst.w	lr, #4
    26ce:	d004      	beq.n	26da <CACHE_Class::write(unsigned long, unsigned short, char*)+0x186>
				NVIC_ISER2 = interruptSave[2];
    26d0:	4b14      	ldr	r3, [pc, #80]	; (2724 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x1d0>)
    26d2:	6a42      	ldr	r2, [r0, #36]	; 0x24
    26d4:	f890 e00b 	ldrb.w	lr, [r0, #11]
    26d8:	601a      	str	r2, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    26da:	f01e 0f08 	tst.w	lr, #8
    26de:	d002      	beq.n	26e6 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x192>
				NVIC_ISER3 = interruptSave[3];
    26e0:	4b11      	ldr	r3, [pc, #68]	; (2728 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x1d4>)
    26e2:	6a82      	ldr	r2, [r0, #40]	; 0x28
    26e4:	601a      	str	r2, [r3, #0]
		SPI.transfer(data[i]);
	}

	SPI.endTransaction();
	digitalWrite(CS, HIGH);
    26e6:	7c28      	ldrb	r0, [r5, #16]
    26e8:	2101      	movs	r1, #1
    26ea:	f000 facb 	bl	2c84 <digitalWrite>
	digitalWrite(WR, LOW);
    26ee:	7928      	ldrb	r0, [r5, #4]
    26f0:	2100      	movs	r1, #0
}
    26f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		SPI.transfer(data[i]);
	}

	SPI.endTransaction();
	digitalWrite(CS, HIGH);
	digitalWrite(WR, LOW);
    26f6:	f000 bac5 	b.w	2c84 <digitalWrite>
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    26fa:	f8df e048 	ldr.w	lr, [pc, #72]	; 2744 <CACHE_Class::write(unsigned long, unsigned short, char*)+0x1f0>
    26fe:	6983      	ldr	r3, [r0, #24]
    2700:	f8de 1000 	ldr.w	r1, [lr]
    2704:	4019      	ands	r1, r3
    2706:	6281      	str	r1, [r0, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    2708:	f8ce 1000 	str.w	r1, [lr]
    270c:	e77d      	b.n	260a <CACHE_Class::write(unsigned long, unsigned short, char*)+0xb6>
    270e:	bf00      	nop
    2710:	0000792e 	.word	0x0000792e
    2714:	000079f4 	.word	0x000079f4
    2718:	1fff0dd0 	.word	0x1fff0dd0
    271c:	e000e100 	.word	0xe000e100
    2720:	e000e104 	.word	0xe000e104
    2724:	e000e108 	.word	0xe000e108
    2728:	e000e10c 	.word	0xe000e10c
    272c:	03938700 	.word	0x03938700
    2730:	e000e180 	.word	0xe000e180
    2734:	e000e184 	.word	0xe000e184
    2738:	e000e188 	.word	0xe000e188
    273c:	803f0000 	.word	0x803f0000
    2740:	003f4001 	.word	0x003f4001
    2744:	e000e18c 	.word	0xe000e18c

00002748 <CACHE_Class::read(unsigned long, unsigned short, char*)>:
}

void CACHE_Class::read(uint32_t addr, uint16_t size, char *data){
    2748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    274c:	4605      	mov	r5, r0
    274e:	460f      	mov	r7, r1
	digitalWrite(CS, LOW);
    2750:	7c00      	ldrb	r0, [r0, #16]
    2752:	2100      	movs	r1, #0
	SPI.endTransaction();
	digitalWrite(CS, HIGH);
	digitalWrite(WR, LOW);
}

void CACHE_Class::read(uint32_t addr, uint16_t size, char *data){
    2754:	4616      	mov	r6, r2
    2756:	461c      	mov	r4, r3
	digitalWrite(CS, LOW);
    2758:	f000 fa94 	bl	2c84 <digitalWrite>
	SPI.beginTransaction(SPISettings(SPISPEED, MSBFIRST, SPI_MODE0));
    275c:	f8d5 c020 	ldr.w	ip, [r5, #32]
    2760:	4860      	ldr	r0, [pc, #384]	; (28e4 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x19c>)
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    2762:	f8df e19c 	ldr.w	lr, [pc, #412]	; 2900 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x1b8>
    2766:	2200      	movs	r2, #0
    2768:	e002      	b.n	2770 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x28>
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    276a:	2917      	cmp	r1, #23
    276c:	d008      	beq.n	2780 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x38>
    276e:	460a      	mov	r2, r1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    2770:	f830 3f02 	ldrh.w	r3, [r0, #2]!
    2774:	fb9e f3f3 	sdiv	r3, lr, r3
    2778:	459c      	cmp	ip, r3
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    277a:	f102 0101 	add.w	r1, r2, #1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    277e:	d3f4      	bcc.n	276a <CACHE_Class::read(unsigned long, unsigned short, char*)+0x22>
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    2780:	4b59      	ldr	r3, [pc, #356]	; (28e8 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x1a0>)

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    2782:	485a      	ldr	r0, [pc, #360]	; (28ec <CACHE_Class::read(unsigned long, unsigned short, char*)+0x1a4>)
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    2784:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    2788:	7ac1      	ldrb	r1, [r0, #11]
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    278a:	f048 5260 	orr.w	r2, r8, #939524096	; 0x38000000

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    278e:	b381      	cbz	r1, 27f2 <CACHE_Class::read(unsigned long, unsigned short, char*)+0xaa>
			__disable_irq();
    2790:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    2792:	f890 c00b 	ldrb.w	ip, [r0, #11]
    2796:	f01c 0f01 	tst.w	ip, #1
    279a:	46e6      	mov	lr, ip
    279c:	d009      	beq.n	27b2 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x6a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    279e:	f8df e164 	ldr.w	lr, [pc, #356]	; 2904 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x1bc>
    27a2:	68c3      	ldr	r3, [r0, #12]
    27a4:	f8de 1000 	ldr.w	r1, [lr]
    27a8:	4019      	ands	r1, r3
    27aa:	61c1      	str	r1, [r0, #28]
				NVIC_ICER0 = interruptSave[0];
    27ac:	f8ce 1000 	str.w	r1, [lr]
    27b0:	46e6      	mov	lr, ip
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    27b2:	f01c 0f02 	tst.w	ip, #2
    27b6:	d00a      	beq.n	27ce <CACHE_Class::read(unsigned long, unsigned short, char*)+0x86>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    27b8:	f8df c14c 	ldr.w	ip, [pc, #332]	; 2908 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x1c0>
    27bc:	6903      	ldr	r3, [r0, #16]
    27be:	f8dc 1000 	ldr.w	r1, [ip]
    27c2:	f890 e00b 	ldrb.w	lr, [r0, #11]
    27c6:	4019      	ands	r1, r3
    27c8:	6201      	str	r1, [r0, #32]
				NVIC_ICER1 = interruptSave[1];
    27ca:	f8cc 1000 	str.w	r1, [ip]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    27ce:	f01e 0f04 	tst.w	lr, #4
    27d2:	d00a      	beq.n	27ea <CACHE_Class::read(unsigned long, unsigned short, char*)+0xa2>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    27d4:	f8df c134 	ldr.w	ip, [pc, #308]	; 290c <CACHE_Class::read(unsigned long, unsigned short, char*)+0x1c4>
    27d8:	6943      	ldr	r3, [r0, #20]
    27da:	f8dc 1000 	ldr.w	r1, [ip]
    27de:	f890 e00b 	ldrb.w	lr, [r0, #11]
    27e2:	4019      	ands	r1, r3
    27e4:	6241      	str	r1, [r0, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    27e6:	f8cc 1000 	str.w	r1, [ip]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    27ea:	f01e 0f08 	tst.w	lr, #8
    27ee:	d16e      	bne.n	28ce <CACHE_Class::read(unsigned long, unsigned short, char*)+0x186>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    27f0:	b662      	cpsie	i
    27f2:	6801      	ldr	r1, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    27f4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    27f8:	4596      	cmp	lr, r2
    27fa:	d00b      	beq.n	2814 <CACHE_Class::read(unsigned long, unsigned short, char*)+0xcc>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    27fc:	f048 43f0 	orr.w	r3, r8, #2013265920	; 0x78000000
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    2800:	f8df c10c 	ldr.w	ip, [pc, #268]	; 2910 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x1c8>
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    2804:	f8df e10c 	ldr.w	lr, [pc, #268]	; 2914 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x1cc>
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    2808:	f8c1 c000 	str.w	ip, [r1]
			port().CTAR0 = settings.ctar;
    280c:	60ca      	str	r2, [r1, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    280e:	610b      	str	r3, [r1, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    2810:	f8c1 e000 	str.w	lr, [r1]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    2814:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
    2818:	2303      	movs	r3, #3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    281a:	62ca      	str	r2, [r1, #44]	; 0x2c
		port().PUSHR = data;
    281c:	634b      	str	r3, [r1, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    281e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    2820:	2b00      	cmp	r3, #0
    2822:	dafc      	bge.n	281e <CACHE_Class::read(unsigned long, unsigned short, char*)+0xd6>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    2824:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2828:	f3c7 4307 	ubfx	r3, r7, #16, #8
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    282c:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    2830:	62ca      	str	r2, [r1, #44]	; 0x2c
		port().PUSHR = data;
    2832:	634b      	str	r3, [r1, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    2834:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    2836:	2b00      	cmp	r3, #0
    2838:	dafc      	bge.n	2834 <CACHE_Class::read(unsigned long, unsigned short, char*)+0xec>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    283a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    283e:	f3c7 2307 	ubfx	r3, r7, #8, #8
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    2842:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    2846:	62ca      	str	r2, [r1, #44]	; 0x2c
		port().PUSHR = data;
    2848:	634b      	str	r3, [r1, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    284a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    284c:	2b00      	cmp	r3, #0
    284e:	dafc      	bge.n	284a <CACHE_Class::read(unsigned long, unsigned short, char*)+0x102>
    2850:	b2ff      	uxtb	r7, r7
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    2852:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    2856:	6b8a      	ldr	r2, [r1, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    2858:	62cb      	str	r3, [r1, #44]	; 0x2c
		port().PUSHR = data;
    285a:	634f      	str	r7, [r1, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    285c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    285e:	2b00      	cmp	r3, #0
    2860:	dafc      	bge.n	285c <CACHE_Class::read(unsigned long, unsigned short, char*)+0x114>
		return port().POPR;
    2862:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	SPI.transfer(read_code);
	SPI.transfer(addr>>16);
	SPI.transfer(addr>>8);
	SPI.transfer(addr);

	for(uint16_t i = 0; i < size; i++){
    2864:	b196      	cbz	r6, 288c <CACHE_Class::read(unsigned long, unsigned short, char*)+0x144>
    2866:	3e01      	subs	r6, #1
    2868:	fa14 f686 	uxtah	r6, r4, r6
    286c:	1e62      	subs	r2, r4, #1
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    286e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
		port().PUSHR = data;
    2872:	2400      	movs	r4, #0
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    2874:	62cf      	str	r7, [r1, #44]	; 0x2c
		port().PUSHR = data;
    2876:	634c      	str	r4, [r1, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    2878:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    287a:	2b00      	cmp	r3, #0
    287c:	dafc      	bge.n	2878 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x130>
		return port().POPR;
    287e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
		data[i] = SPI.transfer(0);
    2880:	f802 3f01 	strb.w	r3, [r2, #1]!
	SPI.transfer(read_code);
	SPI.transfer(addr>>16);
	SPI.transfer(addr>>8);
	SPI.transfer(addr);

	for(uint16_t i = 0; i < size; i++){
    2884:	4296      	cmp	r6, r2
    2886:	d001      	beq.n	288c <CACHE_Class::read(unsigned long, unsigned short, char*)+0x144>
    2888:	6801      	ldr	r1, [r0, #0]
    288a:	e7f3      	b.n	2874 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x12c>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    288c:	7ac3      	ldrb	r3, [r0, #11]
    288e:	4917      	ldr	r1, [pc, #92]	; (28ec <CACHE_Class::read(unsigned long, unsigned short, char*)+0x1a4>)
    2890:	461a      	mov	r2, r3
    2892:	b1b3      	cbz	r3, 28c2 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x17a>
			if (interruptMasksUsed & 0x01) {
    2894:	07de      	lsls	r6, r3, #31
    2896:	d503      	bpl.n	28a0 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x158>
				NVIC_ISER0 = interruptSave[0];
    2898:	4a15      	ldr	r2, [pc, #84]	; (28f0 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x1a8>)
    289a:	69c9      	ldr	r1, [r1, #28]
    289c:	6011      	str	r1, [r2, #0]
    289e:	461a      	mov	r2, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    28a0:	079c      	lsls	r4, r3, #30
    28a2:	d503      	bpl.n	28ac <CACHE_Class::read(unsigned long, unsigned short, char*)+0x164>
				NVIC_ISER1 = interruptSave[1];
    28a4:	4b13      	ldr	r3, [pc, #76]	; (28f4 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x1ac>)
    28a6:	6a01      	ldr	r1, [r0, #32]
    28a8:	7ac2      	ldrb	r2, [r0, #11]
    28aa:	6019      	str	r1, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    28ac:	0751      	lsls	r1, r2, #29
    28ae:	d503      	bpl.n	28b8 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x170>
				NVIC_ISER2 = interruptSave[2];
    28b0:	4b11      	ldr	r3, [pc, #68]	; (28f8 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x1b0>)
    28b2:	6a41      	ldr	r1, [r0, #36]	; 0x24
    28b4:	7ac2      	ldrb	r2, [r0, #11]
    28b6:	6019      	str	r1, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    28b8:	0713      	lsls	r3, r2, #28
    28ba:	d502      	bpl.n	28c2 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x17a>
				NVIC_ISER3 = interruptSave[3];
    28bc:	4b0f      	ldr	r3, [pc, #60]	; (28fc <CACHE_Class::read(unsigned long, unsigned short, char*)+0x1b4>)
    28be:	6a82      	ldr	r2, [r0, #40]	; 0x28
    28c0:	601a      	str	r2, [r3, #0]
		data[i] = SPI.transfer(0);
	}

	SPI.endTransaction();
	digitalWrite(CS, HIGH);
    28c2:	7c28      	ldrb	r0, [r5, #16]
    28c4:	2101      	movs	r1, #1
}
    28c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	for(uint16_t i = 0; i < size; i++){
		data[i] = SPI.transfer(0);
	}

	SPI.endTransaction();
	digitalWrite(CS, HIGH);
    28ca:	f000 b9db 	b.w	2c84 <digitalWrite>
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    28ce:	f8df e048 	ldr.w	lr, [pc, #72]	; 2918 <CACHE_Class::read(unsigned long, unsigned short, char*)+0x1d0>
    28d2:	6983      	ldr	r3, [r0, #24]
    28d4:	f8de 1000 	ldr.w	r1, [lr]
    28d8:	4019      	ands	r1, r3
    28da:	6281      	str	r1, [r0, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    28dc:	f8ce 1000 	str.w	r1, [lr]
    28e0:	e786      	b.n	27f0 <CACHE_Class::read(unsigned long, unsigned short, char*)+0xa8>
    28e2:	bf00      	nop
    28e4:	0000792e 	.word	0x0000792e
    28e8:	000079f4 	.word	0x000079f4
    28ec:	1fff0dd0 	.word	0x1fff0dd0
    28f0:	e000e100 	.word	0xe000e100
    28f4:	e000e104 	.word	0xe000e104
    28f8:	e000e108 	.word	0xe000e108
    28fc:	e000e10c 	.word	0xe000e10c
    2900:	03938700 	.word	0x03938700
    2904:	e000e180 	.word	0xe000e180
    2908:	e000e184 	.word	0xe000e184
    290c:	e000e188 	.word	0xe000e188
    2910:	003f4001 	.word	0x003f4001
    2914:	803f0000 	.word	0x803f0000
    2918:	e000e18c 	.word	0xe000e18c

0000291c <CACHE_Class::q_write(unsigned long, unsigned short, char*)>:
}


void CACHE_Class::q_write(uint32_t addr, uint16_t size, char *data){
    291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    291e:	4604      	mov	r4, r0
    2920:	460d      	mov	r5, r1
    2922:	4616      	mov	r6, r2
    2924:	461f      	mov	r7, r3
	request();
    2926:	f7ff fdfd 	bl	2524 <CACHE_Class::request()>
	write(addr, size, data);
    292a:	4620      	mov	r0, r4
    292c:	463b      	mov	r3, r7
    292e:	4632      	mov	r2, r6
    2930:	4629      	mov	r1, r5
    2932:	f7ff fe0f 	bl	2554 <CACHE_Class::write(unsigned long, unsigned short, char*)>
	release();
    2936:	4620      	mov	r0, r4
}
    2938:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}


void CACHE_Class::q_write(uint32_t addr, uint16_t size, char *data){
	request();
	write(addr, size, data);
	release();
    293c:	f7ff bdfe 	b.w	253c <CACHE_Class::release()>

00002940 <CACHE_Class::q_read(unsigned long, unsigned short, char*)>:
}


void CACHE_Class::q_read(uint32_t addr, uint16_t size, char *data){
    2940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2942:	4604      	mov	r4, r0
    2944:	460d      	mov	r5, r1
    2946:	4616      	mov	r6, r2
    2948:	461f      	mov	r7, r3
	request();
    294a:	f7ff fdeb 	bl	2524 <CACHE_Class::request()>
	read(addr, size, data);
    294e:	4620      	mov	r0, r4
    2950:	463b      	mov	r3, r7
    2952:	4632      	mov	r2, r6
    2954:	4629      	mov	r1, r5
    2956:	f7ff fef7 	bl	2748 <CACHE_Class::read(unsigned long, unsigned short, char*)>
	release();
    295a:	4620      	mov	r0, r4
}
    295c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}


void CACHE_Class::q_read(uint32_t addr, uint16_t size, char *data){
	request();
	read(addr, size, data);
	release();
    2960:	f7ff bdec 	b.w	253c <CACHE_Class::release()>

00002964 <_GLOBAL__sub_I__ZN11CACHE_Class4initEi>:
#define NONESPECIFIC 0
#define MEGA2560 1
#define MEGA328 2


class CACHE_Class
    2964:	4b01      	ldr	r3, [pc, #4]	; (296c <_GLOBAL__sub_I__ZN11CACHE_Class4initEi+0x8>)
    2966:	4a02      	ldr	r2, [pc, #8]	; (2970 <_GLOBAL__sub_I__ZN11CACHE_Class4initEi+0xc>)
    2968:	621a      	str	r2, [r3, #32]
    296a:	4770      	bx	lr
    296c:	1fff2060 	.word	0x1fff2060
    2970:	003d0900 	.word	0x003d0900

00002974 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2974:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    2976:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    297a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    297e:	d16d      	bne.n	2a5c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2980:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    2982:	d341      	bcc.n	2a08 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2984:	f851 3b04 	ldr.w	r3, [r1], #4
    2988:	f840 3b04 	str.w	r3, [r0], #4
    298c:	f851 3b04 	ldr.w	r3, [r1], #4
    2990:	f840 3b04 	str.w	r3, [r0], #4
    2994:	f851 3b04 	ldr.w	r3, [r1], #4
    2998:	f840 3b04 	str.w	r3, [r0], #4
    299c:	f851 3b04 	ldr.w	r3, [r1], #4
    29a0:	f840 3b04 	str.w	r3, [r0], #4
    29a4:	f851 3b04 	ldr.w	r3, [r1], #4
    29a8:	f840 3b04 	str.w	r3, [r0], #4
    29ac:	f851 3b04 	ldr.w	r3, [r1], #4
    29b0:	f840 3b04 	str.w	r3, [r0], #4
    29b4:	f851 3b04 	ldr.w	r3, [r1], #4
    29b8:	f840 3b04 	str.w	r3, [r0], #4
    29bc:	f851 3b04 	ldr.w	r3, [r1], #4
    29c0:	f840 3b04 	str.w	r3, [r0], #4
    29c4:	f851 3b04 	ldr.w	r3, [r1], #4
    29c8:	f840 3b04 	str.w	r3, [r0], #4
    29cc:	f851 3b04 	ldr.w	r3, [r1], #4
    29d0:	f840 3b04 	str.w	r3, [r0], #4
    29d4:	f851 3b04 	ldr.w	r3, [r1], #4
    29d8:	f840 3b04 	str.w	r3, [r0], #4
    29dc:	f851 3b04 	ldr.w	r3, [r1], #4
    29e0:	f840 3b04 	str.w	r3, [r0], #4
    29e4:	f851 3b04 	ldr.w	r3, [r1], #4
    29e8:	f840 3b04 	str.w	r3, [r0], #4
    29ec:	f851 3b04 	ldr.w	r3, [r1], #4
    29f0:	f840 3b04 	str.w	r3, [r0], #4
    29f4:	f851 3b04 	ldr.w	r3, [r1], #4
    29f8:	f840 3b04 	str.w	r3, [r0], #4
    29fc:	f851 3b04 	ldr.w	r3, [r1], #4
    2a00:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2a04:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    2a06:	d2bd      	bcs.n	2984 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2a08:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2a0a:	d311      	bcc.n	2a30 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2a0c:	f851 3b04 	ldr.w	r3, [r1], #4
    2a10:	f840 3b04 	str.w	r3, [r0], #4
    2a14:	f851 3b04 	ldr.w	r3, [r1], #4
    2a18:	f840 3b04 	str.w	r3, [r0], #4
    2a1c:	f851 3b04 	ldr.w	r3, [r1], #4
    2a20:	f840 3b04 	str.w	r3, [r0], #4
    2a24:	f851 3b04 	ldr.w	r3, [r1], #4
    2a28:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2a2c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    2a2e:	d2ed      	bcs.n	2a0c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    2a30:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    2a32:	d305      	bcc.n	2a40 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    2a34:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2a38:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    2a3c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    2a3e:	d2f9      	bcs.n	2a34 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    2a40:	3204      	adds	r2, #4
	beq	.Ldone
    2a42:	d008      	beq.n	2a56 <memcpy+0xe2>

	lsls	r2, r2, #31
    2a44:	07d2      	lsls	r2, r2, #31
	itt ne
    2a46:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    2a48:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2a4c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    2a50:	d301      	bcc.n	2a56 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    2a52:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    2a54:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2a56:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2a58:	4770      	bx	lr
    2a5a:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2a5c:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    2a5e:	d313      	bcc.n	2a88 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    2a60:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    2a62:	d08d      	beq.n	2980 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    2a64:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2a68:	d08a      	beq.n	2980 <memcpy+0xc>

	rsb	r3, #4
    2a6a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    2a6e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    2a70:	07db      	lsls	r3, r3, #31
	itt ne
    2a72:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    2a74:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2a78:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2a7c:	d380      	bcc.n	2980 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    2a7e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    2a82:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    2a86:	e77b      	b.n	2980 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2a88:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    2a8a:	d3d9      	bcc.n	2a40 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2a8c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    2a8e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    2a92:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    2a96:	d2f9      	bcs.n	2a8c <memcpy+0x118>

	ldrb	r3, [r1]
    2a98:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    2a9a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2a9c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    2a9e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    2aa0:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    2aa2:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2aa4:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2aa6:	4770      	bx	lr

00002aa8 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    2aa8:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2aaa:	4c10      	ldr	r4, [pc, #64]	; (2aec <fault_isr+0x44>)
    2aac:	e008      	b.n	2ac0 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2aae:	6823      	ldr	r3, [r4, #0]
    2ab0:	0559      	lsls	r1, r3, #21
    2ab2:	d40d      	bmi.n	2ad0 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2ab4:	6823      	ldr	r3, [r4, #0]
    2ab6:	051a      	lsls	r2, r3, #20
    2ab8:	d40f      	bmi.n	2ada <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2aba:	6823      	ldr	r3, [r4, #0]
    2abc:	04db      	lsls	r3, r3, #19
    2abe:	d411      	bmi.n	2ae4 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2ac0:	6823      	ldr	r3, [r4, #0]
    2ac2:	0358      	lsls	r0, r3, #13
    2ac4:	d5f3      	bpl.n	2aae <fault_isr+0x6>
    2ac6:	f000 faa5 	bl	3014 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2aca:	6823      	ldr	r3, [r4, #0]
    2acc:	0559      	lsls	r1, r3, #21
    2ace:	d5f1      	bpl.n	2ab4 <fault_isr+0xc>
    2ad0:	f001 fbae 	bl	4230 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2ad4:	6823      	ldr	r3, [r4, #0]
    2ad6:	051a      	lsls	r2, r3, #20
    2ad8:	d5ef      	bpl.n	2aba <fault_isr+0x12>
    2ada:	f001 fc3f 	bl	435c <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2ade:	6823      	ldr	r3, [r4, #0]
    2ae0:	04db      	lsls	r3, r3, #19
    2ae2:	d5ed      	bpl.n	2ac0 <fault_isr+0x18>
    2ae4:	f001 fcd0 	bl	4488 <uart2_status_isr>
    2ae8:	e7ea      	b.n	2ac0 <fault_isr+0x18>
    2aea:	bf00      	nop
    2aec:	40048034 	.word	0x40048034

00002af0 <unused_isr>:
	}
}

void unused_isr(void)
{
    2af0:	b508      	push	{r3, lr}
	fault_isr();
    2af2:	f7ff ffd9 	bl	2aa8 <fault_isr>
    2af6:	bf00      	nop

00002af8 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    2af8:	4b01      	ldr	r3, [pc, #4]	; (2b00 <startup_early_hook+0x8>)
    2afa:	2210      	movs	r2, #16
    2afc:	801a      	strh	r2, [r3, #0]
    2afe:	4770      	bx	lr
    2b00:	40052000 	.word	0x40052000

00002b04 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    2b04:	4770      	bx	lr
    2b06:	bf00      	nop

00002b08 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    2b08:	4909      	ldr	r1, [pc, #36]	; (2b30 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    2b0a:	b508      	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    2b0c:	680b      	ldr	r3, [r1, #0]
	if (incr != 0) {
    2b0e:	b130      	cbz	r0, 2b1e <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    2b10:	466a      	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    2b12:	4418      	add	r0, r3
    2b14:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
    2b18:	4290      	cmp	r0, r2
    2b1a:	d202      	bcs.n	2b22 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    2b1c:	6008      	str	r0, [r1, #0]
	}
	return prev;
    2b1e:	4618      	mov	r0, r3
}
    2b20:	bd08      	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    2b22:	f004 f9f5 	bl	6f10 <__errno>
    2b26:	230c      	movs	r3, #12
    2b28:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    2b2a:	f04f 30ff 	mov.w	r0, #4294967295
    2b2e:	bd08      	pop	{r3, pc}
    2b30:	1fff0e10 	.word	0x1fff0e10

00002b34 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    2b34:	4a08      	ldr	r2, [pc, #32]	; (2b58 <kinetis_hsrun_disable+0x24>)
    2b36:	7813      	ldrb	r3, [r2, #0]
    2b38:	2b80      	cmp	r3, #128	; 0x80
    2b3a:	d001      	beq.n	2b40 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    2b3c:	2000      	movs	r0, #0
}
    2b3e:	4770      	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    2b40:	4906      	ldr	r1, [pc, #24]	; (2b5c <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    2b42:	4b07      	ldr	r3, [pc, #28]	; (2b60 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    2b44:	4807      	ldr	r0, [pc, #28]	; (2b64 <kinetis_hsrun_disable+0x30>)
    2b46:	6008      	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    2b48:	2100      	movs	r1, #0
    2b4a:	7019      	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    2b4c:	7813      	ldrb	r3, [r2, #0]
    2b4e:	2b80      	cmp	r3, #128	; 0x80
    2b50:	d0fc      	beq.n	2b4c <kinetis_hsrun_disable+0x18>
		return 1;
    2b52:	2001      	movs	r0, #1
    2b54:	4770      	bx	lr
    2b56:	bf00      	nop
    2b58:	4007e003 	.word	0x4007e003
    2b5c:	40048044 	.word	0x40048044
    2b60:	4007e001 	.word	0x4007e001
    2b64:	22280000 	.word	0x22280000

00002b68 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    2b68:	4a09      	ldr	r2, [pc, #36]	; (2b90 <kinetis_hsrun_enable+0x28>)
    2b6a:	7813      	ldrb	r3, [r2, #0]
    2b6c:	2b01      	cmp	r3, #1
    2b6e:	d001      	beq.n	2b74 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    2b70:	2000      	movs	r0, #0
}
    2b72:	4770      	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    2b74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2b78:	f503 23fc 	add.w	r3, r3, #516096	; 0x7e000
    2b7c:	2160      	movs	r1, #96	; 0x60
    2b7e:	7019      	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    2b80:	7813      	ldrb	r3, [r2, #0]
    2b82:	2b80      	cmp	r3, #128	; 0x80
    2b84:	d1fc      	bne.n	2b80 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    2b86:	4b03      	ldr	r3, [pc, #12]	; (2b94 <kinetis_hsrun_enable+0x2c>)
    2b88:	4a03      	ldr	r2, [pc, #12]	; (2b98 <kinetis_hsrun_enable+0x30>)
    2b8a:	601a      	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    2b8c:	2001      	movs	r0, #1
    2b8e:	4770      	bx	lr
    2b90:	4007e003 	.word	0x4007e003
    2b94:	40048044 	.word	0x40048044
    2b98:	02060000 	.word	0x02060000

00002b9c <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    2b9c:	b410      	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    2b9e:	4b11      	ldr	r3, [pc, #68]	; (2be4 <digitalWrite.part.1+0x48>)
    2ba0:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    2ba4:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    2ba8:	b134      	cbz	r4, 2bb8 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    2baa:	2301      	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    2bac:	b179      	cbz	r1, 2bce <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    2bae:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
    2bb6:	4770      	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    2bb8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2bbc:	685b      	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2bbe:	681a      	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    2bc0:	b951      	cbnz	r1, 2bd8 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    2bc2:	f022 0202 	bic.w	r2, r2, #2
    2bc6:	601a      	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
    2bcc:	4770      	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    2bce:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
    2bd6:	4770      	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2bd8:	f042 0203 	orr.w	r2, r2, #3
    2bdc:	601a      	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2bde:	f85d 4b04 	ldr.w	r4, [sp], #4
    2be2:	4770      	bx	lr
    2be4:	00007a50 	.word	0x00007a50

00002be8 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2be8:	4a1c      	ldr	r2, [pc, #112]	; (2c5c <pinMode.part.2+0x74>)
    2bea:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2bee:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2bf0:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2bf2:	d011      	beq.n	2c18 <pinMode.part.2+0x30>
    2bf4:	2904      	cmp	r1, #4
    2bf6:	d01b      	beq.n	2c30 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2bf8:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    2bfc:	2200      	movs	r2, #0
    2bfe:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    2c02:	b129      	cbz	r1, 2c10 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    2c04:	2902      	cmp	r1, #2
    2c06:	d020      	beq.n	2c4a <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2c08:	2903      	cmp	r1, #3
    2c0a:	d022      	beq.n	2c52 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2c0c:	601a      	str	r2, [r3, #0]
    2c0e:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2c10:	f44f 7280 	mov.w	r2, #256	; 0x100
    2c14:	601a      	str	r2, [r3, #0]
    2c16:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2c18:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2c1c:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2c20:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2c24:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2c26:	681a      	ldr	r2, [r3, #0]
    2c28:	f022 0220 	bic.w	r2, r2, #32
    2c2c:	601a      	str	r2, [r3, #0]
    2c2e:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2c30:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2c34:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2c38:	2001      	movs	r0, #1
    2c3a:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2c3e:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    2c40:	681a      	ldr	r2, [r3, #0]
    2c42:	f042 0220 	orr.w	r2, r2, #32
    2c46:	601a      	str	r2, [r3, #0]
    2c48:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    2c4a:	f240 1203 	movw	r2, #259	; 0x103
    2c4e:	601a      	str	r2, [r3, #0]
    2c50:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    2c52:	f44f 7281 	mov.w	r2, #258	; 0x102
    2c56:	601a      	str	r2, [r3, #0]
    2c58:	4770      	bx	lr
    2c5a:	bf00      	nop
    2c5c:	00007a50 	.word	0x00007a50

00002c60 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    2c60:	b430      	push	{r4, r5}
	RTC_SR = 0;
    2c62:	4b05      	ldr	r3, [pc, #20]	; (2c78 <rtc_set+0x18>)
	RTC_TPR = 0;
    2c64:	4d05      	ldr	r5, [pc, #20]	; (2c7c <rtc_set+0x1c>)
	RTC_TSR = t;
    2c66:	4c06      	ldr	r4, [pc, #24]	; (2c80 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2c68:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    2c6a:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2c6c:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    2c6e:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    2c70:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    2c72:	6019      	str	r1, [r3, #0]
}
    2c74:	bc30      	pop	{r4, r5}
    2c76:	4770      	bx	lr
    2c78:	4003d014 	.word	0x4003d014
    2c7c:	4003d004 	.word	0x4003d004
    2c80:	4003d000 	.word	0x4003d000

00002c84 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    2c84:	283f      	cmp	r0, #63	; 0x3f
    2c86:	d801      	bhi.n	2c8c <digitalWrite+0x8>
    2c88:	f7ff bf88 	b.w	2b9c <digitalWrite.part.1>
    2c8c:	4770      	bx	lr
    2c8e:	bf00      	nop

00002c90 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2c90:	283f      	cmp	r0, #63	; 0x3f
    2c92:	d806      	bhi.n	2ca2 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    2c94:	4b04      	ldr	r3, [pc, #16]	; (2ca8 <digitalRead+0x18>)
    2c96:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    2c9a:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    2c9e:	b2c0      	uxtb	r0, r0
    2ca0:	4770      	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2ca2:	2000      	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    2ca4:	4770      	bx	lr
    2ca6:	bf00      	nop
    2ca8:	00007a50 	.word	0x00007a50

00002cac <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    2cac:	283f      	cmp	r0, #63	; 0x3f
    2cae:	d801      	bhi.n	2cb4 <pinMode+0x8>
    2cb0:	f7ff bf9a 	b.w	2be8 <pinMode.part.2>
    2cb4:	4770      	bx	lr
    2cb6:	bf00      	nop

00002cb8 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    2cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2cbc:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2cbe:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2cc0:	4f22      	ldr	r7, [pc, #136]	; (2d4c <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2cc2:	4b23      	ldr	r3, [pc, #140]	; (2d50 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2cc4:	4a23      	ldr	r2, [pc, #140]	; (2d54 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2cc6:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2cc8:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2cca:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    2ccc:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2cce:	0152      	lsls	r2, r2, #5
    2cd0:	d502      	bpl.n	2cd8 <delay+0x20>
    2cd2:	2b32      	cmp	r3, #50	; 0x32
    2cd4:	bf88      	it	hi
    2cd6:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2cd8:	b3b5      	cbz	r5, 2d48 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2cda:	f5c3 332f 	rsb	r3, r3, #179200	; 0x2bc00
    2cde:	f203 331f 	addw	r3, r3, #799	; 0x31f
    2ce2:	4e1d      	ldr	r6, [pc, #116]	; (2d58 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2ce4:	f8df 9068 	ldr.w	r9, [pc, #104]	; 2d50 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2ce8:	f8df 8068 	ldr.w	r8, [pc, #104]	; 2d54 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2cec:	089b      	lsrs	r3, r3, #2
    2cee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2cf2:	fba6 1303 	umull	r1, r3, r6, r3
    2cf6:	fb02 f404 	mul.w	r4, r2, r4
    2cfa:	eb04 0493 	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2cfe:	b672      	cpsid	i
	current = SYST_CVR;
    2d00:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    2d04:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2d06:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    2d0a:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2d0c:	f5c1 332f 	rsb	r3, r1, #179200	; 0x2bc00
    2d10:	f203 331f 	addw	r3, r3, #799	; 0x31f
    2d14:	089b      	lsrs	r3, r3, #2
    2d16:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2d1a:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2d1e:	ebc4 0393 	rsb	r3, r4, r3, lsr #2
    2d22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2d26:	d002      	beq.n	2d2e <delay+0x76>
    2d28:	2932      	cmp	r1, #50	; 0x32
    2d2a:	bf88      	it	hi
    2d2c:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2d2e:	fb00 3302 	mla	r3, r0, r2, r3
    2d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    2d36:	d304      	bcc.n	2d42 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    2d38:	3d01      	subs	r5, #1
    2d3a:	d005      	beq.n	2d48 <delay+0x90>
				start += 1000;
    2d3c:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    2d40:	e7dd      	b.n	2cfe <delay+0x46>
			}
			yield();
    2d42:	f001 f993 	bl	406c <yield>
		}
    2d46:	e7da      	b.n	2cfe <delay+0x46>
    2d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2d4c:	1fff2084 	.word	0x1fff2084
    2d50:	e000e018 	.word	0xe000e018
    2d54:	e000ed04 	.word	0xe000ed04
    2d58:	16c16c17 	.word	0x16c16c17

00002d5c <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    2d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2d5e:	4b4e      	ldr	r3, [pc, #312]	; (2e98 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2d60:	484e      	ldr	r0, [pc, #312]	; (2e9c <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    2d62:	f8df c15c 	ldr.w	ip, [pc, #348]	; 2ec0 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    2d66:	4c4e      	ldr	r4, [pc, #312]	; (2ea0 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    2d68:	494e      	ldr	r1, [pc, #312]	; (2ea4 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2d6a:	f8df e158 	ldr.w	lr, [pc, #344]	; 2ec4 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    2d6e:	4e4e      	ldr	r6, [pc, #312]	; (2ea8 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    2d70:	4d4e      	ldr	r5, [pc, #312]	; (2eac <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    2d72:	4f4f      	ldr	r7, [pc, #316]	; (2eb0 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2d74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    2d78:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    2d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2d7e:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    2d80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    2d84:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    2d86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2d8a:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    2d8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2d90:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2d92:	2200      	movs	r2, #0
    2d94:	6002      	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2d96:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2d98:	f64e 70ff 	movw	r0, #61439	; 0xefff
    2d9c:	f8cc 0000 	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2da0:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    2da4:	6023      	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2da6:	f50e 2e01 	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    2daa:	600b      	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    2dac:	6033      	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    2dae:	602b      	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2db0:	f506 2600 	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    2db4:	603b      	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    2db6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    2dba:	62a3      	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2dbc:	f507 2700 	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    2dc0:	628b      	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2dc2:	f504 2401 	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    2dc6:	f501 2101 	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2dca:	f606 76e8 	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    2dce:	f605 75e8 	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2dd2:	f507 677f 	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    2dd6:	3110      	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2dd8:	f10e 0e10 	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2ddc:	3420      	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2dde:	6033      	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2de0:	602b      	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    2de2:	f8ce 3000 	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    2de6:	603b      	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2de8:	600b      	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    2dea:	6023      	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2dec:	4c31      	ldr	r4, [pc, #196]	; (2eb4 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    2dee:	61bb      	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2df0:	618b      	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2df2:	2109      	movs	r1, #9
    2df4:	6021      	str	r1, [r4, #0]
	FTM1_CNT = 0;
    2df6:	f5a7 2700 	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    2dfa:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2dfe:	3f20      	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2e00:	3408      	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2e02:	603a      	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    2e04:	6020      	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    2e06:	60bb      	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2e08:	60e3      	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e0a:	f847 1c04 	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2e0e:	f504 24fd 	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    2e12:	f507 27fe 	add.w	r7, r7, #520192	; 0x7f000
    2e16:	3704      	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2e18:	f204 74fc 	addw	r4, r4, #2044	; 0x7fc
    2e1c:	6022      	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2e1e:	6038      	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    2e20:	60a3      	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    2e22:	60fb      	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e24:	f844 1c04 	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2e28:	3408      	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    2e2a:	f604 74fc 	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    2e2e:	f8c7 2ffc 	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    2e32:	6020      	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2e34:	f5a4 24e1 	sub.w	r4, r4, #460800	; 0x70800
    2e38:	f2a4 74dc 	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    2e3c:	6033      	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2e3e:	602b      	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e40:	f8c7 1ff8 	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2e44:	6821      	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2e46:	481c      	ldr	r0, [pc, #112]	; (2eb8 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2e48:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    2e4c:	6021      	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2e4e:	6801      	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2e50:	4c1a      	ldr	r4, [pc, #104]	; (2ebc <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    2e52:	f50e 4e7f 	add.w	lr, lr, #65280	; 0xff00
    2e56:	f10e 0ee8 	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    2e5a:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    2e5e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    2e62:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2e66:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    2e6a:	6001      	str	r1, [r0, #0]
	TPM1_CNT = 0;
    2e6c:	f8ce 2000 	str.w	r2, [lr]
	TPM1_MOD = 32767;
    2e70:	f647 71ff 	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2e74:	2208      	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    2e76:	6039      	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    2e78:	6033      	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    2e7a:	602b      	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2e7c:	6022      	str	r2, [r4, #0]
#endif
	analog_init();
    2e7e:	f001 f957 	bl	4130 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    2e82:	2019      	movs	r0, #25
    2e84:	f7ff ff18 	bl	2cb8 <delay>
	usb_init();
    2e88:	f000 fe2c 	bl	3ae4 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    2e8c:	f240 1013 	movw	r0, #275	; 0x113
}
    2e90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    2e94:	f7ff bf10 	b.w	2cb8 <delay>
    2e98:	e000e104 	.word	0xe000e104
    2e9c:	40038004 	.word	0x40038004
    2ea0:	40038014 	.word	0x40038014
    2ea4:	4003801c 	.word	0x4003801c
    2ea8:	40038024 	.word	0x40038024
    2eac:	4003802c 	.word	0x4003802c
    2eb0:	40038034 	.word	0x40038034
    2eb4:	40038000 	.word	0x40038000
    2eb8:	40048004 	.word	0x40048004
    2ebc:	400c9000 	.word	0x400c9000
    2ec0:	40038008 	.word	0x40038008
    2ec4:	4003800c 	.word	0x4003800c

00002ec8 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    2ec8:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    2eca:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2ecc:	4a2b      	ldr	r2, [pc, #172]	; (2f7c <usb_rx_memory+0xb4>)
    2ece:	7813      	ldrb	r3, [r2, #0]
    2ed0:	071d      	lsls	r5, r3, #28
    2ed2:	d506      	bpl.n	2ee2 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2ed4:	4b2a      	ldr	r3, [pc, #168]	; (2f80 <usb_rx_memory+0xb8>)
    2ed6:	6a19      	ldr	r1, [r3, #32]
    2ed8:	2900      	cmp	r1, #0
    2eda:	d036      	beq.n	2f4a <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2edc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    2ede:	2900      	cmp	r1, #0
    2ee0:	d041      	beq.n	2f66 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2ee2:	7853      	ldrb	r3, [r2, #1]
    2ee4:	071c      	lsls	r4, r3, #28
    2ee6:	d506      	bpl.n	2ef6 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2ee8:	4b25      	ldr	r3, [pc, #148]	; (2f80 <usb_rx_memory+0xb8>)
    2eea:	6c19      	ldr	r1, [r3, #64]	; 0x40
    2eec:	2900      	cmp	r1, #0
    2eee:	d03e      	beq.n	2f6e <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2ef0:	6c99      	ldr	r1, [r3, #72]	; 0x48
    2ef2:	2900      	cmp	r1, #0
    2ef4:	d039      	beq.n	2f6a <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2ef6:	7893      	ldrb	r3, [r2, #2]
    2ef8:	0719      	lsls	r1, r3, #28
    2efa:	d505      	bpl.n	2f08 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2efc:	4b20      	ldr	r3, [pc, #128]	; (2f80 <usb_rx_memory+0xb8>)
    2efe:	6e19      	ldr	r1, [r3, #96]	; 0x60
    2f00:	2900      	cmp	r1, #0
    2f02:	d036      	beq.n	2f72 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2f04:	6e99      	ldr	r1, [r3, #104]	; 0x68
    2f06:	b189      	cbz	r1, 2f2c <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2f08:	78d3      	ldrb	r3, [r2, #3]
    2f0a:	071b      	lsls	r3, r3, #28
    2f0c:	d507      	bpl.n	2f1e <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2f0e:	4b1c      	ldr	r3, [pc, #112]	; (2f80 <usb_rx_memory+0xb8>)
    2f10:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    2f14:	b37a      	cbz	r2, 2f76 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2f16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2f1a:	2111      	movs	r1, #17
    2f1c:	b13a      	cbz	r2, 2f2e <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2f1e:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    2f20:	4b18      	ldr	r3, [pc, #96]	; (2f84 <usb_rx_memory+0xbc>)
    2f22:	2200      	movs	r2, #0
    2f24:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2f26:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    2f28:	f000 be7c 	b.w	3c24 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2f2c:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2f2e:	4c15      	ldr	r4, [pc, #84]	; (2f84 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2f30:	4d15      	ldr	r5, [pc, #84]	; (2f88 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    2f32:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2f34:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2f38:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    2f3c:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2f3e:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2f40:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2f42:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    2f44:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2f46:	bc30      	pop	{r4, r5}
    2f48:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2f4a:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2f4c:	4c0d      	ldr	r4, [pc, #52]	; (2f84 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2f4e:	4d0f      	ldr	r5, [pc, #60]	; (2f8c <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    2f50:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2f52:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2f56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2f5a:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2f5c:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2f5e:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2f60:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    2f62:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2f64:	e7ef      	b.n	2f46 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2f66:	2105      	movs	r1, #5
    2f68:	e7e1      	b.n	2f2e <usb_rx_memory+0x66>
    2f6a:	2109      	movs	r1, #9
    2f6c:	e7df      	b.n	2f2e <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2f6e:	2208      	movs	r2, #8
    2f70:	e7ec      	b.n	2f4c <usb_rx_memory+0x84>
    2f72:	220c      	movs	r2, #12
    2f74:	e7ea      	b.n	2f4c <usb_rx_memory+0x84>
    2f76:	2210      	movs	r2, #16
    2f78:	e7e8      	b.n	2f4c <usb_rx_memory+0x84>
    2f7a:	bf00      	nop
    2f7c:	00007c50 	.word	0x00007c50
    2f80:	1fff0000 	.word	0x1fff0000
    2f84:	1fff215d 	.word	0x1fff215d
    2f88:	004000c8 	.word	0x004000c8
    2f8c:	00400088 	.word	0x00400088

00002f90 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2f90:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    2f92:	2b03      	cmp	r3, #3
    2f94:	d81d      	bhi.n	2fd2 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2f96:	4a1b      	ldr	r2, [pc, #108]	; (3004 <usb_tx+0x74>)
    2f98:	0140      	lsls	r0, r0, #5
    2f9a:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2f9e:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2fa0:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    2fa2:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    2fa4:	4c18      	ldr	r4, [pc, #96]	; (3008 <usb_tx+0x78>)
    2fa6:	5ce2      	ldrb	r2, [r4, r3]
    2fa8:	2a03      	cmp	r2, #3
    2faa:	d81b      	bhi.n	2fe4 <usb_tx+0x54>
    2fac:	e8df f002 	tbb	[pc, r2]
    2fb0:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    2fb4:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2fb6:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    2fb8:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2fba:	f010 0f08 	tst.w	r0, #8
    2fbe:	bf14      	ite	ne
    2fc0:	23c8      	movne	r3, #200	; 0xc8
    2fc2:	2388      	moveq	r3, #136	; 0x88
    2fc4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2fc8:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2fca:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2fcc:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2fce:	b662      	cpsie	i
}
    2fd0:	bc30      	pop	{r4, r5}
    2fd2:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    2fd4:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    2fd6:	2202      	movs	r2, #2
		break;
    2fd8:	e7ed      	b.n	2fb6 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    2fda:	2205      	movs	r2, #5
    2fdc:	e7eb      	b.n	2fb6 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    2fde:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    2fe0:	2204      	movs	r2, #4
		break;
    2fe2:	e7e8      	b.n	2fb6 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    2fe4:	4a09      	ldr	r2, [pc, #36]	; (300c <usb_tx+0x7c>)
    2fe6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    2fea:	b138      	cbz	r0, 2ffc <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    2fec:	4a08      	ldr	r2, [pc, #32]	; (3010 <usb_tx+0x80>)
    2fee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    2ff2:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    2ff4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    2ff8:	b662      	cpsie	i
		return;
    2ffa:	e7e9      	b.n	2fd0 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    2ffc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    3000:	4a03      	ldr	r2, [pc, #12]	; (3010 <usb_tx+0x80>)
    3002:	e7f7      	b.n	2ff4 <usb_tx+0x64>
    3004:	1fff0000 	.word	0x1fff0000
    3008:	1fff216c 	.word	0x1fff216c
    300c:	1fff2134 	.word	0x1fff2134
    3010:	1fff2144 	.word	0x1fff2144

00003014 <usb_isr>:
}



void usb_isr(void)
{
    3014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    3018:	f8df b30c 	ldr.w	fp, [pc, #780]	; 3328 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    301c:	f8df a30c 	ldr.w	sl, [pc, #780]	; 332c <usb_isr+0x318>
}



void usb_isr(void)
{
    3020:	b087      	sub	sp, #28
    3022:	e044      	b.n	30ae <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    3024:	4fab      	ldr	r7, [pc, #684]	; (32d4 <usb_isr+0x2c0>)
    3026:	ea4f 0893 	mov.w	r8, r3, lsr #2
    302a:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    302e:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3030:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    3034:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    3038:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    303a:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    303e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    3042:	2b00      	cmp	r3, #0
    3044:	f040 8102 	bne.w	324c <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    3048:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    304c:	0c1b      	lsrs	r3, r3, #16
    304e:	b299      	uxth	r1, r3
    3050:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    3054:	2b00      	cmp	r3, #0
    3056:	f000 80f0 	beq.w	323a <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    305a:	4b9f      	ldr	r3, [pc, #636]	; (32d8 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    305c:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    3060:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    3064:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    3068:	2a00      	cmp	r2, #0
    306a:	f000 82c5 	beq.w	35f8 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    306e:	4d9b      	ldr	r5, [pc, #620]	; (32dc <usb_isr+0x2c8>)
    3070:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    3074:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    3076:	4c9a      	ldr	r4, [pc, #616]	; (32e0 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    3078:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    307c:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    3080:	4419      	add	r1, r3
    3082:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    3086:	f000 fdad 	bl	3be4 <usb_malloc>
					if (packet) {
    308a:	2800      	cmp	r0, #0
    308c:	f000 82ad 	beq.w	35ea <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    3090:	4a94      	ldr	r2, [pc, #592]	; (32e4 <usb_isr+0x2d0>)
    3092:	4b95      	ldr	r3, [pc, #596]	; (32e8 <usb_isr+0x2d4>)
    3094:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    3098:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    309c:	bf18      	it	ne
    309e:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    30a0:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    30a4:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    30a8:	2308      	movs	r3, #8
    30aa:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    30ae:	f89b 4000 	ldrb.w	r4, [fp]
    30b2:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    30b4:	0761      	lsls	r1, r4, #29
    30b6:	d51a      	bpl.n	30ee <usb_isr+0xda>
		if (usb_configuration) {
    30b8:	4b8c      	ldr	r3, [pc, #560]	; (32ec <usb_isr+0x2d8>)
    30ba:	781b      	ldrb	r3, [r3, #0]
    30bc:	b1a3      	cbz	r3, 30e8 <usb_isr+0xd4>
			t = usb_reboot_timer;
    30be:	498c      	ldr	r1, [pc, #560]	; (32f0 <usb_isr+0x2dc>)
    30c0:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    30c2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    30c6:	b122      	cbz	r2, 30d2 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    30c8:	3b01      	subs	r3, #1
    30ca:	b2db      	uxtb	r3, r3
    30cc:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    30ce:	b903      	cbnz	r3, 30d2 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    30d0:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    30d2:	4988      	ldr	r1, [pc, #544]	; (32f4 <usb_isr+0x2e0>)
    30d4:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    30d6:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    30da:	b12a      	cbz	r2, 30e8 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    30dc:	3b01      	subs	r3, #1
    30de:	b2db      	uxtb	r3, r3
    30e0:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    30e2:	2b00      	cmp	r3, #0
    30e4:	f000 8257 	beq.w	3596 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    30e8:	2304      	movs	r3, #4
    30ea:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    30ee:	f004 0308 	and.w	r3, r4, #8
    30f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    30f6:	2b00      	cmp	r3, #0
    30f8:	f000 80cc 	beq.w	3294 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    30fc:	f89a 3000 	ldrb.w	r3, [sl]
    3100:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    3102:	091e      	lsrs	r6, r3, #4
    3104:	d18e      	bne.n	3024 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    3106:	089c      	lsrs	r4, r3, #2
    3108:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 32d4 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    310c:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    3110:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3114:	f3c2 0283 	ubfx	r2, r2, #2, #4
    3118:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    311a:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    311c:	2a0c      	cmp	r2, #12
    311e:	f200 8088 	bhi.w	3232 <usb_isr+0x21e>
    3122:	e8df f002 	tbb	[pc, r2]
    3126:	7c7c      	.short	0x7c7c
    3128:	86868686 	.word	0x86868686
    312c:	86478686 	.word	0x86478686
    3130:	8686      	.short	0x8686
    3132:	07          	.byte	0x07
    3133:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    3134:	6808      	ldr	r0, [r1, #0]
    3136:	4d70      	ldr	r5, [pc, #448]	; (32f8 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    3138:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    313a:	4f70      	ldr	r7, [pc, #448]	; (32fc <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    313c:	4e70      	ldr	r6, [pc, #448]	; (3300 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    313e:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3140:	b281      	uxth	r1, r0
    3142:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3146:	4b67      	ldr	r3, [pc, #412]	; (32e4 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    3148:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    314a:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    314e:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3150:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3152:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3156:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    3158:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    315c:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3160:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    3164:	4c5b      	ldr	r4, [pc, #364]	; (32d4 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3166:	f200 80e3 	bhi.w	3330 <usb_isr+0x31c>
    316a:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    316e:	f080 8346 	bcs.w	37fe <usb_isr+0x7ea>
    3172:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    3176:	f000 82fc 	beq.w	3772 <usb_isr+0x75e>
    317a:	f200 828d 	bhi.w	3698 <usb_isr+0x684>
    317e:	2980      	cmp	r1, #128	; 0x80
    3180:	f000 8377 	beq.w	3872 <usb_isr+0x85e>
    3184:	2982      	cmp	r1, #130	; 0x82
    3186:	f040 82fa 	bne.w	377e <usb_isr+0x76a>
    318a:	88a9      	ldrh	r1, [r5, #4]
    318c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    3190:	2904      	cmp	r1, #4
    3192:	f200 82f4 	bhi.w	377e <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3196:	485b      	ldr	r0, [pc, #364]	; (3304 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3198:	4c5b      	ldr	r4, [pc, #364]	; (3308 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    319a:	0089      	lsls	r1, r1, #2
    319c:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    319e:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    31a0:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    31a2:	7802      	ldrb	r2, [r0, #0]
    31a4:	0793      	lsls	r3, r2, #30
    31a6:	f140 8458 	bpl.w	3a5a <usb_isr+0xa46>
    31aa:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    31ae:	f04f 0e02 	mov.w	lr, #2
    31b2:	e342      	b.n	383a <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    31b4:	4f51      	ldr	r7, [pc, #324]	; (32fc <usb_isr+0x2e8>)
    31b6:	683a      	ldr	r2, [r7, #0]
		if (data) {
    31b8:	b332      	cbz	r2, 3208 <usb_isr+0x1f4>
			size = ep0_tx_len;
    31ba:	4b54      	ldr	r3, [pc, #336]	; (330c <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31bc:	4e50      	ldr	r6, [pc, #320]	; (3300 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    31be:	4954      	ldr	r1, [pc, #336]	; (3310 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    31c0:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31c2:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    31c4:	780d      	ldrb	r5, [r1, #0]
    31c6:	2840      	cmp	r0, #64	; 0x40
    31c8:	4686      	mov	lr, r0
    31ca:	f045 0802 	orr.w	r8, r5, #2
    31ce:	bf28      	it	cs
    31d0:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31d4:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    31d6:	f084 0401 	eor.w	r4, r4, #1
    31da:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    31dc:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31e0:	bf0c      	ite	eq
    31e2:	2488      	moveq	r4, #136	; 0x88
    31e4:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    31e6:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    31ea:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    31ec:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31f0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    31f4:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    31f6:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31f8:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    31fc:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    31fe:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3200:	2800      	cmp	r0, #0
    3202:	f000 8145 	beq.w	3490 <usb_isr+0x47c>
    3206:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    3208:	4b3b      	ldr	r3, [pc, #236]	; (32f8 <usb_isr+0x2e4>)
    320a:	881a      	ldrh	r2, [r3, #0]
    320c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    3210:	d10f      	bne.n	3232 <usb_isr+0x21e>
			setup.bRequest = 0;
    3212:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    3214:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    3216:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    3218:	4b3e      	ldr	r3, [pc, #248]	; (3314 <usb_isr+0x300>)
    321a:	701a      	strb	r2, [r3, #0]
    321c:	e009      	b.n	3232 <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    321e:	4a36      	ldr	r2, [pc, #216]	; (32f8 <usb_isr+0x2e4>)
    3220:	8810      	ldrh	r0, [r2, #0]
    3222:	f242 0221 	movw	r2, #8225	; 0x2021
    3226:	4290      	cmp	r0, r2
    3228:	f000 8137 	beq.w	349a <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    322c:	4a2d      	ldr	r2, [pc, #180]	; (32e4 <usb_isr+0x2d0>)
    322e:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3232:	4a39      	ldr	r2, [pc, #228]	; (3318 <usb_isr+0x304>)
    3234:	2301      	movs	r3, #1
    3236:	7013      	strb	r3, [r2, #0]
    3238:	e736      	b.n	30a8 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    323a:	4a2a      	ldr	r2, [pc, #168]	; (32e4 <usb_isr+0x2d0>)
    323c:	4b2a      	ldr	r3, [pc, #168]	; (32e8 <usb_isr+0x2d4>)
    323e:	f019 0f08 	tst.w	r9, #8
    3242:	bf18      	it	ne
    3244:	4613      	movne	r3, r2
    3246:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    324a:	e72d      	b.n	30a8 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    324c:	f000 fcea 	bl	3c24 <usb_free>
				packet = tx_first[endpoint];
    3250:	4a32      	ldr	r2, [pc, #200]	; (331c <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    3252:	4933      	ldr	r1, [pc, #204]	; (3320 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    3254:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    3258:	2b00      	cmp	r3, #0
    325a:	f000 81d1 	beq.w	3600 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    325e:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    3260:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    3262:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    3266:	f103 0208 	add.w	r2, r3, #8
    326a:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    326e:	2c03      	cmp	r4, #3
    3270:	d805      	bhi.n	327e <usb_isr+0x26a>
    3272:	e8df f004 	tbb	[pc, r4]
    3276:	022c      	.short	0x022c
    3278:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    327a:	2202      	movs	r2, #2
    327c:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    327e:	881a      	ldrh	r2, [r3, #0]
    3280:	f019 0f08 	tst.w	r9, #8
    3284:	bf0c      	ite	eq
    3286:	2388      	moveq	r3, #136	; 0x88
    3288:	23c8      	movne	r3, #200	; 0xc8
    328a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    328e:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    3292:	e709      	b.n	30a8 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    3294:	07e0      	lsls	r0, r4, #31
    3296:	f100 8181 	bmi.w	359c <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    329a:	0621      	lsls	r1, r4, #24
    329c:	f100 81f2 	bmi.w	3684 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    32a0:	07a2      	lsls	r2, r4, #30
    32a2:	d506      	bpl.n	32b2 <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    32a4:	4a1f      	ldr	r2, [pc, #124]	; (3324 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    32a6:	4920      	ldr	r1, [pc, #128]	; (3328 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    32a8:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    32aa:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    32ac:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    32ae:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    32b0:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    32b2:	06e3      	lsls	r3, r4, #27
    32b4:	d502      	bpl.n	32bc <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    32b6:	4b1c      	ldr	r3, [pc, #112]	; (3328 <usb_isr+0x314>)
    32b8:	2210      	movs	r2, #16
    32ba:	701a      	strb	r2, [r3, #0]
	}

}
    32bc:	b007      	add	sp, #28
    32be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    32c2:	2204      	movs	r2, #4
    32c4:	558a      	strb	r2, [r1, r6]
						break;
    32c6:	e7da      	b.n	327e <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    32c8:	2205      	movs	r2, #5
    32ca:	558a      	strb	r2, [r1, r6]
						break;
    32cc:	e7d7      	b.n	327e <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    32ce:	2203      	movs	r2, #3
    32d0:	558a      	strb	r2, [r1, r6]
						break;
    32d2:	e7d4      	b.n	327e <usb_isr+0x26a>
    32d4:	1fff0000 	.word	0x1fff0000
    32d8:	1fff20e0 	.word	0x1fff20e0
    32dc:	1fff208c 	.word	0x1fff208c
    32e0:	1fff24d8 	.word	0x1fff24d8
    32e4:	004000c8 	.word	0x004000c8
    32e8:	00400088 	.word	0x00400088
    32ec:	1fff2168 	.word	0x1fff2168
    32f0:	1fff20f1 	.word	0x1fff20f1
    32f4:	1fff2170 	.word	0x1fff2170
    32f8:	1fff2154 	.word	0x1fff2154
    32fc:	1fff2088 	.word	0x1fff2088
    3300:	1fff20f0 	.word	0x1fff20f0
    3304:	400720c0 	.word	0x400720c0
    3308:	1fff2160 	.word	0x1fff2160
    330c:	1fff209c 	.word	0x1fff209c
    3310:	1fff215c 	.word	0x1fff215c
    3314:	40072098 	.word	0x40072098
    3318:	40072094 	.word	0x40072094
    331c:	1fff2134 	.word	0x1fff2134
    3320:	1fff216c 	.word	0x1fff216c
    3324:	40072088 	.word	0x40072088
    3328:	40072080 	.word	0x40072080
    332c:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3330:	f242 0021 	movw	r0, #8225	; 0x2021
    3334:	4281      	cmp	r1, r0
    3336:	f000 812a 	beq.w	358e <usb_isr+0x57a>
    333a:	f200 80d8 	bhi.w	34ee <usb_isr+0x4da>
    333e:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    3342:	f000 8276 	beq.w	3832 <usb_isr+0x81e>
    3346:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    334a:	f040 8218 	bne.w	377e <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    334e:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    3350:	49b3      	ldr	r1, [pc, #716]	; (3620 <usb_isr+0x60c>)
    3352:	78a8      	ldrb	r0, [r5, #2]
    3354:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    3356:	0612      	lsls	r2, r2, #24
    3358:	f100 833a 	bmi.w	39d0 <usb_isr+0x9bc>
    335c:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    3360:	49b0      	ldr	r1, [pc, #704]	; (3624 <usb_isr+0x610>)
    3362:	0613      	lsls	r3, r2, #24
    3364:	f100 830c 	bmi.w	3980 <usb_isr+0x96c>
    3368:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    336c:	49ad      	ldr	r1, [pc, #692]	; (3624 <usb_isr+0x610>)
    336e:	0615      	lsls	r5, r2, #24
    3370:	f100 8301 	bmi.w	3976 <usb_isr+0x962>
    3374:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    3378:	49aa      	ldr	r1, [pc, #680]	; (3624 <usb_isr+0x610>)
    337a:	0614      	lsls	r4, r2, #24
    337c:	f100 82f6 	bmi.w	396c <usb_isr+0x958>
    3380:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    3384:	49a7      	ldr	r1, [pc, #668]	; (3624 <usb_isr+0x610>)
    3386:	0610      	lsls	r0, r2, #24
    3388:	f100 834a 	bmi.w	3a20 <usb_isr+0xa0c>
    338c:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    3390:	49a4      	ldr	r1, [pc, #656]	; (3624 <usb_isr+0x610>)
    3392:	0612      	lsls	r2, r2, #24
    3394:	f100 833f 	bmi.w	3a16 <usb_isr+0xa02>
    3398:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    339c:	49a1      	ldr	r1, [pc, #644]	; (3624 <usb_isr+0x610>)
    339e:	0613      	lsls	r3, r2, #24
    33a0:	f100 8334 	bmi.w	3a0c <usb_isr+0x9f8>
    33a4:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    33a8:	499e      	ldr	r1, [pc, #632]	; (3624 <usb_isr+0x610>)
    33aa:	0615      	lsls	r5, r2, #24
    33ac:	f100 8329 	bmi.w	3a02 <usb_isr+0x9ee>
    33b0:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    33b4:	499b      	ldr	r1, [pc, #620]	; (3624 <usb_isr+0x610>)
    33b6:	0614      	lsls	r4, r2, #24
    33b8:	f100 831e 	bmi.w	39f8 <usb_isr+0x9e4>
    33bc:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    33c0:	4998      	ldr	r1, [pc, #608]	; (3624 <usb_isr+0x610>)
    33c2:	0610      	lsls	r0, r2, #24
    33c4:	f100 8313 	bmi.w	39ee <usb_isr+0x9da>
    33c8:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    33cc:	4995      	ldr	r1, [pc, #596]	; (3624 <usb_isr+0x610>)
    33ce:	0612      	lsls	r2, r2, #24
    33d0:	f100 8308 	bmi.w	39e4 <usb_isr+0x9d0>
    33d4:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    33d8:	4992      	ldr	r1, [pc, #584]	; (3624 <usb_isr+0x610>)
    33da:	0613      	lsls	r3, r2, #24
    33dc:	f100 82fd 	bmi.w	39da <usb_isr+0x9c6>
    33e0:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    33e4:	498f      	ldr	r1, [pc, #572]	; (3624 <usb_isr+0x610>)
    33e6:	0615      	lsls	r5, r2, #24
    33e8:	f100 8331 	bmi.w	3a4e <usb_isr+0xa3a>
    33ec:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    33f0:	498c      	ldr	r1, [pc, #560]	; (3624 <usb_isr+0x610>)
    33f2:	0614      	lsls	r4, r2, #24
    33f4:	f100 8325 	bmi.w	3a42 <usb_isr+0xa2e>
    33f8:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    33fc:	4989      	ldr	r1, [pc, #548]	; (3624 <usb_isr+0x610>)
    33fe:	0610      	lsls	r0, r2, #24
    3400:	f100 8319 	bmi.w	3a36 <usb_isr+0xa22>
    3404:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    3408:	4986      	ldr	r1, [pc, #536]	; (3624 <usb_isr+0x610>)
    340a:	0612      	lsls	r2, r2, #24
    340c:	f100 830d 	bmi.w	3a2a <usb_isr+0xa16>
    3410:	4885      	ldr	r0, [pc, #532]	; (3628 <usb_isr+0x614>)
    3412:	4a86      	ldr	r2, [pc, #536]	; (362c <usb_isr+0x618>)
    3414:	4986      	ldr	r1, [pc, #536]	; (3630 <usb_isr+0x61c>)
    3416:	9001      	str	r0, [sp, #4]
    3418:	4886      	ldr	r0, [pc, #536]	; (3634 <usb_isr+0x620>)
    341a:	4d87      	ldr	r5, [pc, #540]	; (3638 <usb_isr+0x624>)
    341c:	4c87      	ldr	r4, [pc, #540]	; (363c <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    341e:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    3420:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3422:	9605      	str	r6, [sp, #20]
    3424:	9502      	str	r5, [sp, #8]
    3426:	4680      	mov	r8, r0
    3428:	460f      	mov	r7, r1
    342a:	4616      	mov	r6, r2
    342c:	461d      	mov	r5, r3
    342e:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3430:	6830      	ldr	r0, [r6, #0]
			while (p) {
    3432:	b128      	cbz	r0, 3440 <usb_isr+0x42c>
				n = p->next;
    3434:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    3436:	f000 fbf5 	bl	3c24 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    343a:	4620      	mov	r0, r4
    343c:	2c00      	cmp	r4, #0
    343e:	d1f9      	bne.n	3434 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3440:	2300      	movs	r3, #0
    3442:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    3444:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    3446:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3448:	461a      	mov	r2, r3
    344a:	2300      	movs	r3, #0
    344c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    3450:	b128      	cbz	r0, 345e <usb_isr+0x44a>
				n = p->next;
    3452:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    3454:	f000 fbe6 	bl	3c24 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    3458:	4620      	mov	r0, r4
    345a:	2c00      	cmp	r4, #0
    345c:	d1f9      	bne.n	3452 <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    345e:	2200      	movs	r2, #0
    3460:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    3462:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3464:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    3468:	4611      	mov	r1, r2
    346a:	2200      	movs	r2, #0
    346c:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    3470:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    3472:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3474:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    3476:	f04f 0100 	mov.w	r1, #0
    347a:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    347e:	2b03      	cmp	r3, #3
    3480:	f200 812b 	bhi.w	36da <usb_isr+0x6c6>
    3484:	e8df f013 	tbh	[pc, r3, lsl #1]
    3488:	01250170 	.word	0x01250170
    348c:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3490:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    3494:	bf18      	it	ne
    3496:	2200      	movne	r2, #0
    3498:	e6b5      	b.n	3206 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    349a:	4a69      	ldr	r2, [pc, #420]	; (3640 <usb_isr+0x62c>)
    349c:	780d      	ldrb	r5, [r1, #0]
    349e:	7848      	ldrb	r0, [r1, #1]
    34a0:	7015      	strb	r5, [r2, #0]
    34a2:	7050      	strb	r0, [r2, #1]
    34a4:	788d      	ldrb	r5, [r1, #2]
    34a6:	78c8      	ldrb	r0, [r1, #3]
    34a8:	7095      	strb	r5, [r2, #2]
    34aa:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    34ac:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    34ae:	790d      	ldrb	r5, [r1, #4]
    34b0:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    34b2:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    34b4:	794d      	ldrb	r5, [r1, #5]
    34b6:	7989      	ldrb	r1, [r1, #6]
    34b8:	7155      	strb	r5, [r2, #5]
    34ba:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    34bc:	f000 819b 	beq.w	37f6 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    34c0:	4960      	ldr	r1, [pc, #384]	; (3644 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    34c2:	4e61      	ldr	r6, [pc, #388]	; (3648 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    34c4:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    34c6:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    34c8:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    34cc:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    34ce:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    34d2:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    34d4:	bf0c      	ite	eq
    34d6:	2188      	moveq	r1, #136	; 0x88
    34d8:	21c8      	movne	r1, #200	; 0xc8
    34da:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    34de:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    34e2:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    34e6:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    34e8:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    34ea:	6051      	str	r1, [r2, #4]
    34ec:	e69e      	b.n	322c <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    34ee:	f242 2021 	movw	r0, #8737	; 0x2221
    34f2:	4281      	cmp	r1, r0
    34f4:	f040 81cb 	bne.w	388e <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    34f8:	4b54      	ldr	r3, [pc, #336]	; (364c <usb_isr+0x638>)
    34fa:	4c55      	ldr	r4, [pc, #340]	; (3650 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    34fc:	4955      	ldr	r1, [pc, #340]	; (3654 <usb_isr+0x640>)
    34fe:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3500:	681d      	ldr	r5, [r3, #0]
    3502:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    3504:	f8cd e004 	str.w	lr, [sp, #4]
    3508:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    350a:	2000      	movs	r0, #0
    350c:	9002      	str	r0, [sp, #8]
    350e:	4680      	mov	r8, r0
    3510:	4684      	mov	ip, r0
    3512:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3514:	494b      	ldr	r1, [pc, #300]	; (3644 <usb_isr+0x630>)
    3516:	780d      	ldrb	r5, [r1, #0]
    3518:	f045 0e02 	orr.w	lr, r5, #2
    351c:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    3520:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3522:	9b01      	ldr	r3, [sp, #4]
    3524:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3526:	9b03      	ldr	r3, [sp, #12]
    3528:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    352a:	bf0c      	ite	eq
    352c:	2488      	moveq	r4, #136	; 0x88
    352e:	24c8      	movne	r4, #200	; 0xc8
    3530:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3534:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3538:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    353c:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    353e:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3540:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 3624 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    3544:	4b40      	ldr	r3, [pc, #256]	; (3648 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    3546:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 3644 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    354a:	2800      	cmp	r0, #0
    354c:	f040 811e 	bne.w	378c <usb_isr+0x778>
    3550:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    3554:	d11b      	bne.n	358e <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3556:	f044 0c02 	orr.w	ip, r4, #2
    355a:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    355e:	9c02      	ldr	r4, [sp, #8]
    3560:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 3624 <usb_isr+0x610>
    3564:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3566:	2a00      	cmp	r2, #0
    3568:	f040 8126 	bne.w	37b8 <usb_isr+0x7a4>
    356c:	0402      	lsls	r2, r0, #16
    356e:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    3572:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3576:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    357a:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    357c:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    357e:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3580:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3582:	2840      	cmp	r0, #64	; 0x40
    3584:	d103      	bne.n	358e <usb_isr+0x57a>
    3586:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3588:	4a33      	ldr	r2, [pc, #204]	; (3658 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    358a:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    358c:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    358e:	4a33      	ldr	r2, [pc, #204]	; (365c <usb_isr+0x648>)
    3590:	2301      	movs	r3, #1
    3592:	7013      	strb	r3, [r2, #0]
    3594:	e64d      	b.n	3232 <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    3596:	f000 fb79 	bl	3c8c <usb_serial_flush_callback>
    359a:	e5a5      	b.n	30e8 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    359c:	4b21      	ldr	r3, [pc, #132]	; (3624 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    359e:	482f      	ldr	r0, [pc, #188]	; (365c <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    35a0:	4928      	ldr	r1, [pc, #160]	; (3644 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    35a2:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    35a4:	f04f 0e02 	mov.w	lr, #2
    35a8:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    35ac:	4f2c      	ldr	r7, [pc, #176]	; (3660 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    35ae:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    35b0:	492c      	ldr	r1, [pc, #176]	; (3664 <usb_isr+0x650>)
    35b2:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    35b4:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    35b6:	4e2c      	ldr	r6, [pc, #176]	; (3668 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    35b8:	4d2c      	ldr	r5, [pc, #176]	; (366c <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    35ba:	4c2d      	ldr	r4, [pc, #180]	; (3670 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    35bc:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    35be:	210d      	movs	r1, #13
    35c0:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    35c2:	21ff      	movs	r1, #255	; 0xff
    35c4:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    35c6:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 3680 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    35ca:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    35cc:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    35ce:	4d29      	ldr	r5, [pc, #164]	; (3674 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    35d0:	4a29      	ldr	r2, [pc, #164]	; (3678 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    35d2:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    35d6:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    35d8:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    35da:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    35de:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    35e0:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    35e2:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    35e4:	b007      	add	sp, #28
    35e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    35ea:	4a24      	ldr	r2, [pc, #144]	; (367c <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    35ec:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    35f0:	7813      	ldrb	r3, [r2, #0]
    35f2:	3301      	adds	r3, #1
    35f4:	7013      	strb	r3, [r2, #0]
    35f6:	e557      	b.n	30a8 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    35f8:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    35fc:	4d0e      	ldr	r5, [pc, #56]	; (3638 <usb_isr+0x624>)
    35fe:	e53a      	b.n	3076 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3600:	5d8b      	ldrb	r3, [r1, r6]
    3602:	2b03      	cmp	r3, #3
    3604:	f200 80f0 	bhi.w	37e8 <usb_isr+0x7d4>
    3608:	a201      	add	r2, pc, #4	; (adr r2, 3610 <usb_isr+0x5fc>)
    360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    360e:	bf00      	nop
    3610:	000030a9 	.word	0x000030a9
    3614:	000030a9 	.word	0x000030a9
    3618:	000036cd 	.word	0x000036cd
    361c:	000036c7 	.word	0x000036c7
    3620:	1fff2168 	.word	0x1fff2168
    3624:	1fff0000 	.word	0x1fff0000
    3628:	1fff2144 	.word	0x1fff2144
    362c:	1fff20e0 	.word	0x1fff20e0
    3630:	1fff2134 	.word	0x1fff2134
    3634:	1fff216c 	.word	0x1fff216c
    3638:	1fff208c 	.word	0x1fff208c
    363c:	1fff24d8 	.word	0x1fff24d8
    3640:	1fff24e0 	.word	0x1fff24e0
    3644:	1fff215c 	.word	0x1fff215c
    3648:	1fff20f0 	.word	0x1fff20f0
    364c:	1fff2084 	.word	0x1fff2084
    3650:	1fff24e8 	.word	0x1fff24e8
    3654:	1fff217c 	.word	0x1fff217c
    3658:	1fff209c 	.word	0x1fff209c
    365c:	40072094 	.word	0x40072094
    3660:	400720c0 	.word	0x400720c0
    3664:	00400088 	.word	0x00400088
    3668:	40072088 	.word	0x40072088
    366c:	40072080 	.word	0x40072080
    3670:	40072098 	.word	0x40072098
    3674:	1fff20a0 	.word	0x1fff20a0
    3678:	1fff20f4 	.word	0x1fff20f4
    367c:	1fff215d 	.word	0x1fff215d
    3680:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3684:	49c1      	ldr	r1, [pc, #772]	; (398c <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    3686:	4bc2      	ldr	r3, [pc, #776]	; (3990 <usb_isr+0x97c>)
    3688:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    368a:	200d      	movs	r0, #13
    368c:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    368e:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3690:	07a2      	lsls	r2, r4, #30
    3692:	f57f ae0e 	bpl.w	32b2 <usb_isr+0x29e>
    3696:	e605      	b.n	32a4 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3698:	f240 3202 	movw	r2, #770	; 0x302
    369c:	4291      	cmp	r1, r2
    369e:	f040 80ee 	bne.w	387e <usb_isr+0x86a>
    36a2:	88a9      	ldrh	r1, [r5, #4]
    36a4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    36a8:	2904      	cmp	r1, #4
    36aa:	d868      	bhi.n	377e <usb_isr+0x76a>
    36ac:	886a      	ldrh	r2, [r5, #2]
    36ae:	2a00      	cmp	r2, #0
    36b0:	d165      	bne.n	377e <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    36b2:	48b6      	ldr	r0, [pc, #728]	; (398c <usb_isr+0x978>)
    36b4:	f8cd e004 	str.w	lr, [sp, #4]
    36b8:	0089      	lsls	r1, r1, #2
    36ba:	4408      	add	r0, r1
    36bc:	7801      	ldrb	r1, [r0, #0]
    36be:	f041 0102 	orr.w	r1, r1, #2
    36c2:	7001      	strb	r1, [r0, #0]
    36c4:	e721      	b.n	350a <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    36c6:	2301      	movs	r3, #1
    36c8:	558b      	strb	r3, [r1, r6]
						break;
    36ca:	e4ed      	b.n	30a8 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    36cc:	2300      	movs	r3, #0
    36ce:	558b      	strb	r3, [r1, r6]
						break;
    36d0:	e4ea      	b.n	30a8 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    36d2:	f04f 0301 	mov.w	r3, #1
    36d6:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    36da:	3501      	adds	r5, #1
    36dc:	2d04      	cmp	r5, #4
    36de:	f106 0604 	add.w	r6, r6, #4
    36e2:	f107 0704 	add.w	r7, r7, #4
    36e6:	f108 0801 	add.w	r8, r8, #1
    36ea:	f47f aea1 	bne.w	3430 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    36ee:	4ca9      	ldr	r4, [pc, #676]	; (3994 <usb_isr+0x980>)
			*reg = epconf;
    36f0:	4ba9      	ldr	r3, [pc, #676]	; (3998 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    36f2:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    36f4:	4da9      	ldr	r5, [pc, #676]	; (399c <usb_isr+0x988>)
    36f6:	9f04      	ldr	r7, [sp, #16]
    36f8:	9e05      	ldr	r6, [sp, #20]
    36fa:	2100      	movs	r1, #0
    36fc:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    36fe:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3700:	0713      	lsls	r3, r2, #28
    3702:	f100 8105 	bmi.w	3910 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3706:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    3708:	49a5      	ldr	r1, [pc, #660]	; (39a0 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    370a:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 39ac <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    370e:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3710:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3712:	f04f 0100 	mov.w	r1, #0
    3716:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    371a:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    371e:	f100 80e0 	bmi.w	38e2 <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3722:	49a0      	ldr	r1, [pc, #640]	; (39a4 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3724:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    3726:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3728:	2100      	movs	r1, #0
    372a:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    372e:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3732:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3734:	f8df 8274 	ldr.w	r8, [pc, #628]	; 39ac <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3738:	f100 8101 	bmi.w	393e <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    373c:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    373e:	499a      	ldr	r1, [pc, #616]	; (39a8 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3740:	4c9a      	ldr	r4, [pc, #616]	; (39ac <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3742:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3744:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3746:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3748:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    374c:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3750:	f100 80b0 	bmi.w	38b4 <usb_isr+0x8a0>
    3754:	7833      	ldrb	r3, [r6, #0]
    3756:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3758:	2100      	movs	r1, #0
    375a:	f083 0201 	eor.w	r2, r3, #1
    375e:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    3762:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    3766:	e6d0      	b.n	350a <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3768:	f04f 0300 	mov.w	r3, #0
    376c:	f888 3000 	strb.w	r3, [r8]
    3770:	e7b3      	b.n	36da <usb_isr+0x6c6>
    3772:	88a9      	ldrh	r1, [r5, #4]
    3774:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3778:	2904      	cmp	r1, #4
    377a:	f240 808d 	bls.w	3898 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    377e:	4a83      	ldr	r2, [pc, #524]	; (398c <usb_isr+0x978>)
    3780:	230f      	movs	r3, #15
    3782:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3784:	4a8a      	ldr	r2, [pc, #552]	; (39b0 <usb_isr+0x99c>)
    3786:	2301      	movs	r3, #1
    3788:	7013      	strb	r3, [r2, #0]
    378a:	e552      	b.n	3232 <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    378c:	2840      	cmp	r0, #64	; 0x40
    378e:	f67f aee2 	bls.w	3556 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3792:	f044 0402 	orr.w	r4, r4, #2
    3796:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    379a:	9e02      	ldr	r6, [sp, #8]
    379c:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    379e:	b1ba      	cbz	r2, 37d0 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    37a0:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    37a4:	4a83      	ldr	r2, [pc, #524]	; (39b4 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    37a6:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    37a8:	4633      	mov	r3, r6
    37aa:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    37ac:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    37b0:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    37b2:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    37b6:	e6e7      	b.n	3588 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    37b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    37bc:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    37be:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    37c0:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    37c2:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    37c4:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    37c8:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    37ca:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    37ce:	e6d8      	b.n	3582 <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    37d0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    37d4:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    37d6:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    37d8:	4a77      	ldr	r2, [pc, #476]	; (39b8 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    37da:	f888 5000 	strb.w	r5, [r8]
    37de:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    37e0:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    37e2:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    37e6:	e6cf      	b.n	3588 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    37e8:	f019 0f08 	tst.w	r9, #8
    37ec:	bf0c      	ite	eq
    37ee:	2302      	moveq	r3, #2
    37f0:	2303      	movne	r3, #3
    37f2:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    37f4:	e458      	b.n	30a8 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    37f6:	4a71      	ldr	r2, [pc, #452]	; (39bc <usb_isr+0x9a8>)
    37f8:	210f      	movs	r1, #15
    37fa:	7011      	strb	r1, [r2, #0]
    37fc:	e660      	b.n	34c0 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    37fe:	4a70      	ldr	r2, [pc, #448]	; (39c0 <usb_isr+0x9ac>)
    3800:	6854      	ldr	r4, [r2, #4]
    3802:	2c00      	cmp	r4, #0
    3804:	d0bb      	beq.n	377e <usb_isr+0x76a>
    3806:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3808:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    380c:	e003      	b.n	3816 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    380e:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    3810:	6854      	ldr	r4, [r2, #4]
    3812:	2c00      	cmp	r4, #0
    3814:	d0b3      	beq.n	377e <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3816:	8813      	ldrh	r3, [r2, #0]
    3818:	4283      	cmp	r3, r0
    381a:	d1f8      	bne.n	380e <usb_isr+0x7fa>
    381c:	8853      	ldrh	r3, [r2, #2]
    381e:	4573      	cmp	r3, lr
    3820:	d1f5      	bne.n	380e <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3822:	0a00      	lsrs	r0, r0, #8
    3824:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3826:	bf0c      	ite	eq
    3828:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    382c:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    3830:	e003      	b.n	383a <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3832:	4a64      	ldr	r2, [pc, #400]	; (39c4 <usb_isr+0x9b0>)
    3834:	4c64      	ldr	r4, [pc, #400]	; (39c8 <usb_isr+0x9b4>)
    3836:	7812      	ldrb	r2, [r2, #0]
    3838:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    383a:	88e8      	ldrh	r0, [r5, #6]
    383c:	4570      	cmp	r0, lr
    383e:	f080 813f 	bcs.w	3ac0 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3842:	4962      	ldr	r1, [pc, #392]	; (39cc <usb_isr+0x9b8>)
    3844:	780d      	ldrb	r5, [r1, #0]
    3846:	2840      	cmp	r0, #64	; 0x40
    3848:	4684      	mov	ip, r0
    384a:	f045 0e02 	orr.w	lr, r5, #2
    384e:	bf28      	it	cs
    3850:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    3854:	eb04 030c 	add.w	r3, r4, ip
    3858:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    385c:	9302      	str	r3, [sp, #8]
    385e:	2301      	movs	r3, #1
    3860:	6054      	str	r4, [r2, #4]
    3862:	ebcc 0000 	rsb	r0, ip, r0
    3866:	ea4f 480c 	mov.w	r8, ip, lsl #16
    386a:	2200      	movs	r2, #0
    386c:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    386e:	24c8      	movs	r4, #200	; 0xc8
    3870:	e65e      	b.n	3530 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3872:	4c55      	ldr	r4, [pc, #340]	; (39c8 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    3874:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3878:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    387a:	7062      	strb	r2, [r4, #1]
    387c:	e7dd      	b.n	383a <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    387e:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    3882:	f47f af7c 	bne.w	377e <usb_isr+0x76a>
    3886:	2301      	movs	r3, #1
    3888:	2200      	movs	r2, #0
    388a:	9301      	str	r3, [sp, #4]
    388c:	e63d      	b.n	350a <usb_isr+0x4f6>
    388e:	f242 3221 	movw	r2, #8993	; 0x2321
    3892:	4291      	cmp	r1, r2
    3894:	d0f7      	beq.n	3886 <usb_isr+0x872>
    3896:	e772      	b.n	377e <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3898:	886a      	ldrh	r2, [r5, #2]
    389a:	2a00      	cmp	r2, #0
    389c:	f47f af6f 	bne.w	377e <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    38a0:	483a      	ldr	r0, [pc, #232]	; (398c <usb_isr+0x978>)
    38a2:	f8cd e004 	str.w	lr, [sp, #4]
    38a6:	0089      	lsls	r1, r1, #2
    38a8:	4408      	add	r0, r1
    38aa:	7801      	ldrb	r1, [r0, #0]
    38ac:	f021 0102 	bic.w	r1, r1, #2
    38b0:	7001      	strb	r1, [r0, #0]
    38b2:	e62a      	b.n	350a <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    38b4:	f000 f996 	bl	3be4 <usb_malloc>
				if (p) {
    38b8:	2800      	cmp	r0, #0
    38ba:	f000 80ef 	beq.w	3a9c <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    38be:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    38c0:	4a3d      	ldr	r2, [pc, #244]	; (39b8 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    38c2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    38c6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    38ca:	f000 f98b 	bl	3be4 <usb_malloc>
				if (p) {
    38ce:	2800      	cmp	r0, #0
    38d0:	f000 80de 	beq.w	3a90 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    38d4:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    38d6:	4a37      	ldr	r2, [pc, #220]	; (39b4 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    38d8:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    38dc:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    38e0:	e738      	b.n	3754 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    38e2:	f000 f97f 	bl	3be4 <usb_malloc>
				if (p) {
    38e6:	2800      	cmp	r0, #0
    38e8:	f000 80c0 	beq.w	3a6c <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    38ec:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    38ee:	4a32      	ldr	r2, [pc, #200]	; (39b8 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    38f0:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    38f4:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    38f8:	f000 f974 	bl	3be4 <usb_malloc>
				if (p) {
    38fc:	2800      	cmp	r0, #0
    38fe:	f000 80af 	beq.w	3a60 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    3902:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3904:	4a2b      	ldr	r2, [pc, #172]	; (39b4 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3906:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    390a:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    390e:	e708      	b.n	3722 <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3910:	f000 f968 	bl	3be4 <usb_malloc>
				if (p) {
    3914:	2800      	cmp	r0, #0
    3916:	f000 80cd 	beq.w	3ab4 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    391a:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    391c:	4a26      	ldr	r2, [pc, #152]	; (39b8 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    391e:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3922:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3926:	f000 f95d 	bl	3be4 <usb_malloc>
				if (p) {
    392a:	2800      	cmp	r0, #0
    392c:	f000 80bc 	beq.w	3aa8 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    3930:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3932:	4a20      	ldr	r2, [pc, #128]	; (39b4 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3934:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3938:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    393c:	e6e3      	b.n	3706 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    393e:	f000 f951 	bl	3be4 <usb_malloc>
				if (p) {
    3942:	2800      	cmp	r0, #0
    3944:	f000 809e 	beq.w	3a84 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    3948:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    394a:	4a1b      	ldr	r2, [pc, #108]	; (39b8 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    394c:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3950:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3954:	f000 f946 	bl	3be4 <usb_malloc>
				if (p) {
    3958:	2800      	cmp	r0, #0
    395a:	f000 808d 	beq.w	3a78 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    395e:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3960:	4a14      	ldr	r2, [pc, #80]	; (39b4 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3962:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3966:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    396a:	e6e7      	b.n	373c <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    396c:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    396e:	3808      	subs	r0, #8
    3970:	f000 f958 	bl	3c24 <usb_free>
    3974:	e504      	b.n	3380 <usb_isr+0x36c>
    3976:	6b48      	ldr	r0, [r1, #52]	; 0x34
    3978:	3808      	subs	r0, #8
    397a:	f000 f953 	bl	3c24 <usb_free>
    397e:	e4f9      	b.n	3374 <usb_isr+0x360>
    3980:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    3982:	3808      	subs	r0, #8
    3984:	f000 f94e 	bl	3c24 <usb_free>
    3988:	e4ee      	b.n	3368 <usb_isr+0x354>
    398a:	bf00      	nop
    398c:	400720c0 	.word	0x400720c0
    3990:	40072080 	.word	0x40072080
    3994:	00007c50 	.word	0x00007c50
    3998:	400720c4 	.word	0x400720c4
    399c:	1fff215d 	.word	0x1fff215d
    39a0:	400720c8 	.word	0x400720c8
    39a4:	400720cc 	.word	0x400720cc
    39a8:	400720d0 	.word	0x400720d0
    39ac:	1fff0000 	.word	0x1fff0000
    39b0:	40072094 	.word	0x40072094
    39b4:	004000c8 	.word	0x004000c8
    39b8:	00400088 	.word	0x00400088
    39bc:	1fff20f1 	.word	0x1fff20f1
    39c0:	00007c54 	.word	0x00007c54
    39c4:	1fff2168 	.word	0x1fff2168
    39c8:	1fff2160 	.word	0x1fff2160
    39cc:	1fff215c 	.word	0x1fff215c
    39d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    39d2:	3808      	subs	r0, #8
    39d4:	f000 f926 	bl	3c24 <usb_free>
    39d8:	e4c0      	b.n	335c <usb_isr+0x348>
    39da:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    39dc:	3808      	subs	r0, #8
    39de:	f000 f921 	bl	3c24 <usb_free>
    39e2:	e4fd      	b.n	33e0 <usb_isr+0x3cc>
    39e4:	6f48      	ldr	r0, [r1, #116]	; 0x74
    39e6:	3808      	subs	r0, #8
    39e8:	f000 f91c 	bl	3c24 <usb_free>
    39ec:	e4f2      	b.n	33d4 <usb_isr+0x3c0>
    39ee:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    39f0:	3808      	subs	r0, #8
    39f2:	f000 f917 	bl	3c24 <usb_free>
    39f6:	e4e7      	b.n	33c8 <usb_isr+0x3b4>
    39f8:	6e48      	ldr	r0, [r1, #100]	; 0x64
    39fa:	3808      	subs	r0, #8
    39fc:	f000 f912 	bl	3c24 <usb_free>
    3a00:	e4dc      	b.n	33bc <usb_isr+0x3a8>
    3a02:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    3a04:	3808      	subs	r0, #8
    3a06:	f000 f90d 	bl	3c24 <usb_free>
    3a0a:	e4d1      	b.n	33b0 <usb_isr+0x39c>
    3a0c:	6d48      	ldr	r0, [r1, #84]	; 0x54
    3a0e:	3808      	subs	r0, #8
    3a10:	f000 f908 	bl	3c24 <usb_free>
    3a14:	e4c6      	b.n	33a4 <usb_isr+0x390>
    3a16:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    3a18:	3808      	subs	r0, #8
    3a1a:	f000 f903 	bl	3c24 <usb_free>
    3a1e:	e4bb      	b.n	3398 <usb_isr+0x384>
    3a20:	6c48      	ldr	r0, [r1, #68]	; 0x44
    3a22:	3808      	subs	r0, #8
    3a24:	f000 f8fe 	bl	3c24 <usb_free>
    3a28:	e4b0      	b.n	338c <usb_isr+0x378>
    3a2a:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    3a2e:	3808      	subs	r0, #8
    3a30:	f000 f8f8 	bl	3c24 <usb_free>
    3a34:	e4ec      	b.n	3410 <usb_isr+0x3fc>
    3a36:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    3a3a:	3808      	subs	r0, #8
    3a3c:	f000 f8f2 	bl	3c24 <usb_free>
    3a40:	e4e0      	b.n	3404 <usb_isr+0x3f0>
    3a42:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    3a46:	3808      	subs	r0, #8
    3a48:	f000 f8ec 	bl	3c24 <usb_free>
    3a4c:	e4d4      	b.n	33f8 <usb_isr+0x3e4>
    3a4e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    3a52:	3808      	subs	r0, #8
    3a54:	f000 f8e6 	bl	3c24 <usb_free>
    3a58:	e4c8      	b.n	33ec <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3a5a:	f04f 0e02 	mov.w	lr, #2
    3a5e:	e6ec      	b.n	383a <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3a60:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3a62:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    3a66:	3201      	adds	r2, #1
    3a68:	702a      	strb	r2, [r5, #0]
    3a6a:	e65a      	b.n	3722 <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3a6c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3a6e:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    3a72:	3201      	adds	r2, #1
    3a74:	702a      	strb	r2, [r5, #0]
    3a76:	e73f      	b.n	38f8 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3a78:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3a7a:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    3a7e:	3201      	adds	r2, #1
    3a80:	702a      	strb	r2, [r5, #0]
    3a82:	e65b      	b.n	373c <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3a84:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3a86:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    3a8a:	3201      	adds	r2, #1
    3a8c:	702a      	strb	r2, [r5, #0]
    3a8e:	e761      	b.n	3954 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3a90:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3a92:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    3a96:	3201      	adds	r2, #1
    3a98:	702a      	strb	r2, [r5, #0]
    3a9a:	e65b      	b.n	3754 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3a9c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3a9e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    3aa2:	3201      	adds	r2, #1
    3aa4:	702a      	strb	r2, [r5, #0]
    3aa6:	e710      	b.n	38ca <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3aa8:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3aaa:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    3aae:	3201      	adds	r2, #1
    3ab0:	702a      	strb	r2, [r5, #0]
    3ab2:	e628      	b.n	3706 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3ab4:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3ab6:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    3aba:	3201      	adds	r2, #1
    3abc:	702a      	strb	r2, [r5, #0]
    3abe:	e732      	b.n	3926 <usb_isr+0x912>
    3ac0:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    3ac4:	46f4      	mov	ip, lr
    3ac6:	bf28      	it	cs
    3ac8:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    3acc:	eb04 030c 	add.w	r3, r4, ip
    3ad0:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3ad2:	2301      	movs	r3, #1
    3ad4:	ebcc 000e 	rsb	r0, ip, lr
    3ad8:	ea4f 480c 	mov.w	r8, ip, lsl #16
    3adc:	2200      	movs	r2, #0
    3ade:	9301      	str	r3, [sp, #4]
    3ae0:	e518      	b.n	3514 <usb_isr+0x500>
    3ae2:	bf00      	nop

00003ae4 <usb_init>:
}



void usb_init(void)
{
    3ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3ae8:	f000 feb4 	bl	4854 <usb_init_serialnumber>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3aec:	4c31      	ldr	r4, [pc, #196]	; (3bb4 <usb_init+0xd0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3aee:	4b32      	ldr	r3, [pc, #200]	; (3bb8 <usb_init+0xd4>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3af0:	4832      	ldr	r0, [pc, #200]	; (3bbc <usb_init+0xd8>)
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3af2:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 3bd8 <usb_init+0xf4>
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3af6:	4e32      	ldr	r6, [pc, #200]	; (3bc0 <usb_init+0xdc>)
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3af8:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 3bdc <usb_init+0xf8>
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3afc:	4f31      	ldr	r7, [pc, #196]	; (3bc4 <usb_init+0xe0>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3afe:	4d32      	ldr	r5, [pc, #200]	; (3bc8 <usb_init+0xe4>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3b00:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 3be0 <usb_init+0xfc>
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3b04:	2200      	movs	r2, #0
    3b06:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    3b08:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3b0a:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    3b0c:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3b0e:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    3b10:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3b12:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    3b14:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3b16:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    3b18:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3b1a:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    3b1c:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3b1e:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    3b20:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3b22:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    3b24:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3b26:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    3b28:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3b2a:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    3b2c:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3b2e:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    3b30:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3b32:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    3b34:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3b36:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    3b38:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3b3a:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    3b3c:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3b3e:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    3b40:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3b42:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    3b44:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3b4a:	6821      	ldr	r1, [r4, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    3b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3b50:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    3b54:	6021      	str	r1, [r4, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3b56:	6801      	ldr	r1, [r0, #0]
    3b58:	f041 7140 	orr.w	r1, r1, #50331648	; 0x3000000
    3b5c:	6001      	str	r1, [r0, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3b5e:	2103      	movs	r1, #3
    3b60:	f888 1000 	strb.w	r1, [r8]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3b64:	20a0      	movs	r0, #160	; 0xa0
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3b66:	f3c3 2107 	ubfx	r1, r3, #8, #8
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3b6a:	f88c 0000 	strb.w	r0, [ip]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    3b6e:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3b72:	7031      	strb	r1, [r6, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3b74:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3b78:	4914      	ldr	r1, [pc, #80]	; (3bcc <usb_init+0xe8>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3b7a:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3b7c:	0e1b      	lsrs	r3, r3, #24
    3b7e:	702b      	strb	r3, [r5, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    3b80:	34cc      	adds	r4, #204	; 0xcc
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3b82:	23ff      	movs	r3, #255	; 0xff
    3b84:	f88e 3000 	strb.w	r3, [lr]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3b88:	4d11      	ldr	r5, [pc, #68]	; (3bd0 <usb_init+0xec>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    3b8a:	f80c 3cb8 	strb.w	r3, [ip, #-184]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3b8e:	4811      	ldr	r0, [pc, #68]	; (3bd4 <usb_init+0xf0>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3b90:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3b92:	2301      	movs	r3, #1
    3b94:	f806 3c08 	strb.w	r3, [r6, #-8]
	USB0_USBCTRL = 0;
    3b98:	7022      	strb	r2, [r4, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3b9a:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3b9c:	f44f 1400 	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3ba0:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    3ba2:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3ba6:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3ba8:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3baa:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    3bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3bb2:	bf00      	nop
    3bb4:	40048034 	.word	0x40048034
    3bb8:	1fff0000 	.word	0x1fff0000
    3bbc:	4000d800 	.word	0x4000d800
    3bc0:	4007209c 	.word	0x4007209c
    3bc4:	400720b0 	.word	0x400720b0
    3bc8:	400720b4 	.word	0x400720b4
    3bcc:	40072010 	.word	0x40072010
    3bd0:	e000e435 	.word	0xe000e435
    3bd4:	e000e104 	.word	0xe000e104
    3bd8:	40072144 	.word	0x40072144
    3bdc:	40072140 	.word	0x40072140
    3be0:	40072080 	.word	0x40072080

00003be4 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    3be4:	b672      	cpsid	i
	avail = usb_buffer_available;
    3be6:	480d      	ldr	r0, [pc, #52]	; (3c1c <usb_malloc+0x38>)
    3be8:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    3bea:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    3bee:	2b0b      	cmp	r3, #11
    3bf0:	dc10      	bgt.n	3c14 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    3bf2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    3bf6:	40d9      	lsrs	r1, r3
    3bf8:	ea22 0201 	bic.w	r2, r2, r1
    3bfc:	6002      	str	r2, [r0, #0]
	__enable_irq();
    3bfe:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    3c00:	4807      	ldr	r0, [pc, #28]	; (3c20 <usb_malloc+0x3c>)
    3c02:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    3c06:	00db      	lsls	r3, r3, #3
    3c08:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    3c0a:	2100      	movs	r1, #0
    3c0c:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    3c0e:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    3c10:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    3c12:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    3c14:	b662      	cpsie	i
		return NULL;
    3c16:	2000      	movs	r0, #0
    3c18:	4770      	bx	lr
    3c1a:	bf00      	nop
    3c1c:	1fff0e14 	.word	0x1fff0e14
    3c20:	1fff03d0 	.word	0x1fff03d0

00003c24 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    3c24:	4b0d      	ldr	r3, [pc, #52]	; (3c5c <usb_free+0x38>)
    3c26:	4a0e      	ldr	r2, [pc, #56]	; (3c60 <usb_free+0x3c>)
    3c28:	1ac3      	subs	r3, r0, r3
    3c2a:	fba2 2303 	umull	r2, r3, r2, r3
    3c2e:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    3c30:	2b0b      	cmp	r3, #11
    3c32:	d80c      	bhi.n	3c4e <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3c34:	4a0b      	ldr	r2, [pc, #44]	; (3c64 <usb_free+0x40>)
    3c36:	7812      	ldrb	r2, [r2, #0]
    3c38:	b952      	cbnz	r2, 3c50 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    3c3a:	b672      	cpsid	i
	usb_buffer_available |= mask;
    3c3c:	480a      	ldr	r0, [pc, #40]	; (3c68 <usb_free+0x44>)
    3c3e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    3c42:	6802      	ldr	r2, [r0, #0]
    3c44:	fa21 f303 	lsr.w	r3, r1, r3
    3c48:	431a      	orrs	r2, r3
    3c4a:	6002      	str	r2, [r0, #0]
	__enable_irq();
    3c4c:	b662      	cpsie	i
    3c4e:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3c50:	4a06      	ldr	r2, [pc, #24]	; (3c6c <usb_free+0x48>)
    3c52:	7812      	ldrb	r2, [r2, #0]
    3c54:	2a00      	cmp	r2, #0
    3c56:	d0f0      	beq.n	3c3a <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    3c58:	f7ff b936 	b.w	2ec8 <usb_rx_memory>
    3c5c:	1fff03d0 	.word	0x1fff03d0
    3c60:	38e38e39 	.word	0x38e38e39
    3c64:	1fff215d 	.word	0x1fff215d
    3c68:	1fff0e14 	.word	0x1fff0e14
    3c6c:	1fff2168 	.word	0x1fff2168

00003c70 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    3c70:	4b04      	ldr	r3, [pc, #16]	; (3c84 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    3c72:	4a05      	ldr	r2, [pc, #20]	; (3c88 <usb_serial_available+0x18>)
    3c74:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    3c76:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    3c78:	b11b      	cbz	r3, 3c82 <usb_serial_available+0x12>
    3c7a:	881a      	ldrh	r2, [r3, #0]
    3c7c:	885b      	ldrh	r3, [r3, #2]
    3c7e:	1ad3      	subs	r3, r2, r3
    3c80:	4418      	add	r0, r3
	return count;
}
    3c82:	4770      	bx	lr
    3c84:	1fff2178 	.word	0x1fff2178
    3c88:	1fff24d8 	.word	0x1fff24d8

00003c8c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    3c8c:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    3c8e:	4b0e      	ldr	r3, [pc, #56]	; (3cc8 <usb_serial_flush_callback+0x3c>)
    3c90:	781b      	ldrb	r3, [r3, #0]
    3c92:	b973      	cbnz	r3, 3cb2 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    3c94:	4c0d      	ldr	r4, [pc, #52]	; (3ccc <usb_serial_flush_callback+0x40>)
    3c96:	6821      	ldr	r1, [r4, #0]
    3c98:	b161      	cbz	r1, 3cb4 <usb_serial_flush_callback+0x28>
    3c9a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    3c9e:	884b      	ldrh	r3, [r1, #2]
    3ca0:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3ca2:	2004      	movs	r0, #4
    3ca4:	f7ff f974 	bl	2f90 <usb_tx>
		tx_packet = NULL;
    3ca8:	6025      	str	r5, [r4, #0]
    3caa:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    3cac:	4b08      	ldr	r3, [pc, #32]	; (3cd0 <usb_serial_flush_callback+0x44>)
    3cae:	2201      	movs	r2, #1
    3cb0:	701a      	strb	r2, [r3, #0]
    3cb2:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    3cb4:	f7ff ff96 	bl	3be4 <usb_malloc>
		if (tx) {
    3cb8:	2800      	cmp	r0, #0
    3cba:	d0f7      	beq.n	3cac <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    3cbc:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    3cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    3cc2:	2004      	movs	r0, #4
    3cc4:	f7ff b964 	b.w	2f90 <usb_tx>
    3cc8:	1fff2171 	.word	0x1fff2171
    3ccc:	1fff2174 	.word	0x1fff2174
    3cd0:	1fff2170 	.word	0x1fff2170

00003cd4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    3cd4:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3cd6:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3cda:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    3cdc:	7f43      	ldrb	r3, [r0, #29]
    3cde:	b933      	cbnz	r3, 3cee <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3ce0:	7f01      	ldrb	r1, [r0, #28]
    3ce2:	2901      	cmp	r1, #1
    3ce4:	d008      	beq.n	3cf8 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    3ce6:	2903      	cmp	r1, #3
    3ce8:	d010      	beq.n	3d0c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    3cea:	2301      	movs	r3, #1
    3cec:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3cee:	b902      	cbnz	r2, 3cf2 <EventResponder::triggerEventNotImmediate()+0x1e>
    3cf0:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    3cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
    3cf6:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    3cf8:	4c11      	ldr	r4, [pc, #68]	; (3d40 <EventResponder::triggerEventNotImmediate()+0x6c>)
    3cfa:	6821      	ldr	r1, [r4, #0]
    3cfc:	b1a1      	cbz	r1, 3d28 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3cfe:	4911      	ldr	r1, [pc, #68]	; (3d44 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3d00:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    3d02:	680b      	ldr	r3, [r1, #0]
    3d04:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    3d06:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    3d08:	6158      	str	r0, [r3, #20]
    3d0a:	e7ee      	b.n	3cea <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3d0c:	4c0e      	ldr	r4, [pc, #56]	; (3d48 <EventResponder::triggerEventNotImmediate()+0x74>)
    3d0e:	6821      	ldr	r1, [r4, #0]
    3d10:	b181      	cbz	r1, 3d34 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3d12:	490e      	ldr	r1, [pc, #56]	; (3d4c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3d14:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    3d16:	680b      	ldr	r3, [r1, #0]
    3d18:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    3d1a:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    3d1c:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3d1e:	4b0c      	ldr	r3, [pc, #48]	; (3d50 <EventResponder::triggerEventNotImmediate()+0x7c>)
    3d20:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3d24:	6019      	str	r1, [r3, #0]
    3d26:	e7e0      	b.n	3cea <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    3d28:	4b06      	ldr	r3, [pc, #24]	; (3d44 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    3d2a:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    3d2c:	6181      	str	r1, [r0, #24]
				firstYield = this;
    3d2e:	6020      	str	r0, [r4, #0]
				lastYield = this;
    3d30:	6018      	str	r0, [r3, #0]
    3d32:	e7da      	b.n	3cea <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3d34:	4b05      	ldr	r3, [pc, #20]	; (3d4c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    3d36:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    3d38:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    3d3a:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    3d3c:	6018      	str	r0, [r3, #0]
    3d3e:	e7ee      	b.n	3d1e <EventResponder::triggerEventNotImmediate()+0x4a>
    3d40:	1fff2190 	.word	0x1fff2190
    3d44:	1fff218c 	.word	0x1fff218c
    3d48:	1fff2180 	.word	0x1fff2180
    3d4c:	1fff2184 	.word	0x1fff2184
    3d50:	e000ed04 	.word	0xe000ed04

00003d54 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3d54:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3d56:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3d5a:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3d5c:	4c0c      	ldr	r4, [pc, #48]	; (3d90 <EventResponder::runFromInterrupt()+0x3c>)
    3d5e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    3d60:	b180      	cbz	r0, 3d84 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3d62:	4e0c      	ldr	r6, [pc, #48]	; (3d94 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3d64:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3d66:	6943      	ldr	r3, [r0, #20]
    3d68:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    3d6a:	b173      	cbz	r3, 3d8a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    3d6c:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3d6e:	b902      	cbnz	r2, 3d72 <EventResponder::runFromInterrupt()+0x1e>
    3d70:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3d72:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3d74:	6883      	ldr	r3, [r0, #8]
    3d76:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3d78:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3d7c:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3d7e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    3d80:	2800      	cmp	r0, #0
    3d82:	d1f0      	bne.n	3d66 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3d84:	b902      	cbnz	r2, 3d88 <EventResponder::runFromInterrupt()+0x34>
    3d86:	b662      	cpsie	i
    3d88:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3d8a:	6033      	str	r3, [r6, #0]
    3d8c:	e7ef      	b.n	3d6e <EventResponder::runFromInterrupt()+0x1a>
    3d8e:	bf00      	nop
    3d90:	1fff2180 	.word	0x1fff2180
    3d94:	1fff2184 	.word	0x1fff2184

00003d98 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3d98:	f7ff bfdc 	b.w	3d54 <EventResponder::runFromInterrupt()>

00003d9c <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    3d9c:	4a18      	ldr	r2, [pc, #96]	; (3e00 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    3d9e:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    3da0:	6814      	ldr	r4, [r2, #0]
    3da2:	2c00      	cmp	r4, #0
    3da4:	d027      	beq.n	3df6 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    3da6:	6803      	ldr	r3, [r0, #0]
    3da8:	6821      	ldr	r1, [r4, #0]
    3daa:	428b      	cmp	r3, r1
    3dac:	d20e      	bcs.n	3dcc <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3dae:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    3db0:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    3db2:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    3db4:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3db6:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    3db8:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    3dba:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    3dbc:	2302      	movs	r3, #2
    3dbe:	7503      	strb	r3, [r0, #20]
}
    3dc0:	bc30      	pop	{r4, r5}
    3dc2:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    3dc4:	6811      	ldr	r1, [r2, #0]
    3dc6:	428b      	cmp	r3, r1
    3dc8:	4614      	mov	r4, r2
    3dca:	d308      	bcc.n	3dde <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3dcc:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    3dce:	1a5b      	subs	r3, r3, r1
    3dd0:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3dd2:	2a00      	cmp	r2, #0
    3dd4:	d1f6      	bne.n	3dc4 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    3dd6:	6082      	str	r2, [r0, #8]
		_prev = timer;
    3dd8:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    3dda:	60a0      	str	r0, [r4, #8]
    3ddc:	e7ee      	b.n	3dbc <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    3dde:	68d2      	ldr	r2, [r2, #12]
    3de0:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    3de2:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    3de4:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    3de6:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    3de8:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    3dea:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    3dec:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    3dee:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    3df0:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    3df2:	bc30      	pop	{r4, r5}
    3df4:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    3df6:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    3df8:	60c4      	str	r4, [r0, #12]
		listActive = this;
    3dfa:	6010      	str	r0, [r2, #0]
    3dfc:	e7de      	b.n	3dbc <MillisTimer::addToActiveList()+0x20>
    3dfe:	bf00      	nop
    3e00:	1fff2188 	.word	0x1fff2188

00003e04 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    3e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    3e06:	4e22      	ldr	r6, [pc, #136]	; (3e90 <MillisTimer::runFromTimer()+0x8c>)
    3e08:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    3e0a:	b32c      	cbz	r4, 3e58 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3e0c:	6823      	ldr	r3, [r4, #0]
    3e0e:	2b00      	cmp	r3, #0
    3e10:	d13a      	bne.n	3e88 <MillisTimer::runFromTimer()+0x84>
    3e12:	4f20      	ldr	r7, [pc, #128]	; (3e94 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    3e14:	461d      	mov	r5, r3
    3e16:	e004      	b.n	3e22 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    3e18:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3e1a:	b1ec      	cbz	r4, 3e58 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3e1c:	6823      	ldr	r3, [r4, #0]
    3e1e:	2b00      	cmp	r3, #0
    3e20:	d132      	bne.n	3e88 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    3e22:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    3e24:	b103      	cbz	r3, 3e28 <MillisTimer::runFromTimer()+0x24>
    3e26:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    3e28:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    3e2a:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3e2c:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    3e2e:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3e30:	681b      	ldr	r3, [r3, #0]
    3e32:	42bb      	cmp	r3, r7
    3e34:	d121      	bne.n	3e7a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3e36:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3e38:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3e3a:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3e3c:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    3e3e:	d020      	beq.n	3e82 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3e40:	f7ff ff48 	bl	3cd4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    3e44:	6863      	ldr	r3, [r4, #4]
    3e46:	2b00      	cmp	r3, #0
    3e48:	d0e6      	beq.n	3e18 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    3e4a:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    3e4c:	4620      	mov	r0, r4
    3e4e:	f7ff ffa5 	bl	3d9c <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    3e52:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3e54:	2c00      	cmp	r4, #0
    3e56:	d1e1      	bne.n	3e1c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3e58:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    3e5c:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3e5e:	4a0e      	ldr	r2, [pc, #56]	; (3e98 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3e60:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3e62:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3e64:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    3e66:	b903      	cbnz	r3, 3e6a <MillisTimer::runFromTimer()+0x66>
    3e68:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    3e6a:	b128      	cbz	r0, 3e78 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    3e6c:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    3e6e:	f7ff ff95 	bl	3d9c <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    3e72:	4620      	mov	r0, r4
    3e74:	2800      	cmp	r0, #0
    3e76:	d1f9      	bne.n	3e6c <MillisTimer::runFromTimer()+0x68>
    3e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3e7a:	4622      	mov	r2, r4
    3e7c:	2100      	movs	r1, #0
    3e7e:	4798      	blx	r3
    3e80:	e7e0      	b.n	3e44 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3e82:	6883      	ldr	r3, [r0, #8]
    3e84:	4798      	blx	r3
    3e86:	e7dd      	b.n	3e44 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    3e88:	3b01      	subs	r3, #1
    3e8a:	6023      	str	r3, [r4, #0]
			break;
    3e8c:	e7e4      	b.n	3e58 <MillisTimer::runFromTimer()+0x54>
    3e8e:	bf00      	nop
    3e90:	1fff2188 	.word	0x1fff2188
    3e94:	00002241 	.word	0x00002241
    3e98:	1fff2198 	.word	0x1fff2198

00003e9c <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    3e9c:	4a02      	ldr	r2, [pc, #8]	; (3ea8 <systick_isr+0xc>)
    3e9e:	6813      	ldr	r3, [r2, #0]
    3ea0:	3301      	adds	r3, #1
    3ea2:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    3ea4:	f7ff bfae 	b.w	3e04 <MillisTimer::runFromTimer()>
    3ea8:	1fff2084 	.word	0x1fff2084

00003eac <dummy_funct()>:
	}
}
#endif

static void dummy_funct(void)
{
    3eac:	4770      	bx	lr
    3eae:	bf00      	nop

00003eb0 <IntervalTimer::beginCycles(void (*)(), unsigned long)>:
#endif


bool IntervalTimer::beginCycles(void (*funct)(), uint32_t cycles)
{
	if (channel) {
    3eb0:	6803      	ldr	r3, [r0, #0]
uint8_t IntervalTimer::nvic_priorites[2] = {255, 255};
#endif


bool IntervalTimer::beginCycles(void (*funct)(), uint32_t cycles)
{
    3eb2:	b4f0      	push	{r4, r5, r6, r7}
	if (channel) {
    3eb4:	b1fb      	cbz	r3, 3ef6 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x46>
		channel->TCTRL = 0;
    3eb6:	2500      	movs	r5, #0
		channel->TFLG = 1;
    3eb8:	2401      	movs	r4, #1


bool IntervalTimer::beginCycles(void (*funct)(), uint32_t cycles)
{
	if (channel) {
		channel->TCTRL = 0;
    3eba:	609d      	str	r5, [r3, #8]
		channel->TFLG = 1;
    3ebc:	60dc      	str	r4, [r3, #12]
				channel = NULL;
				return false;
			}
		}
	}
	int index = channel - KINETISK_PIT_CHANNELS;
    3ebe:	4c1b      	ldr	r4, [pc, #108]	; (3f2c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x7c>)
	funct_table[index] = funct;
	channel->LDVAL = cycles;
    3ec0:	601a      	str	r2, [r3, #0]
				channel = NULL;
				return false;
			}
		}
	}
	int index = channel - KINETISK_PIT_CHANNELS;
    3ec2:	441c      	add	r4, r3
    3ec4:	1124      	asrs	r4, r4, #4
	funct_table[index] = funct;
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
#if defined(KINETISK)
	NVIC_SET_PRIORITY(IRQ_PIT_CH0 + index, nvic_priority);
	NVIC_ENABLE_IRQ(IRQ_PIT_CH0 + index);
    3ec6:	f104 0530 	add.w	r5, r4, #48	; 0x30
    3eca:	116a      	asrs	r2, r5, #5
		}
	}
	int index = channel - KINETISK_PIT_CHANNELS;
	funct_table[index] = funct;
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
    3ecc:	2603      	movs	r6, #3
#if defined(KINETISK)
	NVIC_SET_PRIORITY(IRQ_PIT_CH0 + index, nvic_priority);
	NVIC_ENABLE_IRQ(IRQ_PIT_CH0 + index);
    3ece:	0092      	lsls	r2, r2, #2
		}
	}
	int index = channel - KINETISK_PIT_CHANNELS;
	funct_table[index] = funct;
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
    3ed0:	609e      	str	r6, [r3, #8]
				return false;
			}
		}
	}
	int index = channel - KINETISK_PIT_CHANNELS;
	funct_table[index] = funct;
    3ed2:	4f17      	ldr	r7, [pc, #92]	; (3f30 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x80>)
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
#if defined(KINETISK)
	NVIC_SET_PRIORITY(IRQ_PIT_CH0 + index, nvic_priority);
    3ed4:	7906      	ldrb	r6, [r0, #4]
    3ed6:	4b17      	ldr	r3, [pc, #92]	; (3f34 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x84>)
				return false;
			}
		}
	}
	int index = channel - KINETISK_PIT_CHANNELS;
	funct_table[index] = funct;
    3ed8:	f847 1024 	str.w	r1, [r7, r4, lsl #2]
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
#if defined(KINETISK)
	NVIC_SET_PRIORITY(IRQ_PIT_CH0 + index, nvic_priority);
	NVIC_ENABLE_IRQ(IRQ_PIT_CH0 + index);
    3edc:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
    3ee0:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
    3ee4:	f005 051f 	and.w	r5, r5, #31
    3ee8:	2001      	movs	r0, #1
    3eea:	fa00 f505 	lsl.w	r5, r0, r5
	int index = channel - KINETISK_PIT_CHANNELS;
	funct_table[index] = funct;
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
#if defined(KINETISK)
	NVIC_SET_PRIORITY(IRQ_PIT_CH0 + index, nvic_priority);
    3eee:	54e6      	strb	r6, [r4, r3]
	NVIC_ENABLE_IRQ(IRQ_PIT_CH0 + index);
    3ef0:	6015      	str	r5, [r2, #0]
		NVIC_SET_PRIORITY(IRQ_PIT, nvic_priorites[1]);
	}
	NVIC_ENABLE_IRQ(IRQ_PIT);
#endif
	return true;
}
    3ef2:	bcf0      	pop	{r4, r5, r6, r7}
    3ef4:	4770      	bx	lr
{
	if (channel) {
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		SIM_SCGC6 |= SIM_SCGC6_PIT;
    3ef6:	4c10      	ldr	r4, [pc, #64]	; (3f38 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x88>)
    3ef8:	6823      	ldr	r3, [r4, #0]
    3efa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    3efe:	6023      	str	r3, [r4, #0]
		__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
    3f00:	bf00      	nop
		PIT_MCR = 1;
    3f02:	4b0e      	ldr	r3, [pc, #56]	; (3f3c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x8c>)
		channel = KINETISK_PIT_CHANNELS;
		while (1) {
			if (channel->TCTRL == 0) break;
			if (++channel >= KINETISK_PIT_CHANNELS + NUM_CHANNELS) {
    3f04:	4d0e      	ldr	r5, [pc, #56]	; (3f40 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x90>)
		channel->TFLG = 1;
	} else {
		SIM_SCGC6 |= SIM_SCGC6_PIT;
		__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
		channel = KINETISK_PIT_CHANNELS;
    3f06:	f5a4 3487 	sub.w	r4, r4, #69120	; 0x10e00
    3f0a:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		SIM_SCGC6 |= SIM_SCGC6_PIT;
		__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
    3f0e:	2601      	movs	r6, #1
    3f10:	601e      	str	r6, [r3, #0]
		channel = KINETISK_PIT_CHANNELS;
    3f12:	4623      	mov	r3, r4
    3f14:	6004      	str	r4, [r0, #0]
		while (1) {
			if (channel->TCTRL == 0) break;
    3f16:	689c      	ldr	r4, [r3, #8]
    3f18:	2c00      	cmp	r4, #0
    3f1a:	d0d0      	beq.n	3ebe <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xe>
			if (++channel >= KINETISK_PIT_CHANNELS + NUM_CHANNELS) {
    3f1c:	3310      	adds	r3, #16
    3f1e:	42ab      	cmp	r3, r5
    3f20:	6003      	str	r3, [r0, #0]
    3f22:	d1f8      	bne.n	3f16 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x66>
				channel = NULL;
    3f24:	2300      	movs	r3, #0
    3f26:	6003      	str	r3, [r0, #0]
				return false;
    3f28:	4618      	mov	r0, r3
    3f2a:	e7e2      	b.n	3ef2 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x42>
    3f2c:	bffc8f00 	.word	0xbffc8f00
    3f30:	1fff0e18 	.word	0x1fff0e18
    3f34:	e000e430 	.word	0xe000e430
    3f38:	4004803c 	.word	0x4004803c
    3f3c:	40037000 	.word	0x40037000
    3f40:	40037140 	.word	0x40037140

00003f44 <IntervalTimer::end()>:
	return true;
}


void IntervalTimer::end() {
	if (channel) {
    3f44:	6801      	ldr	r1, [r0, #0]
    3f46:	b1a9      	cbz	r1, 3f74 <IntervalTimer::end()+0x30>
		int index = channel - KINETISK_PIT_CHANNELS;
    3f48:	4b0b      	ldr	r3, [pc, #44]	; (3f78 <IntervalTimer::end()+0x34>)
#endif
	return true;
}


void IntervalTimer::end() {
    3f4a:	b4f0      	push	{r4, r5, r6, r7}
	if (channel) {
		int index = channel - KINETISK_PIT_CHANNELS;
    3f4c:	440b      	add	r3, r1
    3f4e:	111b      	asrs	r3, r3, #4
#if defined(KINETISK)
		NVIC_DISABLE_IRQ(IRQ_PIT_CH0 + index);
#elif defined(KINETISL)
		// TODO: disable IRQ_PIT, but only if both instances ended
#endif
		funct_table[index] = dummy_funct;
    3f50:	4e0a      	ldr	r6, [pc, #40]	; (3f7c <IntervalTimer::end()+0x38>)
    3f52:	4f0b      	ldr	r7, [pc, #44]	; (3f80 <IntervalTimer::end()+0x3c>)

void IntervalTimer::end() {
	if (channel) {
		int index = channel - KINETISK_PIT_CHANNELS;
#if defined(KINETISK)
		NVIC_DISABLE_IRQ(IRQ_PIT_CH0 + index);
    3f54:	4d0b      	ldr	r5, [pc, #44]	; (3f84 <IntervalTimer::end()+0x40>)
#elif defined(KINETISL)
		// TODO: disable IRQ_PIT, but only if both instances ended
#endif
		funct_table[index] = dummy_funct;
    3f56:	f846 7023 	str.w	r7, [r6, r3, lsl #2]

void IntervalTimer::end() {
	if (channel) {
		int index = channel - KINETISK_PIT_CHANNELS;
#if defined(KINETISK)
		NVIC_DISABLE_IRQ(IRQ_PIT_CH0 + index);
    3f5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
    3f5e:	f002 041f 	and.w	r4, r2, #31
    3f62:	2301      	movs	r3, #1
    3f64:	1152      	asrs	r2, r2, #5
    3f66:	40a3      	lsls	r3, r4
#elif defined(KINETISL)
		// TODO: disable IRQ_PIT, but only if both instances ended
#endif
		funct_table[index] = dummy_funct;
		channel->TCTRL = 0;
    3f68:	2400      	movs	r4, #0

void IntervalTimer::end() {
	if (channel) {
		int index = channel - KINETISK_PIT_CHANNELS;
#if defined(KINETISK)
		NVIC_DISABLE_IRQ(IRQ_PIT_CH0 + index);
    3f6a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
#elif defined(KINETISL)
		// TODO: disable IRQ_PIT, but only if both instances ended
#endif
		funct_table[index] = dummy_funct;
		channel->TCTRL = 0;
    3f6e:	608c      	str	r4, [r1, #8]
			NVIC_SET_PRIORITY(IRQ_PIT, nvic_priorites[0]);
		} else {
			NVIC_SET_PRIORITY(IRQ_PIT, nvic_priorites[1]);
		}
#endif
		channel = 0;
    3f70:	6004      	str	r4, [r0, #0]
	}
}
    3f72:	bcf0      	pop	{r4, r5, r6, r7}
    3f74:	4770      	bx	lr
    3f76:	bf00      	nop
    3f78:	bffc8f00 	.word	0xbffc8f00
    3f7c:	1fff0e18 	.word	0x1fff0e18
    3f80:	00003ead 	.word	0x00003ead
    3f84:	e000e180 	.word	0xe000e180

00003f88 <pit0_isr>:


#if defined(KINETISK)
void pit0_isr()
{
	PIT_TFLG0 = 1;
    3f88:	4a02      	ldr	r2, [pc, #8]	; (3f94 <pit0_isr+0xc>)
	funct_table[0]();
    3f8a:	4b03      	ldr	r3, [pc, #12]	; (3f98 <pit0_isr+0x10>)


#if defined(KINETISK)
void pit0_isr()
{
	PIT_TFLG0 = 1;
    3f8c:	2101      	movs	r1, #1
    3f8e:	6011      	str	r1, [r2, #0]
	funct_table[0]();
    3f90:	681b      	ldr	r3, [r3, #0]
    3f92:	4718      	bx	r3
    3f94:	4003710c 	.word	0x4003710c
    3f98:	1fff0e18 	.word	0x1fff0e18

00003f9c <pit1_isr>:
}

void pit1_isr() {
	PIT_TFLG1 = 1;
    3f9c:	4a02      	ldr	r2, [pc, #8]	; (3fa8 <pit1_isr+0xc>)
	funct_table[1]();
    3f9e:	4b03      	ldr	r3, [pc, #12]	; (3fac <pit1_isr+0x10>)
	PIT_TFLG0 = 1;
	funct_table[0]();
}

void pit1_isr() {
	PIT_TFLG1 = 1;
    3fa0:	2101      	movs	r1, #1
    3fa2:	6011      	str	r1, [r2, #0]
	funct_table[1]();
    3fa4:	685b      	ldr	r3, [r3, #4]
    3fa6:	4718      	bx	r3
    3fa8:	4003711c 	.word	0x4003711c
    3fac:	1fff0e18 	.word	0x1fff0e18

00003fb0 <pit2_isr>:
}

void pit2_isr() {
	PIT_TFLG2 = 1;
    3fb0:	4a02      	ldr	r2, [pc, #8]	; (3fbc <pit2_isr+0xc>)
	funct_table[2]();
    3fb2:	4b03      	ldr	r3, [pc, #12]	; (3fc0 <pit2_isr+0x10>)
	PIT_TFLG1 = 1;
	funct_table[1]();
}

void pit2_isr() {
	PIT_TFLG2 = 1;
    3fb4:	2101      	movs	r1, #1
    3fb6:	6011      	str	r1, [r2, #0]
	funct_table[2]();
    3fb8:	689b      	ldr	r3, [r3, #8]
    3fba:	4718      	bx	r3
    3fbc:	4003712c 	.word	0x4003712c
    3fc0:	1fff0e18 	.word	0x1fff0e18

00003fc4 <pit3_isr>:
}

void pit3_isr() {
	PIT_TFLG3 = 1;
    3fc4:	4a02      	ldr	r2, [pc, #8]	; (3fd0 <pit3_isr+0xc>)
	funct_table[3]();
    3fc6:	4b03      	ldr	r3, [pc, #12]	; (3fd4 <pit3_isr+0x10>)
	PIT_TFLG2 = 1;
	funct_table[2]();
}

void pit3_isr() {
	PIT_TFLG3 = 1;
    3fc8:	2101      	movs	r1, #1
    3fca:	6011      	str	r1, [r2, #0]
	funct_table[3]();
    3fcc:	68db      	ldr	r3, [r3, #12]
    3fce:	4718      	bx	r3
    3fd0:	4003713c 	.word	0x4003713c
    3fd4:	1fff0e18 	.word	0x1fff0e18

00003fd8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3fd8:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3fda:	f7fc fa47 	bl	46c <setup>
	while (1) {
		loop();
    3fde:	f7fc fa4b 	bl	478 <loop>
		yield();
    3fe2:	f000 f843 	bl	406c <yield>
    3fe6:	e7fa      	b.n	3fde <main+0x6>

00003fe8 <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    3fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    3fea:	4d16      	ldr	r5, [pc, #88]	; (4044 <random(unsigned long) [clone .part.0]+0x5c>)
    3fec:	682a      	ldr	r2, [r5, #0]
	if (x == 0) x = 123459876;
    3fee:	b30a      	cbz	r2, 4034 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    3ff0:	4915      	ldr	r1, [pc, #84]	; (4048 <random(unsigned long) [clone .part.0]+0x60>)
    3ff2:	4b16      	ldr	r3, [pc, #88]	; (404c <random(unsigned long) [clone .part.0]+0x64>)
    3ff4:	f8df e05c 	ldr.w	lr, [pc, #92]	; 4054 <random(unsigned long) [clone .part.0]+0x6c>
    3ff8:	fb82 6701 	smull	r6, r7, r2, r1
    3ffc:	fb81 1402 	smull	r1, r4, r1, r2
    4000:	17d6      	asrs	r6, r2, #31
    4002:	19d1      	adds	r1, r2, r7
    4004:	4414      	add	r4, r2
    4006:	ebc6 4121 	rsb	r1, r6, r1, asr #16
    400a:	ebc6 4424 	rsb	r4, r6, r4, asr #16
    400e:	fb03 f404 	mul.w	r4, r3, r4
    4012:	fb0e 2211 	mls	r2, lr, r1, r2
    4016:	f244 13a7 	movw	r3, #16807	; 0x41a7
    401a:	fb03 4302 	mla	r3, r3, r2, r4
	if (x < 0) x += 0x7FFFFFFF;
    401e:	2b00      	cmp	r3, #0
    4020:	da02      	bge.n	4028 <random(unsigned long) [clone .part.0]+0x40>
    4022:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    4026:	3b01      	subs	r3, #1
    4028:	fbb3 f2f0 	udiv	r2, r3, r0
	seed = x;
    402c:	602b      	str	r3, [r5, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    402e:	fb00 3012 	mls	r0, r0, r2, r3
    4032:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    4034:	4b06      	ldr	r3, [pc, #24]	; (4050 <random(unsigned long) [clone .part.0]+0x68>)
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    4036:	602b      	str	r3, [r5, #0]
    4038:	fbb3 f2f0 	udiv	r2, r3, r0

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    403c:	fb00 3012 	mls	r0, r0, r2, r3
    4040:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4042:	bf00      	nop
    4044:	1fff219c 	.word	0x1fff219c
    4048:	834e0b5f 	.word	0x834e0b5f
    404c:	fffff4ec 	.word	0xfffff4ec
    4050:	1f0cce42 	.word	0x1f0cce42
    4054:	0001f31d 	.word	0x0001f31d

00004058 <random(long, long)>:

int32_t random(int32_t howsmall, int32_t howbig)
{
	if (howsmall >= howbig) return howsmall;
    4058:	4288      	cmp	r0, r1
    405a:	da06      	bge.n	406a <random(long, long)+0x12>
	if (howbig == 0) return 0;
	return random() % howbig;
}

int32_t random(int32_t howsmall, int32_t howbig)
{
    405c:	b510      	push	{r4, lr}
    405e:	4604      	mov	r4, r0
    4060:	1a08      	subs	r0, r1, r0
    4062:	f7ff ffc1 	bl	3fe8 <random(unsigned long) [clone .part.0]>
	if (howsmall >= howbig) return howsmall;
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
    4066:	4420      	add	r0, r4
}
    4068:	bd10      	pop	{r4, pc}
    406a:	4770      	bx	lr

0000406c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    406c:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    406e:	4c2c      	ldr	r4, [pc, #176]	; (4120 <yield+0xb4>)
    4070:	7823      	ldrb	r3, [r4, #0]
    4072:	b103      	cbz	r3, 4076 <yield+0xa>
    4074:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    4076:	2301      	movs	r3, #1
    4078:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    407a:	f7ff fdf9 	bl	3c70 <usb_serial_available>
	if (Serial.available()) serialEvent();
    407e:	2800      	cmp	r0, #0
    4080:	d142      	bne.n	4108 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    4082:	f000 f8c5 	bl	4210 <serial_available>
	if (Serial1.available()) serialEvent1();
    4086:	2800      	cmp	r0, #0
    4088:	d13b      	bne.n	4102 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    408a:	f000 f957 	bl	433c <serial2_available>
	if (Serial2.available()) serialEvent2();
    408e:	2800      	cmp	r0, #0
    4090:	d134      	bne.n	40fc <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    4092:	f000 f9e9 	bl	4468 <serial3_available>
	if (Serial3.available()) serialEvent3();
    4096:	bb70      	cbnz	r0, 40f6 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    4098:	f000 fa62 	bl	4560 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    409c:	bb40      	cbnz	r0, 40f0 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    409e:	f000 fadb 	bl	4658 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    40a2:	bb10      	cbnz	r0, 40ea <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    40a4:	f000 fb54 	bl	4750 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    40a8:	b9e0      	cbnz	r0, 40e4 <yield+0x78>
#endif
	running = 0;
    40aa:	2300      	movs	r3, #0
    40ac:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    40ae:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    40b2:	2b00      	cmp	r3, #0
    40b4:	d1de      	bne.n	4074 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    40b6:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    40ba:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    40bc:	4b19      	ldr	r3, [pc, #100]	; (4124 <yield+0xb8>)
    40be:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    40c0:	b328      	cbz	r0, 410e <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    40c2:	4c19      	ldr	r4, [pc, #100]	; (4128 <yield+0xbc>)
    40c4:	7822      	ldrb	r2, [r4, #0]
    40c6:	bb12      	cbnz	r2, 410e <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    40c8:	6945      	ldr	r5, [r0, #20]
    40ca:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    40cc:	2301      	movs	r3, #1
    40ce:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    40d0:	b30d      	cbz	r5, 4116 <yield+0xaa>
			firstYield->_prev = nullptr;
    40d2:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    40d4:	b901      	cbnz	r1, 40d8 <yield+0x6c>
    40d6:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    40d8:	2500      	movs	r5, #0
    40da:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    40dc:	6883      	ldr	r3, [r0, #8]
    40de:	4798      	blx	r3
		runningFromYield = false;
    40e0:	7025      	strb	r5, [r4, #0]
    40e2:	e7c7      	b.n	4074 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    40e4:	f000 fc02 	bl	48ec <serialEvent6()>
    40e8:	e7df      	b.n	40aa <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    40ea:	f000 fbfd 	bl	48e8 <serialEvent5()>
    40ee:	e7d9      	b.n	40a4 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    40f0:	f000 fbf8 	bl	48e4 <serialEvent4()>
    40f4:	e7d3      	b.n	409e <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    40f6:	f000 fbf3 	bl	48e0 <serialEvent3()>
    40fa:	e7cd      	b.n	4098 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    40fc:	f000 fbee 	bl	48dc <serialEvent2()>
    4100:	e7c7      	b.n	4092 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    4102:	f000 fbe9 	bl	48d8 <serialEvent1()>
    4106:	e7c0      	b.n	408a <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    4108:	f000 fbf2 	bl	48f0 <serialEvent()>
    410c:	e7b9      	b.n	4082 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    410e:	2900      	cmp	r1, #0
    4110:	d1b0      	bne.n	4074 <yield+0x8>
    4112:	b662      	cpsie	i
    4114:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    4116:	4b05      	ldr	r3, [pc, #20]	; (412c <yield+0xc0>)
    4118:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    411a:	2900      	cmp	r1, #0
    411c:	d1dc      	bne.n	40d8 <yield+0x6c>
    411e:	e7da      	b.n	40d6 <yield+0x6a>
    4120:	1fff21a0 	.word	0x1fff21a0
    4124:	1fff2190 	.word	0x1fff2190
    4128:	1fff2194 	.word	0x1fff2194
    412c:	1fff218c 	.word	0x1fff218c

00004130 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    4130:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    4132:	4829      	ldr	r0, [pc, #164]	; (41d8 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    4134:	4a29      	ldr	r2, [pc, #164]	; (41dc <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    4136:	4b2a      	ldr	r3, [pc, #168]	; (41e0 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    4138:	4d2a      	ldr	r5, [pc, #168]	; (41e4 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    413a:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    413c:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    413e:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    4140:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    4142:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4144:	4c28      	ldr	r4, [pc, #160]	; (41e8 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    4146:	2b08      	cmp	r3, #8
    4148:	d030      	beq.n	41ac <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    414a:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    414c:	4827      	ldr	r0, [pc, #156]	; (41ec <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    414e:	4928      	ldr	r1, [pc, #160]	; (41f0 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    4150:	d037      	beq.n	41c2 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    4152:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    4154:	bf0c      	ite	eq
    4156:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4158:	225d      	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    415a:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    415c:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    415e:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4160:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    4162:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    4164:	4b23      	ldr	r3, [pc, #140]	; (41f4 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4166:	4924      	ldr	r1, [pc, #144]	; (41f8 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    4168:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    416a:	4a24      	ldr	r2, [pc, #144]	; (41fc <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    416c:	b1bb      	cbz	r3, 419e <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    416e:	2301      	movs	r3, #1
    4170:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4172:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    4174:	4b22      	ldr	r3, [pc, #136]	; (4200 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    4176:	4923      	ldr	r1, [pc, #140]	; (4204 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    4178:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    417a:	4a23      	ldr	r2, [pc, #140]	; (4208 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    417c:	2b01      	cmp	r3, #1
    417e:	d926      	bls.n	41ce <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    4180:	2b04      	cmp	r3, #4
    4182:	d90f      	bls.n	41a4 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    4184:	2b08      	cmp	r3, #8
    4186:	d91e      	bls.n	41c6 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    4188:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    418a:	bf94      	ite	ls
    418c:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    418e:	2387      	movhi	r3, #135	; 0x87
    4190:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    4192:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    4194:	4b1d      	ldr	r3, [pc, #116]	; (420c <analog_init+0xdc>)
    4196:	2201      	movs	r2, #1
    4198:	701a      	strb	r2, [r3, #0]
}
    419a:	bc30      	pop	{r4, r5}
    419c:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    419e:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    41a0:	6013      	str	r3, [r2, #0]
    41a2:	e7e7      	b.n	4174 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    41a4:	2384      	movs	r3, #132	; 0x84
    41a6:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    41a8:	6013      	str	r3, [r2, #0]
    41aa:	e7f3      	b.n	4194 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    41ac:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    41b0:	490f      	ldr	r1, [pc, #60]	; (41f0 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    41b2:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    41b4:	2221      	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    41b6:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    41b8:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    41ba:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    41bc:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    41be:	600b      	str	r3, [r1, #0]
    41c0:	e7d0      	b.n	4164 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    41c2:	2239      	movs	r2, #57	; 0x39
    41c4:	e7f7      	b.n	41b6 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    41c6:	2385      	movs	r3, #133	; 0x85
    41c8:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    41ca:	6013      	str	r3, [r2, #0]
    41cc:	e7e2      	b.n	4194 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    41ce:	2380      	movs	r3, #128	; 0x80
    41d0:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    41d2:	6013      	str	r3, [r2, #0]
    41d4:	e7de      	b.n	4194 <analog_init+0x64>
    41d6:	bf00      	nop
    41d8:	40074000 	.word	0x40074000
    41dc:	40074001 	.word	0x40074001
    41e0:	1fff0e28 	.word	0x1fff0e28
    41e4:	4003b008 	.word	0x4003b008
    41e8:	4003b00c 	.word	0x4003b00c
    41ec:	400bb008 	.word	0x400bb008
    41f0:	400bb00c 	.word	0x400bb00c
    41f4:	1fff21a2 	.word	0x1fff21a2
    41f8:	4003b020 	.word	0x4003b020
    41fc:	400bb020 	.word	0x400bb020
    4200:	1fff0e29 	.word	0x1fff0e29
    4204:	4003b024 	.word	0x4003b024
    4208:	400bb024 	.word	0x400bb024
    420c:	1fff21a1 	.word	0x1fff21a1

00004210 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4210:	4a05      	ldr	r2, [pc, #20]	; (4228 <serial_available+0x18>)
	tail = rx_buffer_tail;
    4212:	4b06      	ldr	r3, [pc, #24]	; (422c <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4214:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4216:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4218:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    421a:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    421c:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    421e:	bf38      	it	cc
    4220:	3040      	addcc	r0, #64	; 0x40
    4222:	1ac0      	subs	r0, r0, r3
}
    4224:	4770      	bx	lr
    4226:	bf00      	nop
    4228:	1fff21a8 	.word	0x1fff21a8
    422c:	1fff21a9 	.word	0x1fff21a9

00004230 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    4230:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    4232:	4b38      	ldr	r3, [pc, #224]	; (4314 <uart0_status_isr+0xe4>)
    4234:	791a      	ldrb	r2, [r3, #4]
    4236:	f012 0f30 	tst.w	r2, #48	; 0x30
    423a:	d02c      	beq.n	4296 <uart0_status_isr+0x66>
		__disable_irq();
    423c:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    423e:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    4240:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    4244:	2900      	cmp	r1, #0
    4246:	d03d      	beq.n	42c4 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    4248:	b662      	cpsie	i
			head = rx_buffer_head;
    424a:	4f33      	ldr	r7, [pc, #204]	; (4318 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    424c:	4933      	ldr	r1, [pc, #204]	; (431c <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    424e:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    4250:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4252:	4e33      	ldr	r6, [pc, #204]	; (4320 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4254:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4256:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    4258:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    425a:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    425c:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    425e:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4260:	bf28      	it	cs
    4262:	2300      	movcs	r3, #0
				if (newhead != tail) {
    4264:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    4266:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    426a:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    426c:	bf1c      	itt	ne
    426e:	54f1      	strbne	r1, [r6, r3]
    4270:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    4272:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    4276:	d1f0      	bne.n	425a <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    4278:	4b2a      	ldr	r3, [pc, #168]	; (4324 <uart0_status_isr+0xf4>)
    427a:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    427c:	b2c2      	uxtb	r2, r0
    427e:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    4280:	b14b      	cbz	r3, 4296 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    4282:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4284:	bf36      	itet	cc
    4286:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    428a:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    428c:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    428e:	2827      	cmp	r0, #39	; 0x27
    4290:	bfc4      	itt	gt
    4292:	2201      	movgt	r2, #1
    4294:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    4296:	491f      	ldr	r1, [pc, #124]	; (4314 <uart0_status_isr+0xe4>)
    4298:	78ca      	ldrb	r2, [r1, #3]
    429a:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    429c:	0615      	lsls	r5, r2, #24
    429e:	d416      	bmi.n	42ce <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    42a0:	0652      	lsls	r2, r2, #25
    42a2:	d50d      	bpl.n	42c0 <uart0_status_isr+0x90>
    42a4:	4b1b      	ldr	r3, [pc, #108]	; (4314 <uart0_status_isr+0xe4>)
    42a6:	791b      	ldrb	r3, [r3, #4]
    42a8:	065b      	lsls	r3, r3, #25
    42aa:	d509      	bpl.n	42c0 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    42ac:	4b1e      	ldr	r3, [pc, #120]	; (4328 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    42ae:	491f      	ldr	r1, [pc, #124]	; (432c <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    42b0:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    42b2:	2200      	movs	r2, #0
    42b4:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    42b6:	b103      	cbz	r3, 42ba <uart0_status_isr+0x8a>
    42b8:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    42ba:	4b16      	ldr	r3, [pc, #88]	; (4314 <uart0_status_isr+0xe4>)
    42bc:	223c      	movs	r2, #60	; 0x3c
    42be:	70da      	strb	r2, [r3, #3]
	}
}
    42c0:	bcf0      	pop	{r4, r5, r6, r7}
    42c2:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    42c4:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    42c6:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    42c8:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    42ca:	b662      	cpsie	i
    42cc:	e7e3      	b.n	4296 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    42ce:	790b      	ldrb	r3, [r1, #4]
    42d0:	061c      	lsls	r4, r3, #24
    42d2:	d5e5      	bpl.n	42a0 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    42d4:	4b16      	ldr	r3, [pc, #88]	; (4330 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    42d6:	4e17      	ldr	r6, [pc, #92]	; (4334 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    42d8:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    42da:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    42dc:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    42de:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    42e0:	429c      	cmp	r4, r3
    42e2:	d00e      	beq.n	4302 <uart0_status_isr+0xd2>
    42e4:	4d14      	ldr	r5, [pc, #80]	; (4338 <uart0_status_isr+0x108>)
    42e6:	e001      	b.n	42ec <uart0_status_isr+0xbc>
    42e8:	42a3      	cmp	r3, r4
    42ea:	d00a      	beq.n	4302 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    42ec:	3301      	adds	r3, #1
    42ee:	2b40      	cmp	r3, #64	; 0x40
    42f0:	bf28      	it	cs
    42f2:	2300      	movcs	r3, #0
			avail = UART0_S1;
    42f4:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    42f6:	5ce8      	ldrb	r0, [r5, r3]
    42f8:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    42fa:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    42fc:	7d08      	ldrb	r0, [r1, #20]
    42fe:	2807      	cmp	r0, #7
    4300:	d9f2      	bls.n	42e8 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    4302:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4304:	4903      	ldr	r1, [pc, #12]	; (4314 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    4306:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4308:	790b      	ldrb	r3, [r1, #4]
    430a:	0618      	lsls	r0, r3, #24
    430c:	bf44      	itt	mi
    430e:	237c      	movmi	r3, #124	; 0x7c
    4310:	70cb      	strbmi	r3, [r1, #3]
    4312:	e7c5      	b.n	42a0 <uart0_status_isr+0x70>
    4314:	4006a000 	.word	0x4006a000
    4318:	1fff21a8 	.word	0x1fff21a8
    431c:	1fff21a9 	.word	0x1fff21a9
    4320:	1fff21ec 	.word	0x1fff21ec
    4324:	1fff21a4 	.word	0x1fff21a4
    4328:	1fff2230 	.word	0x1fff2230
    432c:	1fff222c 	.word	0x1fff222c
    4330:	1fff2234 	.word	0x1fff2234
    4334:	1fff222d 	.word	0x1fff222d
    4338:	1fff21ac 	.word	0x1fff21ac

0000433c <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    433c:	4a05      	ldr	r2, [pc, #20]	; (4354 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    433e:	4b06      	ldr	r3, [pc, #24]	; (4358 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4340:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4342:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4344:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    4346:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4348:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    434a:	bf38      	it	cc
    434c:	3040      	addcc	r0, #64	; 0x40
    434e:	1ac0      	subs	r0, r0, r3
}
    4350:	4770      	bx	lr
    4352:	bf00      	nop
    4354:	1fff22a8 	.word	0x1fff22a8
    4358:	1fff223d 	.word	0x1fff223d

0000435c <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    435c:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    435e:	4b38      	ldr	r3, [pc, #224]	; (4440 <uart1_status_isr+0xe4>)
    4360:	791a      	ldrb	r2, [r3, #4]
    4362:	f012 0f30 	tst.w	r2, #48	; 0x30
    4366:	d02c      	beq.n	43c2 <uart1_status_isr+0x66>
		__disable_irq();
    4368:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    436a:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    436c:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    4370:	2900      	cmp	r1, #0
    4372:	d03d      	beq.n	43f0 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    4374:	b662      	cpsie	i
			head = rx_buffer_head;
    4376:	4f33      	ldr	r7, [pc, #204]	; (4444 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    4378:	4933      	ldr	r1, [pc, #204]	; (4448 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    437a:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    437c:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    437e:	4e33      	ldr	r6, [pc, #204]	; (444c <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    4380:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4382:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    4384:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    4386:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    4388:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    438a:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    438c:	bf28      	it	cs
    438e:	2300      	movcs	r3, #0
				if (newhead != tail) {
    4390:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    4392:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    4396:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4398:	bf1c      	itt	ne
    439a:	54f1      	strbne	r1, [r6, r3]
    439c:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    439e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    43a2:	d1f0      	bne.n	4386 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    43a4:	4b2a      	ldr	r3, [pc, #168]	; (4450 <uart1_status_isr+0xf4>)
    43a6:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    43a8:	b2c2      	uxtb	r2, r0
    43aa:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    43ac:	b14b      	cbz	r3, 43c2 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    43ae:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    43b0:	bf36      	itet	cc
    43b2:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    43b6:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    43b8:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    43ba:	2827      	cmp	r0, #39	; 0x27
    43bc:	bfc4      	itt	gt
    43be:	2201      	movgt	r2, #1
    43c0:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    43c2:	491f      	ldr	r1, [pc, #124]	; (4440 <uart1_status_isr+0xe4>)
    43c4:	78ca      	ldrb	r2, [r1, #3]
    43c6:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    43c8:	0615      	lsls	r5, r2, #24
    43ca:	d416      	bmi.n	43fa <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    43cc:	0652      	lsls	r2, r2, #25
    43ce:	d50d      	bpl.n	43ec <uart1_status_isr+0x90>
    43d0:	4b1b      	ldr	r3, [pc, #108]	; (4440 <uart1_status_isr+0xe4>)
    43d2:	791b      	ldrb	r3, [r3, #4]
    43d4:	065b      	lsls	r3, r3, #25
    43d6:	d509      	bpl.n	43ec <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    43d8:	4b1e      	ldr	r3, [pc, #120]	; (4454 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    43da:	491f      	ldr	r1, [pc, #124]	; (4458 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    43dc:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    43de:	2200      	movs	r2, #0
    43e0:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    43e2:	b103      	cbz	r3, 43e6 <uart1_status_isr+0x8a>
    43e4:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    43e6:	4b16      	ldr	r3, [pc, #88]	; (4440 <uart1_status_isr+0xe4>)
    43e8:	223c      	movs	r2, #60	; 0x3c
    43ea:	70da      	strb	r2, [r3, #3]
	}
}
    43ec:	bcf0      	pop	{r4, r5, r6, r7}
    43ee:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    43f0:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    43f2:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    43f4:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    43f6:	b662      	cpsie	i
    43f8:	e7e3      	b.n	43c2 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    43fa:	790b      	ldrb	r3, [r1, #4]
    43fc:	061c      	lsls	r4, r3, #24
    43fe:	d5e5      	bpl.n	43cc <uart1_status_isr+0x70>
		head = tx_buffer_head;
    4400:	4b16      	ldr	r3, [pc, #88]	; (445c <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    4402:	4e17      	ldr	r6, [pc, #92]	; (4460 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4404:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    4406:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4408:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    440a:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    440c:	429c      	cmp	r4, r3
    440e:	d00e      	beq.n	442e <uart1_status_isr+0xd2>
    4410:	4d14      	ldr	r5, [pc, #80]	; (4464 <uart1_status_isr+0x108>)
    4412:	e001      	b.n	4418 <uart1_status_isr+0xbc>
    4414:	42a3      	cmp	r3, r4
    4416:	d00a      	beq.n	442e <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    4418:	3301      	adds	r3, #1
    441a:	2b28      	cmp	r3, #40	; 0x28
    441c:	bf28      	it	cs
    441e:	2300      	movcs	r3, #0
			avail = UART1_S1;
    4420:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    4422:	5ce8      	ldrb	r0, [r5, r3]
    4424:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    4426:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    4428:	7d08      	ldrb	r0, [r1, #20]
    442a:	2807      	cmp	r0, #7
    442c:	d9f2      	bls.n	4414 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    442e:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    4430:	4903      	ldr	r1, [pc, #12]	; (4440 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    4432:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    4434:	790b      	ldrb	r3, [r1, #4]
    4436:	0618      	lsls	r0, r3, #24
    4438:	bf44      	itt	mi
    443a:	237c      	movmi	r3, #124	; 0x7c
    443c:	70cb      	strbmi	r3, [r1, #3]
    443e:	e7c5      	b.n	43cc <uart1_status_isr+0x70>
    4440:	4006b000 	.word	0x4006b000
    4444:	1fff22a8 	.word	0x1fff22a8
    4448:	1fff223d 	.word	0x1fff223d
    444c:	1fff2268 	.word	0x1fff2268
    4450:	1fff2238 	.word	0x1fff2238
    4454:	1fff22ac 	.word	0x1fff22ac
    4458:	1fff223c 	.word	0x1fff223c
    445c:	1fff22b0 	.word	0x1fff22b0
    4460:	1fff22a9 	.word	0x1fff22a9
    4464:	1fff2240 	.word	0x1fff2240

00004468 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4468:	4a05      	ldr	r2, [pc, #20]	; (4480 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    446a:	4b06      	ldr	r3, [pc, #24]	; (4484 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    446c:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    446e:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4470:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    4472:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4474:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    4476:	bf38      	it	cc
    4478:	3040      	addcc	r0, #64	; 0x40
    447a:	1ac0      	subs	r0, r0, r3
}
    447c:	4770      	bx	lr
    447e:	bf00      	nop
    4480:	1fff22b8 	.word	0x1fff22b8
    4484:	1fff22b9 	.word	0x1fff22b9

00004488 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    4488:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    448a:	4b2b      	ldr	r3, [pc, #172]	; (4538 <uart2_status_isr+0xb0>)
    448c:	791a      	ldrb	r2, [r3, #4]
    448e:	0694      	lsls	r4, r2, #26
    4490:	d51f      	bpl.n	44d2 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4492:	482a      	ldr	r0, [pc, #168]	; (453c <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    4494:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    4496:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4498:	4929      	ldr	r1, [pc, #164]	; (4540 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    449a:	3301      	adds	r3, #1
    449c:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    449e:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    44a0:	bfc8      	it	gt
    44a2:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    44a4:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    44a6:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    44a8:	d003      	beq.n	44b2 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    44aa:	4c26      	ldr	r4, [pc, #152]	; (4544 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    44ac:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    44ae:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    44b0:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    44b2:	4a25      	ldr	r2, [pc, #148]	; (4548 <uart2_status_isr+0xc0>)
    44b4:	6811      	ldr	r1, [r2, #0]
    44b6:	b161      	cbz	r1, 44d2 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    44b8:	4a24      	ldr	r2, [pc, #144]	; (454c <uart2_status_isr+0xc4>)
    44ba:	7812      	ldrb	r2, [r2, #0]
    44bc:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    44be:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    44c0:	bf36      	itet	cc
    44c2:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    44c6:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    44c8:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    44ca:	2b27      	cmp	r3, #39	; 0x27
    44cc:	bfc4      	itt	gt
    44ce:	2301      	movgt	r3, #1
    44d0:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    44d2:	4a19      	ldr	r2, [pc, #100]	; (4538 <uart2_status_isr+0xb0>)
    44d4:	78d3      	ldrb	r3, [r2, #3]
    44d6:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    44d8:	0618      	lsls	r0, r3, #24
    44da:	d411      	bmi.n	4500 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    44dc:	065a      	lsls	r2, r3, #25
    44de:	d50d      	bpl.n	44fc <uart2_status_isr+0x74>
    44e0:	4b15      	ldr	r3, [pc, #84]	; (4538 <uart2_status_isr+0xb0>)
    44e2:	791b      	ldrb	r3, [r3, #4]
    44e4:	065b      	lsls	r3, r3, #25
    44e6:	d509      	bpl.n	44fc <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    44e8:	4b19      	ldr	r3, [pc, #100]	; (4550 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    44ea:	491a      	ldr	r1, [pc, #104]	; (4554 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    44ec:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    44ee:	2200      	movs	r2, #0
    44f0:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    44f2:	b103      	cbz	r3, 44f6 <uart2_status_isr+0x6e>
    44f4:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    44f6:	4b10      	ldr	r3, [pc, #64]	; (4538 <uart2_status_isr+0xb0>)
    44f8:	222c      	movs	r2, #44	; 0x2c
    44fa:	70da      	strb	r2, [r3, #3]
	}
}
    44fc:	bc30      	pop	{r4, r5}
    44fe:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4500:	7911      	ldrb	r1, [r2, #4]
    4502:	0609      	lsls	r1, r1, #24
    4504:	d5ea      	bpl.n	44dc <uart2_status_isr+0x54>
		head = tx_buffer_head;
    4506:	4914      	ldr	r1, [pc, #80]	; (4558 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    4508:	4810      	ldr	r0, [pc, #64]	; (454c <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    450a:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    450c:	7801      	ldrb	r1, [r0, #0]
    450e:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    4510:	428c      	cmp	r4, r1
    4512:	d00d      	beq.n	4530 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    4514:	1c4a      	adds	r2, r1, #1
    4516:	2a27      	cmp	r2, #39	; 0x27
    4518:	bf84      	itt	hi
    451a:	2100      	movhi	r1, #0
    451c:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    451e:	4d0f      	ldr	r5, [pc, #60]	; (455c <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4520:	4c05      	ldr	r4, [pc, #20]	; (4538 <uart2_status_isr+0xb0>)
    4522:	bf98      	it	ls
    4524:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4526:	5caa      	ldrb	r2, [r5, r2]
    4528:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    452a:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    452c:	7001      	strb	r1, [r0, #0]
    452e:	e7d5      	b.n	44dc <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    4530:	216c      	movs	r1, #108	; 0x6c
    4532:	70d1      	strb	r1, [r2, #3]
    4534:	e7d2      	b.n	44dc <uart2_status_isr+0x54>
    4536:	bf00      	nop
    4538:	4006c000 	.word	0x4006c000
    453c:	1fff22b8 	.word	0x1fff22b8
    4540:	1fff22b9 	.word	0x1fff22b9
    4544:	1fff22e4 	.word	0x1fff22e4
    4548:	1fff22b4 	.word	0x1fff22b4
    454c:	1fff2325 	.word	0x1fff2325
    4550:	1fff2328 	.word	0x1fff2328
    4554:	1fff2324 	.word	0x1fff2324
    4558:	1fff232c 	.word	0x1fff232c
    455c:	1fff22bc 	.word	0x1fff22bc

00004560 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4560:	4a05      	ldr	r2, [pc, #20]	; (4578 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    4562:	4b06      	ldr	r3, [pc, #24]	; (457c <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4564:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4566:	781b      	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4568:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    456a:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    456c:	4298      	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    456e:	bf38      	it	cc
    4570:	3040      	addcc	r0, #64	; 0x40
    4572:	1ac0      	subs	r0, r0, r3
}
    4574:	4770      	bx	lr
    4576:	bf00      	nop
    4578:	1fff2334 	.word	0x1fff2334
    457c:	1fff2335 	.word	0x1fff2335

00004580 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    4580:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    4582:	4b2b      	ldr	r3, [pc, #172]	; (4630 <uart3_status_isr+0xb0>)
    4584:	791a      	ldrb	r2, [r3, #4]
    4586:	0694      	lsls	r4, r2, #26
    4588:	d51f      	bpl.n	45ca <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    458a:	482a      	ldr	r0, [pc, #168]	; (4634 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    458c:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    458e:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4590:	4929      	ldr	r1, [pc, #164]	; (4638 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    4592:	3301      	adds	r3, #1
    4594:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4596:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    4598:	bfc8      	it	gt
    459a:	2300      	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    459c:	428b      	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    459e:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    45a0:	d003      	beq.n	45aa <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    45a2:	4c26      	ldr	r4, [pc, #152]	; (463c <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    45a4:	b2d9      	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    45a6:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    45a8:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    45aa:	4a25      	ldr	r2, [pc, #148]	; (4640 <uart3_status_isr+0xc0>)
    45ac:	6811      	ldr	r1, [r2, #0]
    45ae:	b161      	cbz	r1, 45ca <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    45b0:	4a24      	ldr	r2, [pc, #144]	; (4644 <uart3_status_isr+0xc4>)
    45b2:	7812      	ldrb	r2, [r2, #0]
    45b4:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    45b6:	4293      	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    45b8:	bf36      	itet	cc
    45ba:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    45be:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    45c0:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    45c2:	2b27      	cmp	r3, #39	; 0x27
    45c4:	bfc4      	itt	gt
    45c6:	2301      	movgt	r3, #1
    45c8:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    45ca:	4a19      	ldr	r2, [pc, #100]	; (4630 <uart3_status_isr+0xb0>)
    45cc:	78d3      	ldrb	r3, [r2, #3]
    45ce:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    45d0:	0618      	lsls	r0, r3, #24
    45d2:	d411      	bmi.n	45f8 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    45d4:	065a      	lsls	r2, r3, #25
    45d6:	d50d      	bpl.n	45f4 <uart3_status_isr+0x74>
    45d8:	4b15      	ldr	r3, [pc, #84]	; (4630 <uart3_status_isr+0xb0>)
    45da:	791b      	ldrb	r3, [r3, #4]
    45dc:	065b      	lsls	r3, r3, #25
    45de:	d509      	bpl.n	45f4 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    45e0:	4b19      	ldr	r3, [pc, #100]	; (4648 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    45e2:	491a      	ldr	r1, [pc, #104]	; (464c <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    45e4:	681b      	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    45e6:	2200      	movs	r2, #0
    45e8:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    45ea:	b103      	cbz	r3, 45ee <uart3_status_isr+0x6e>
    45ec:	701a      	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    45ee:	4b10      	ldr	r3, [pc, #64]	; (4630 <uart3_status_isr+0xb0>)
    45f0:	222c      	movs	r2, #44	; 0x2c
    45f2:	70da      	strb	r2, [r3, #3]
	}
}
    45f4:	bc30      	pop	{r4, r5}
    45f6:	4770      	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    45f8:	7911      	ldrb	r1, [r2, #4]
    45fa:	0609      	lsls	r1, r1, #24
    45fc:	d5ea      	bpl.n	45d4 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    45fe:	4914      	ldr	r1, [pc, #80]	; (4650 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    4600:	4810      	ldr	r0, [pc, #64]	; (4644 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4602:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4604:	7801      	ldrb	r1, [r0, #0]
    4606:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    4608:	428c      	cmp	r4, r1
    460a:	d00d      	beq.n	4628 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    460c:	1c4a      	adds	r2, r1, #1
    460e:	2a27      	cmp	r2, #39	; 0x27
    4610:	bf84      	itt	hi
    4612:	2100      	movhi	r1, #0
    4614:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    4616:	4d0f      	ldr	r5, [pc, #60]	; (4654 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    4618:	4c05      	ldr	r4, [pc, #20]	; (4630 <uart3_status_isr+0xb0>)
    461a:	bf98      	it	ls
    461c:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    461e:	5caa      	ldrb	r2, [r5, r2]
    4620:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    4622:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4624:	7001      	strb	r1, [r0, #0]
    4626:	e7d5      	b.n	45d4 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    4628:	216c      	movs	r1, #108	; 0x6c
    462a:	70d1      	strb	r1, [r2, #3]
    462c:	e7d2      	b.n	45d4 <uart3_status_isr+0x54>
    462e:	bf00      	nop
    4630:	4006d000 	.word	0x4006d000
    4634:	1fff2334 	.word	0x1fff2334
    4638:	1fff2335 	.word	0x1fff2335
    463c:	1fff2360 	.word	0x1fff2360
    4640:	1fff2330 	.word	0x1fff2330
    4644:	1fff23a1 	.word	0x1fff23a1
    4648:	1fff23a4 	.word	0x1fff23a4
    464c:	1fff23a0 	.word	0x1fff23a0
    4650:	1fff23a8 	.word	0x1fff23a8
    4654:	1fff2338 	.word	0x1fff2338

00004658 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4658:	4a05      	ldr	r2, [pc, #20]	; (4670 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    465a:	4b06      	ldr	r3, [pc, #24]	; (4674 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    465c:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    465e:	781b      	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4660:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    4662:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4664:	4298      	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    4666:	bf38      	it	cc
    4668:	3040      	addcc	r0, #64	; 0x40
    466a:	1ac0      	subs	r0, r0, r3
}
    466c:	4770      	bx	lr
    466e:	bf00      	nop
    4670:	1fff23b0 	.word	0x1fff23b0
    4674:	1fff23b1 	.word	0x1fff23b1

00004678 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    4678:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    467a:	4b2b      	ldr	r3, [pc, #172]	; (4728 <uart4_status_isr+0xb0>)
    467c:	791a      	ldrb	r2, [r3, #4]
    467e:	0694      	lsls	r4, r2, #26
    4680:	d51f      	bpl.n	46c2 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    4682:	482a      	ldr	r0, [pc, #168]	; (472c <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    4684:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    4686:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4688:	4929      	ldr	r1, [pc, #164]	; (4730 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    468a:	3301      	adds	r3, #1
    468c:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    468e:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    4690:	bfc8      	it	gt
    4692:	2300      	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4694:	428b      	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    4696:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4698:	d003      	beq.n	46a2 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    469a:	4c26      	ldr	r4, [pc, #152]	; (4734 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    469c:	b2d9      	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    469e:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    46a0:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    46a2:	4a25      	ldr	r2, [pc, #148]	; (4738 <uart4_status_isr+0xc0>)
    46a4:	6811      	ldr	r1, [r2, #0]
    46a6:	b161      	cbz	r1, 46c2 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    46a8:	4a24      	ldr	r2, [pc, #144]	; (473c <uart4_status_isr+0xc4>)
    46aa:	7812      	ldrb	r2, [r2, #0]
    46ac:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    46ae:	4293      	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    46b0:	bf36      	itet	cc
    46b2:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    46b6:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    46b8:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    46ba:	2b27      	cmp	r3, #39	; 0x27
    46bc:	bfc4      	itt	gt
    46be:	2301      	movgt	r3, #1
    46c0:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    46c2:	4a19      	ldr	r2, [pc, #100]	; (4728 <uart4_status_isr+0xb0>)
    46c4:	78d3      	ldrb	r3, [r2, #3]
    46c6:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    46c8:	0618      	lsls	r0, r3, #24
    46ca:	d411      	bmi.n	46f0 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    46cc:	065a      	lsls	r2, r3, #25
    46ce:	d50d      	bpl.n	46ec <uart4_status_isr+0x74>
    46d0:	4b15      	ldr	r3, [pc, #84]	; (4728 <uart4_status_isr+0xb0>)
    46d2:	791b      	ldrb	r3, [r3, #4]
    46d4:	065b      	lsls	r3, r3, #25
    46d6:	d509      	bpl.n	46ec <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    46d8:	4b19      	ldr	r3, [pc, #100]	; (4740 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    46da:	491a      	ldr	r1, [pc, #104]	; (4744 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    46dc:	681b      	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    46de:	2200      	movs	r2, #0
    46e0:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    46e2:	b103      	cbz	r3, 46e6 <uart4_status_isr+0x6e>
    46e4:	701a      	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    46e6:	4b10      	ldr	r3, [pc, #64]	; (4728 <uart4_status_isr+0xb0>)
    46e8:	222c      	movs	r2, #44	; 0x2c
    46ea:	70da      	strb	r2, [r3, #3]
	}
}
    46ec:	bc30      	pop	{r4, r5}
    46ee:	4770      	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    46f0:	7911      	ldrb	r1, [r2, #4]
    46f2:	0609      	lsls	r1, r1, #24
    46f4:	d5ea      	bpl.n	46cc <uart4_status_isr+0x54>
		head = tx_buffer_head;
    46f6:	4914      	ldr	r1, [pc, #80]	; (4748 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    46f8:	4810      	ldr	r0, [pc, #64]	; (473c <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    46fa:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    46fc:	7801      	ldrb	r1, [r0, #0]
    46fe:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    4700:	428c      	cmp	r4, r1
    4702:	d00d      	beq.n	4720 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    4704:	1c4a      	adds	r2, r1, #1
    4706:	2a27      	cmp	r2, #39	; 0x27
    4708:	bf84      	itt	hi
    470a:	2100      	movhi	r1, #0
    470c:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    470e:	4d0f      	ldr	r5, [pc, #60]	; (474c <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    4710:	4c05      	ldr	r4, [pc, #20]	; (4728 <uart4_status_isr+0xb0>)
    4712:	bf98      	it	ls
    4714:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4716:	5caa      	ldrb	r2, [r5, r2]
    4718:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    471a:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    471c:	7001      	strb	r1, [r0, #0]
    471e:	e7d5      	b.n	46cc <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    4720:	216c      	movs	r1, #108	; 0x6c
    4722:	70d1      	strb	r1, [r2, #3]
    4724:	e7d2      	b.n	46cc <uart4_status_isr+0x54>
    4726:	bf00      	nop
    4728:	400ea000 	.word	0x400ea000
    472c:	1fff23b0 	.word	0x1fff23b0
    4730:	1fff23b1 	.word	0x1fff23b1
    4734:	1fff23dc 	.word	0x1fff23dc
    4738:	1fff23ac 	.word	0x1fff23ac
    473c:	1fff241d 	.word	0x1fff241d
    4740:	1fff2420 	.word	0x1fff2420
    4744:	1fff241c 	.word	0x1fff241c
    4748:	1fff2424 	.word	0x1fff2424
    474c:	1fff23b4 	.word	0x1fff23b4

00004750 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4750:	4a05      	ldr	r2, [pc, #20]	; (4768 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    4752:	4b06      	ldr	r3, [pc, #24]	; (476c <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4754:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4756:	781b      	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4758:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    475a:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    475c:	4298      	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    475e:	bf38      	it	cc
    4760:	3040      	addcc	r0, #64	; 0x40
    4762:	1ac0      	subs	r0, r0, r3
}
    4764:	4770      	bx	lr
    4766:	bf00      	nop
    4768:	1fff242c 	.word	0x1fff242c
    476c:	1fff242d 	.word	0x1fff242d

00004770 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    4770:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    4772:	4b2c      	ldr	r3, [pc, #176]	; (4824 <lpuart0_status_isr+0xb4>)
    4774:	685a      	ldr	r2, [r3, #4]
    4776:	0294      	lsls	r4, r2, #10
    4778:	d51f      	bpl.n	47ba <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    477a:	482b      	ldr	r0, [pc, #172]	; (4828 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    477c:	68da      	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    477e:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4780:	492a      	ldr	r1, [pc, #168]	; (482c <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    4782:	3301      	adds	r3, #1
    4784:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4786:	7809      	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    4788:	bfc8      	it	gt
    478a:	2300      	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    478c:	428b      	cmp	r3, r1
    478e:	d004      	beq.n	479a <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    4790:	4c27      	ldr	r4, [pc, #156]	; (4830 <lpuart0_status_isr+0xc0>)
    4792:	b2d2      	uxtb	r2, r2
			rx_buffer_head = head;
    4794:	b2d9      	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4796:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4798:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    479a:	4a26      	ldr	r2, [pc, #152]	; (4834 <lpuart0_status_isr+0xc4>)
    479c:	6811      	ldr	r1, [r2, #0]
    479e:	b161      	cbz	r1, 47ba <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    47a0:	4a25      	ldr	r2, [pc, #148]	; (4838 <lpuart0_status_isr+0xc8>)
    47a2:	7812      	ldrb	r2, [r2, #0]
    47a4:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    47a6:	4293      	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    47a8:	bf36      	itet	cc
    47aa:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    47ae:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    47b0:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    47b2:	2b27      	cmp	r3, #39	; 0x27
    47b4:	bfc4      	itt	gt
    47b6:	2301      	movgt	r3, #1
    47b8:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    47ba:	4a1a      	ldr	r2, [pc, #104]	; (4824 <lpuart0_status_isr+0xb4>)
    47bc:	6893      	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    47be:	0218      	lsls	r0, r3, #8
    47c0:	d502      	bpl.n	47c8 <lpuart0_status_isr+0x58>
    47c2:	6852      	ldr	r2, [r2, #4]
    47c4:	0211      	lsls	r1, r2, #8
    47c6:	d411      	bmi.n	47ec <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    47c8:	025a      	lsls	r2, r3, #9
    47ca:	d50d      	bpl.n	47e8 <lpuart0_status_isr+0x78>
    47cc:	4b15      	ldr	r3, [pc, #84]	; (4824 <lpuart0_status_isr+0xb4>)
    47ce:	685b      	ldr	r3, [r3, #4]
    47d0:	025b      	lsls	r3, r3, #9
    47d2:	d509      	bpl.n	47e8 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    47d4:	4b19      	ldr	r3, [pc, #100]	; (483c <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    47d6:	491a      	ldr	r1, [pc, #104]	; (4840 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    47d8:	681b      	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    47da:	2200      	movs	r2, #0
    47dc:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    47de:	b103      	cbz	r3, 47e2 <lpuart0_status_isr+0x72>
    47e0:	701a      	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    47e2:	4b18      	ldr	r3, [pc, #96]	; (4844 <lpuart0_status_isr+0xd4>)
    47e4:	2200      	movs	r2, #0
    47e6:	601a      	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    47e8:	bc30      	pop	{r4, r5}
    47ea:	4770      	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    47ec:	4a16      	ldr	r2, [pc, #88]	; (4848 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    47ee:	4912      	ldr	r1, [pc, #72]	; (4838 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    47f0:	7810      	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    47f2:	780a      	ldrb	r2, [r1, #0]
    47f4:	b2d2      	uxtb	r2, r2
		if (head == tail) {
    47f6:	4290      	cmp	r0, r2
    47f8:	d00d      	beq.n	4816 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    47fa:	3201      	adds	r2, #1
    47fc:	2a27      	cmp	r2, #39	; 0x27
    47fe:	bf84      	itt	hi
    4800:	2000      	movhi	r0, #0
    4802:	4602      	movhi	r2, r0
			n = tx_buffer[tail];
    4804:	4d11      	ldr	r5, [pc, #68]	; (484c <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    4806:	4c07      	ldr	r4, [pc, #28]	; (4824 <lpuart0_status_isr+0xb4>)
    4808:	bf98      	it	ls
    480a:	b2d0      	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    480c:	5caa      	ldrb	r2, [r5, r2]
    480e:	b2d2      	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    4810:	60e2      	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    4812:	7008      	strb	r0, [r1, #0]
    4814:	e7d8      	b.n	47c8 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    4816:	480e      	ldr	r0, [pc, #56]	; (4850 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    4818:	4a0a      	ldr	r2, [pc, #40]	; (4844 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    481a:	2400      	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    481c:	2101      	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    481e:	6004      	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    4820:	6011      	str	r1, [r2, #0]
    4822:	e7d1      	b.n	47c8 <lpuart0_status_isr+0x58>
    4824:	400c4000 	.word	0x400c4000
    4828:	1fff242c 	.word	0x1fff242c
    482c:	1fff242d 	.word	0x1fff242d
    4830:	1fff2458 	.word	0x1fff2458
    4834:	1fff2428 	.word	0x1fff2428
    4838:	1fff2499 	.word	0x1fff2499
    483c:	1fff249c 	.word	0x1fff249c
    4840:	1fff2498 	.word	0x1fff2498
    4844:	43880158 	.word	0x43880158
    4848:	1fff24a0 	.word	0x1fff24a0
    484c:	1fff2430 	.word	0x1fff2430
    4850:	4388015c 	.word	0x4388015c

00004854 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    4854:	b510      	push	{r4, lr}
    4856:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    4858:	b672      	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    485a:	f7fe f96b 	bl	2b34 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    485e:	4a18      	ldr	r2, [pc, #96]	; (48c0 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4860:	4b18      	ldr	r3, [pc, #96]	; (48c4 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    4862:	4919      	ldr	r1, [pc, #100]	; (48c8 <usb_init_serialnumber+0x74>)
    4864:	6011      	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4866:	2270      	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    4868:	2180      	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    486a:	701a      	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    486c:	461a      	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    486e:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    4870:	7813      	ldrb	r3, [r2, #0]
    4872:	061b      	lsls	r3, r3, #24
    4874:	d5fc      	bpl.n	4870 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    4876:	4b15      	ldr	r3, [pc, #84]	; (48cc <usb_init_serialnumber+0x78>)
    4878:	681c      	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    487a:	f7fe f975 	bl	2b68 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    487e:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4880:	4b13      	ldr	r3, [pc, #76]	; (48d0 <usb_init_serialnumber+0x7c>)
    4882:	429c      	cmp	r4, r3
    4884:	bf9c      	itt	ls
    4886:	eb04 0484 	addls.w	r4, r4, r4, lsl #2
    488a:	0064      	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    488c:	4620      	mov	r0, r4
    488e:	4c11      	ldr	r4, [pc, #68]	; (48d4 <usb_init_serialnumber+0x80>)
    4890:	a901      	add	r1, sp, #4
    4892:	220a      	movs	r2, #10
    4894:	f000 f82e 	bl	48f4 <ultoa>
    4898:	a901      	add	r1, sp, #4
    489a:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    489c:	2300      	movs	r3, #0
		char c = buf[i];
    489e:	f811 2b01 	ldrb.w	r2, [r1], #1
    48a2:	3301      	adds	r3, #1
		if (!c) break;
    48a4:	b13a      	cbz	r2, 48b6 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    48a6:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    48a8:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    48ac:	d1f7      	bne.n	489e <usb_init_serialnumber+0x4a>
    48ae:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    48b0:	7023      	strb	r3, [r4, #0]
}
    48b2:	b004      	add	sp, #16
    48b4:	bd10      	pop	{r4, pc}
    48b6:	005b      	lsls	r3, r3, #1
    48b8:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    48ba:	7023      	strb	r3, [r4, #0]
}
    48bc:	b004      	add	sp, #16
    48be:	bd10      	pop	{r4, pc}
    48c0:	40020004 	.word	0x40020004
    48c4:	40020000 	.word	0x40020000
    48c8:	41070000 	.word	0x41070000
    48cc:	4002000c 	.word	0x4002000c
    48d0:	0098967f 	.word	0x0098967f
    48d4:	1fff0eb8 	.word	0x1fff0eb8

000048d8 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    48d8:	4770      	bx	lr
    48da:	bf00      	nop

000048dc <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    48dc:	4770      	bx	lr
    48de:	bf00      	nop

000048e0 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    48e0:	4770      	bx	lr
    48e2:	bf00      	nop

000048e4 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    48e4:	4770      	bx	lr
    48e6:	bf00      	nop

000048e8 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    48e8:	4770      	bx	lr
    48ea:	bf00      	nop

000048ec <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    48ec:	4770      	bx	lr
    48ee:	bf00      	nop

000048f0 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    48f0:	4770      	bx	lr
    48f2:	bf00      	nop

000048f4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    48f4:	b4f0      	push	{r4, r5, r6, r7}
    48f6:	1e4d      	subs	r5, r1, #1
    48f8:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    48fa:	2400      	movs	r4, #0
    48fc:	e000      	b.n	4900 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    48fe:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    4900:	fbb0 f3f2 	udiv	r3, r0, r2
    4904:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4908:	2809      	cmp	r0, #9
    490a:	f100 0730 	add.w	r7, r0, #48	; 0x30
    490e:	bf8a      	itet	hi
    4910:	3037      	addhi	r0, #55	; 0x37
    4912:	b2f8      	uxtbls	r0, r7
    4914:	b2c0      	uxtbhi	r0, r0
    4916:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    491a:	4618      	mov	r0, r3
    491c:	2b00      	cmp	r3, #0
    491e:	d1ee      	bne.n	48fe <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    4920:	190a      	adds	r2, r1, r4
    4922:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    4924:	b14c      	cbz	r4, 493a <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    4926:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    4928:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    492c:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    492e:	3301      	adds	r3, #1
    4930:	1ae0      	subs	r0, r4, r3
    4932:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    4934:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4938:	dbf5      	blt.n	4926 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    493a:	4608      	mov	r0, r1
    493c:	bcf0      	pop	{r4, r5, r6, r7}
    493e:	4770      	bx	lr

00004940 <exp>:
    4940:	b5f0      	push	{r4, r5, r6, r7, lr}
    4942:	ed2d 8b04 	vpush	{d8-d9}
    4946:	eeb0 9a40 	vmov.f32	s18, s0
    494a:	eef0 9a60 	vmov.f32	s19, s1
    494e:	4c3a      	ldr	r4, [pc, #232]	; (4a38 <exp+0xf8>)
    4950:	b08b      	sub	sp, #44	; 0x2c
    4952:	f000 fa9d 	bl	4e90 <__ieee754_exp>
    4956:	f994 3000 	ldrsb.w	r3, [r4]
    495a:	eeb0 8a40 	vmov.f32	s16, s0
    495e:	eef0 8a60 	vmov.f32	s17, s1
    4962:	3301      	adds	r3, #1
    4964:	d038      	beq.n	49d8 <exp+0x98>
    4966:	eeb0 0a49 	vmov.f32	s0, s18
    496a:	eef0 0a69 	vmov.f32	s1, s19
    496e:	f001 fc87 	bl	6280 <finite>
    4972:	b388      	cbz	r0, 49d8 <exp+0x98>
    4974:	a32c      	add	r3, pc, #176	; (adr r3, 4a28 <exp+0xe8>)
    4976:	e9d3 2300 	ldrd	r2, r3, [r3]
    497a:	ec51 0b19 	vmov	r0, r1, d9
    497e:	f002 fa03 	bl	6d88 <__aeabi_dcmpgt>
    4982:	4605      	mov	r5, r0
    4984:	bb80      	cbnz	r0, 49e8 <exp+0xa8>
    4986:	a32a      	add	r3, pc, #168	; (adr r3, 4a30 <exp+0xf0>)
    4988:	e9d3 2300 	ldrd	r2, r3, [r3]
    498c:	ec51 0b19 	vmov	r0, r1, d9
    4990:	f002 f9dc 	bl	6d4c <__aeabi_dcmplt>
    4994:	b300      	cbz	r0, 49d8 <exp+0x98>
    4996:	f994 3000 	ldrsb.w	r3, [r4]
    499a:	4a28      	ldr	r2, [pc, #160]	; (4a3c <exp+0xfc>)
    499c:	9508      	str	r5, [sp, #32]
    499e:	2600      	movs	r6, #0
    49a0:	2700      	movs	r7, #0
    49a2:	2104      	movs	r1, #4
    49a4:	2b02      	cmp	r3, #2
    49a6:	ed8d 9b04 	vstr	d9, [sp, #16]
    49aa:	ed8d 9b02 	vstr	d9, [sp, #8]
    49ae:	e9cd 6706 	strd	r6, r7, [sp, #24]
    49b2:	e88d 0006 	stmia.w	sp, {r1, r2}
    49b6:	d030      	beq.n	4a1a <exp+0xda>
    49b8:	4668      	mov	r0, sp
    49ba:	f001 fc69 	bl	6290 <matherr>
    49be:	b360      	cbz	r0, 4a1a <exp+0xda>
    49c0:	9b08      	ldr	r3, [sp, #32]
    49c2:	b11b      	cbz	r3, 49cc <exp+0x8c>
    49c4:	f002 faa4 	bl	6f10 <__errno>
    49c8:	9b08      	ldr	r3, [sp, #32]
    49ca:	6003      	str	r3, [r0, #0]
    49cc:	ed9d 0b06 	vldr	d0, [sp, #24]
    49d0:	b00b      	add	sp, #44	; 0x2c
    49d2:	ecbd 8b04 	vpop	{d8-d9}
    49d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49d8:	eeb0 0a48 	vmov.f32	s0, s16
    49dc:	eef0 0a68 	vmov.f32	s1, s17
    49e0:	b00b      	add	sp, #44	; 0x2c
    49e2:	ecbd 8b04 	vpop	{d8-d9}
    49e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49e8:	4a14      	ldr	r2, [pc, #80]	; (4a3c <exp+0xfc>)
    49ea:	f994 3000 	ldrsb.w	r3, [r4]
    49ee:	9201      	str	r2, [sp, #4]
    49f0:	2103      	movs	r1, #3
    49f2:	2200      	movs	r2, #0
    49f4:	ed8d 9b04 	vstr	d9, [sp, #16]
    49f8:	ed8d 9b02 	vstr	d9, [sp, #8]
    49fc:	9100      	str	r1, [sp, #0]
    49fe:	9208      	str	r2, [sp, #32]
    4a00:	b92b      	cbnz	r3, 4a0e <exp+0xce>
    4a02:	4b0f      	ldr	r3, [pc, #60]	; (4a40 <exp+0x100>)
    4a04:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    4a08:	e9cd 2306 	strd	r2, r3, [sp, #24]
    4a0c:	e7d4      	b.n	49b8 <exp+0x78>
    4a0e:	490d      	ldr	r1, [pc, #52]	; (4a44 <exp+0x104>)
    4a10:	2000      	movs	r0, #0
    4a12:	2b02      	cmp	r3, #2
    4a14:	e9cd 0106 	strd	r0, r1, [sp, #24]
    4a18:	d1ce      	bne.n	49b8 <exp+0x78>
    4a1a:	f002 fa79 	bl	6f10 <__errno>
    4a1e:	2322      	movs	r3, #34	; 0x22
    4a20:	6003      	str	r3, [r0, #0]
    4a22:	e7cd      	b.n	49c0 <exp+0x80>
    4a24:	f3af 8000 	nop.w
    4a28:	fefa39ef 	.word	0xfefa39ef
    4a2c:	40862e42 	.word	0x40862e42
    4a30:	d52d3051 	.word	0xd52d3051
    4a34:	c0874910 	.word	0xc0874910
    4a38:	1fff0ece 	.word	0x1fff0ece
    4a3c:	00007ca8 	.word	0x00007ca8
    4a40:	47efffff 	.word	0x47efffff
    4a44:	7ff00000 	.word	0x7ff00000

00004a48 <log>:
    4a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4a4c:	ed2d 8b02 	vpush	{d8}
    4a50:	b08b      	sub	sp, #44	; 0x2c
    4a52:	ec55 4b10 	vmov	r4, r5, d0
    4a56:	f000 fbaf 	bl	51b8 <__ieee754_log>
    4a5a:	4b3a      	ldr	r3, [pc, #232]	; (4b44 <log+0xfc>)
    4a5c:	eeb0 8a40 	vmov.f32	s16, s0
    4a60:	eef0 8a60 	vmov.f32	s17, s1
    4a64:	f993 6000 	ldrsb.w	r6, [r3]
    4a68:	1c73      	adds	r3, r6, #1
    4a6a:	d00d      	beq.n	4a88 <log+0x40>
    4a6c:	4622      	mov	r2, r4
    4a6e:	462b      	mov	r3, r5
    4a70:	4620      	mov	r0, r4
    4a72:	4629      	mov	r1, r5
    4a74:	f002 f992 	bl	6d9c <__aeabi_dcmpun>
    4a78:	b930      	cbnz	r0, 4a88 <log+0x40>
    4a7a:	2200      	movs	r2, #0
    4a7c:	2300      	movs	r3, #0
    4a7e:	4620      	mov	r0, r4
    4a80:	4629      	mov	r1, r5
    4a82:	f002 f981 	bl	6d88 <__aeabi_dcmpgt>
    4a86:	b140      	cbz	r0, 4a9a <log+0x52>
    4a88:	eeb0 0a48 	vmov.f32	s0, s16
    4a8c:	eef0 0a68 	vmov.f32	s1, s17
    4a90:	b00b      	add	sp, #44	; 0x2c
    4a92:	ecbd 8b02 	vpop	{d8}
    4a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4a9a:	4b2b      	ldr	r3, [pc, #172]	; (4b48 <log+0x100>)
    4a9c:	9008      	str	r0, [sp, #32]
    4a9e:	e9cd 4502 	strd	r4, r5, [sp, #8]
    4aa2:	e9cd 4504 	strd	r4, r5, [sp, #16]
    4aa6:	9301      	str	r3, [sp, #4]
    4aa8:	b9de      	cbnz	r6, 4ae2 <log+0x9a>
    4aaa:	4f28      	ldr	r7, [pc, #160]	; (4b4c <log+0x104>)
    4aac:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
    4ab0:	4620      	mov	r0, r4
    4ab2:	4629      	mov	r1, r5
    4ab4:	2200      	movs	r2, #0
    4ab6:	2300      	movs	r3, #0
    4ab8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    4abc:	f002 f93c 	bl	6d38 <__aeabi_dcmpeq>
    4ac0:	2800      	cmp	r0, #0
    4ac2:	d037      	beq.n	4b34 <log+0xec>
    4ac4:	2302      	movs	r3, #2
    4ac6:	9300      	str	r3, [sp, #0]
    4ac8:	4668      	mov	r0, sp
    4aca:	f001 fbe1 	bl	6290 <matherr>
    4ace:	b1c8      	cbz	r0, 4b04 <log+0xbc>
    4ad0:	9b08      	ldr	r3, [sp, #32]
    4ad2:	b9e3      	cbnz	r3, 4b0e <log+0xc6>
    4ad4:	ed9d 0b06 	vldr	d0, [sp, #24]
    4ad8:	b00b      	add	sp, #44	; 0x2c
    4ada:	ecbd 8b02 	vpop	{d8}
    4ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4ae2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 4b54 <log+0x10c>
    4ae6:	f04f 0800 	mov.w	r8, #0
    4aea:	4620      	mov	r0, r4
    4aec:	4629      	mov	r1, r5
    4aee:	2200      	movs	r2, #0
    4af0:	2300      	movs	r3, #0
    4af2:	e9cd 8906 	strd	r8, r9, [sp, #24]
    4af6:	f002 f91f 	bl	6d38 <__aeabi_dcmpeq>
    4afa:	b168      	cbz	r0, 4b18 <log+0xd0>
    4afc:	2302      	movs	r3, #2
    4afe:	429e      	cmp	r6, r3
    4b00:	9300      	str	r3, [sp, #0]
    4b02:	d1e1      	bne.n	4ac8 <log+0x80>
    4b04:	f002 fa04 	bl	6f10 <__errno>
    4b08:	2322      	movs	r3, #34	; 0x22
    4b0a:	6003      	str	r3, [r0, #0]
    4b0c:	e7e0      	b.n	4ad0 <log+0x88>
    4b0e:	f002 f9ff 	bl	6f10 <__errno>
    4b12:	9b08      	ldr	r3, [sp, #32]
    4b14:	6003      	str	r3, [r0, #0]
    4b16:	e7dd      	b.n	4ad4 <log+0x8c>
    4b18:	2301      	movs	r3, #1
    4b1a:	2e02      	cmp	r6, #2
    4b1c:	9300      	str	r3, [sp, #0]
    4b1e:	d10b      	bne.n	4b38 <log+0xf0>
    4b20:	f002 f9f6 	bl	6f10 <__errno>
    4b24:	2321      	movs	r3, #33	; 0x21
    4b26:	6003      	str	r3, [r0, #0]
    4b28:	4809      	ldr	r0, [pc, #36]	; (4b50 <log+0x108>)
    4b2a:	f001 fbb5 	bl	6298 <nan>
    4b2e:	ed8d 0b06 	vstr	d0, [sp, #24]
    4b32:	e7cd      	b.n	4ad0 <log+0x88>
    4b34:	2301      	movs	r3, #1
    4b36:	9300      	str	r3, [sp, #0]
    4b38:	4668      	mov	r0, sp
    4b3a:	f001 fba9 	bl	6290 <matherr>
    4b3e:	2800      	cmp	r0, #0
    4b40:	d1f2      	bne.n	4b28 <log+0xe0>
    4b42:	e7ed      	b.n	4b20 <log+0xd8>
    4b44:	1fff0ece 	.word	0x1fff0ece
    4b48:	00007cac 	.word	0x00007cac
    4b4c:	c7efffff 	.word	0xc7efffff
    4b50:	00007920 	.word	0x00007920
    4b54:	fff00000 	.word	0xfff00000

00004b58 <pow>:
    4b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b5c:	ed2d 8b02 	vpush	{d8}
    4b60:	f8df a324 	ldr.w	sl, [pc, #804]	; 4e88 <pow+0x330>
    4b64:	b08b      	sub	sp, #44	; 0x2c
    4b66:	ec57 6b10 	vmov	r6, r7, d0
    4b6a:	ec55 4b11 	vmov	r4, r5, d1
    4b6e:	f000 fd27 	bl	55c0 <__ieee754_pow>
    4b72:	f99a 8000 	ldrsb.w	r8, [sl]
    4b76:	eeb0 8a40 	vmov.f32	s16, s0
    4b7a:	eef0 8a60 	vmov.f32	s17, s1
    4b7e:	f1b8 3fff 	cmp.w	r8, #4294967295
    4b82:	d048      	beq.n	4c16 <pow+0xbe>
    4b84:	4622      	mov	r2, r4
    4b86:	462b      	mov	r3, r5
    4b88:	4620      	mov	r0, r4
    4b8a:	4629      	mov	r1, r5
    4b8c:	f002 f906 	bl	6d9c <__aeabi_dcmpun>
    4b90:	4683      	mov	fp, r0
    4b92:	2800      	cmp	r0, #0
    4b94:	d13f      	bne.n	4c16 <pow+0xbe>
    4b96:	4632      	mov	r2, r6
    4b98:	463b      	mov	r3, r7
    4b9a:	4630      	mov	r0, r6
    4b9c:	4639      	mov	r1, r7
    4b9e:	f002 f8fd 	bl	6d9c <__aeabi_dcmpun>
    4ba2:	4681      	mov	r9, r0
    4ba4:	2800      	cmp	r0, #0
    4ba6:	f040 8090 	bne.w	4cca <pow+0x172>
    4baa:	4630      	mov	r0, r6
    4bac:	4639      	mov	r1, r7
    4bae:	2200      	movs	r2, #0
    4bb0:	2300      	movs	r3, #0
    4bb2:	f002 f8c1 	bl	6d38 <__aeabi_dcmpeq>
    4bb6:	2800      	cmp	r0, #0
    4bb8:	d036      	beq.n	4c28 <pow+0xd0>
    4bba:	2200      	movs	r2, #0
    4bbc:	2300      	movs	r3, #0
    4bbe:	4620      	mov	r0, r4
    4bc0:	4629      	mov	r1, r5
    4bc2:	f002 f8b9 	bl	6d38 <__aeabi_dcmpeq>
    4bc6:	4683      	mov	fp, r0
    4bc8:	b1b8      	cbz	r0, 4bfa <pow+0xa2>
    4bca:	ed9f 7ba5 	vldr	d7, [pc, #660]	; 4e60 <pow+0x308>
    4bce:	2201      	movs	r2, #1
    4bd0:	4ba9      	ldr	r3, [pc, #676]	; (4e78 <pow+0x320>)
    4bd2:	f8cd 9020 	str.w	r9, [sp, #32]
    4bd6:	9200      	str	r2, [sp, #0]
    4bd8:	e9cd 6702 	strd	r6, r7, [sp, #8]
    4bdc:	e9cd 4504 	strd	r4, r5, [sp, #16]
    4be0:	ed8d 7b06 	vstr	d7, [sp, #24]
    4be4:	9301      	str	r3, [sp, #4]
    4be6:	f1b8 0f00 	cmp.w	r8, #0
    4bea:	d05b      	beq.n	4ca4 <pow+0x14c>
    4bec:	ed9f 0b9e 	vldr	d0, [pc, #632]	; 4e68 <pow+0x310>
    4bf0:	b00b      	add	sp, #44	; 0x2c
    4bf2:	ecbd 8b02 	vpop	{d8}
    4bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4bfa:	ec45 4b10 	vmov	d0, r4, r5
    4bfe:	f001 fb3f 	bl	6280 <finite>
    4c02:	b140      	cbz	r0, 4c16 <pow+0xbe>
    4c04:	2200      	movs	r2, #0
    4c06:	2300      	movs	r3, #0
    4c08:	4620      	mov	r0, r4
    4c0a:	4629      	mov	r1, r5
    4c0c:	f002 f89e 	bl	6d4c <__aeabi_dcmplt>
    4c10:	2800      	cmp	r0, #0
    4c12:	f040 80c5 	bne.w	4da0 <pow+0x248>
    4c16:	eeb0 0a48 	vmov.f32	s0, s16
    4c1a:	eef0 0a68 	vmov.f32	s1, s17
    4c1e:	b00b      	add	sp, #44	; 0x2c
    4c20:	ecbd 8b02 	vpop	{d8}
    4c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c28:	eeb0 0a48 	vmov.f32	s0, s16
    4c2c:	eef0 0a68 	vmov.f32	s1, s17
    4c30:	f001 fb26 	bl	6280 <finite>
    4c34:	4680      	mov	r8, r0
    4c36:	2800      	cmp	r0, #0
    4c38:	d061      	beq.n	4cfe <pow+0x1a6>
    4c3a:	f04f 0800 	mov.w	r8, #0
    4c3e:	f04f 0900 	mov.w	r9, #0
    4c42:	ec51 0b18 	vmov	r0, r1, d8
    4c46:	4642      	mov	r2, r8
    4c48:	464b      	mov	r3, r9
    4c4a:	f002 f875 	bl	6d38 <__aeabi_dcmpeq>
    4c4e:	2800      	cmp	r0, #0
    4c50:	d0e1      	beq.n	4c16 <pow+0xbe>
    4c52:	ec47 6b10 	vmov	d0, r6, r7
    4c56:	f001 fb13 	bl	6280 <finite>
    4c5a:	2800      	cmp	r0, #0
    4c5c:	d0db      	beq.n	4c16 <pow+0xbe>
    4c5e:	ec45 4b10 	vmov	d0, r4, r5
    4c62:	f001 fb0d 	bl	6280 <finite>
    4c66:	2800      	cmp	r0, #0
    4c68:	d0d5      	beq.n	4c16 <pow+0xbe>
    4c6a:	f99a 3000 	ldrsb.w	r3, [sl]
    4c6e:	4a82      	ldr	r2, [pc, #520]	; (4e78 <pow+0x320>)
    4c70:	9201      	str	r2, [sp, #4]
    4c72:	2104      	movs	r1, #4
    4c74:	2200      	movs	r2, #0
    4c76:	2b02      	cmp	r3, #2
    4c78:	e9cd 6702 	strd	r6, r7, [sp, #8]
    4c7c:	e9cd 4504 	strd	r4, r5, [sp, #16]
    4c80:	e9cd 8906 	strd	r8, r9, [sp, #24]
    4c84:	9100      	str	r1, [sp, #0]
    4c86:	9208      	str	r2, [sp, #32]
    4c88:	d003      	beq.n	4c92 <pow+0x13a>
    4c8a:	4668      	mov	r0, sp
    4c8c:	f001 fb00 	bl	6290 <matherr>
    4c90:	b970      	cbnz	r0, 4cb0 <pow+0x158>
    4c92:	f002 f93d 	bl	6f10 <__errno>
    4c96:	2322      	movs	r3, #34	; 0x22
    4c98:	6003      	str	r3, [r0, #0]
    4c9a:	e009      	b.n	4cb0 <pow+0x158>
    4c9c:	ed9f 7b70 	vldr	d7, [pc, #448]	; 4e60 <pow+0x308>
    4ca0:	ed8d 7b06 	vstr	d7, [sp, #24]
    4ca4:	4668      	mov	r0, sp
    4ca6:	f001 faf3 	bl	6290 <matherr>
    4caa:	2800      	cmp	r0, #0
    4cac:	f000 808e 	beq.w	4dcc <pow+0x274>
    4cb0:	9b08      	ldr	r3, [sp, #32]
    4cb2:	b11b      	cbz	r3, 4cbc <pow+0x164>
    4cb4:	f002 f92c 	bl	6f10 <__errno>
    4cb8:	9b08      	ldr	r3, [sp, #32]
    4cba:	6003      	str	r3, [r0, #0]
    4cbc:	ed9d 0b06 	vldr	d0, [sp, #24]
    4cc0:	b00b      	add	sp, #44	; 0x2c
    4cc2:	ecbd 8b02 	vpop	{d8}
    4cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4cca:	2200      	movs	r2, #0
    4ccc:	2300      	movs	r3, #0
    4cce:	4620      	mov	r0, r4
    4cd0:	4629      	mov	r1, r5
    4cd2:	f002 f831 	bl	6d38 <__aeabi_dcmpeq>
    4cd6:	2800      	cmp	r0, #0
    4cd8:	d09d      	beq.n	4c16 <pow+0xbe>
    4cda:	ed9f 0b63 	vldr	d0, [pc, #396]	; 4e68 <pow+0x310>
    4cde:	4b66      	ldr	r3, [pc, #408]	; (4e78 <pow+0x320>)
    4ce0:	f8cd b020 	str.w	fp, [sp, #32]
    4ce4:	2201      	movs	r2, #1
    4ce6:	f1b8 0f02 	cmp.w	r8, #2
    4cea:	e9cd 6702 	strd	r6, r7, [sp, #8]
    4cee:	e9cd 4504 	strd	r4, r5, [sp, #16]
    4cf2:	ed8d 0b06 	vstr	d0, [sp, #24]
    4cf6:	e88d 000c 	stmia.w	sp, {r2, r3}
    4cfa:	d1d3      	bne.n	4ca4 <pow+0x14c>
    4cfc:	e78f      	b.n	4c1e <pow+0xc6>
    4cfe:	ec47 6b10 	vmov	d0, r6, r7
    4d02:	f001 fabd 	bl	6280 <finite>
    4d06:	2800      	cmp	r0, #0
    4d08:	d097      	beq.n	4c3a <pow+0xe2>
    4d0a:	ec45 4b10 	vmov	d0, r4, r5
    4d0e:	f001 fab7 	bl	6280 <finite>
    4d12:	2800      	cmp	r0, #0
    4d14:	d091      	beq.n	4c3a <pow+0xe2>
    4d16:	ec53 2b18 	vmov	r2, r3, d8
    4d1a:	ee18 0a10 	vmov	r0, s16
    4d1e:	4619      	mov	r1, r3
    4d20:	f002 f83c 	bl	6d9c <__aeabi_dcmpun>
    4d24:	2800      	cmp	r0, #0
    4d26:	d17c      	bne.n	4e22 <pow+0x2ca>
    4d28:	2303      	movs	r3, #3
    4d2a:	f99a 8000 	ldrsb.w	r8, [sl]
    4d2e:	9300      	str	r3, [sp, #0]
    4d30:	4b51      	ldr	r3, [pc, #324]	; (4e78 <pow+0x320>)
    4d32:	9008      	str	r0, [sp, #32]
    4d34:	e9cd 6702 	strd	r6, r7, [sp, #8]
    4d38:	e9cd 4504 	strd	r4, r5, [sp, #16]
    4d3c:	9301      	str	r3, [sp, #4]
    4d3e:	f1b8 0f00 	cmp.w	r8, #0
    4d42:	d148      	bne.n	4dd6 <pow+0x27e>
    4d44:	f8df 9144 	ldr.w	r9, [pc, #324]	; 4e8c <pow+0x334>
    4d48:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
    4d4c:	2200      	movs	r2, #0
    4d4e:	2300      	movs	r3, #0
    4d50:	4630      	mov	r0, r6
    4d52:	4639      	mov	r1, r7
    4d54:	e9cd 8906 	strd	r8, r9, [sp, #24]
    4d58:	f001 fff8 	bl	6d4c <__aeabi_dcmplt>
    4d5c:	2800      	cmp	r0, #0
    4d5e:	d094      	beq.n	4c8a <pow+0x132>
    4d60:	2200      	movs	r2, #0
    4d62:	4b46      	ldr	r3, [pc, #280]	; (4e7c <pow+0x324>)
    4d64:	4620      	mov	r0, r4
    4d66:	4629      	mov	r1, r5
    4d68:	f001 fd7e 	bl	6868 <__aeabi_dmul>
    4d6c:	4604      	mov	r4, r0
    4d6e:	460d      	mov	r5, r1
    4d70:	ec45 4b10 	vmov	d0, r4, r5
    4d74:	f001 fa98 	bl	62a8 <rint>
    4d78:	4620      	mov	r0, r4
    4d7a:	ec53 2b10 	vmov	r2, r3, d0
    4d7e:	4629      	mov	r1, r5
    4d80:	f001 ffda 	bl	6d38 <__aeabi_dcmpeq>
    4d84:	2800      	cmp	r0, #0
    4d86:	d149      	bne.n	4e1c <pow+0x2c4>
    4d88:	4b3d      	ldr	r3, [pc, #244]	; (4e80 <pow+0x328>)
    4d8a:	f99a 8000 	ldrsb.w	r8, [sl]
    4d8e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    4d92:	e9cd 2306 	strd	r2, r3, [sp, #24]
    4d96:	f1b8 0f02 	cmp.w	r8, #2
    4d9a:	f47f af76 	bne.w	4c8a <pow+0x132>
    4d9e:	e778      	b.n	4c92 <pow+0x13a>
    4da0:	4a35      	ldr	r2, [pc, #212]	; (4e78 <pow+0x320>)
    4da2:	f99a 3000 	ldrsb.w	r3, [sl]
    4da6:	f8cd b020 	str.w	fp, [sp, #32]
    4daa:	2101      	movs	r1, #1
    4dac:	e9cd 6702 	strd	r6, r7, [sp, #8]
    4db0:	e9cd 4504 	strd	r4, r5, [sp, #16]
    4db4:	e88d 0006 	stmia.w	sp, {r1, r2}
    4db8:	2b00      	cmp	r3, #0
    4dba:	f43f af6f 	beq.w	4c9c <pow+0x144>
    4dbe:	4931      	ldr	r1, [pc, #196]	; (4e84 <pow+0x32c>)
    4dc0:	2000      	movs	r0, #0
    4dc2:	2b02      	cmp	r3, #2
    4dc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
    4dc8:	f47f af6c 	bne.w	4ca4 <pow+0x14c>
    4dcc:	f002 f8a0 	bl	6f10 <__errno>
    4dd0:	2321      	movs	r3, #33	; 0x21
    4dd2:	6003      	str	r3, [r0, #0]
    4dd4:	e76c      	b.n	4cb0 <pow+0x158>
    4dd6:	ed9f 7b26 	vldr	d7, [pc, #152]	; 4e70 <pow+0x318>
    4dda:	2200      	movs	r2, #0
    4ddc:	2300      	movs	r3, #0
    4dde:	4630      	mov	r0, r6
    4de0:	4639      	mov	r1, r7
    4de2:	ed8d 7b06 	vstr	d7, [sp, #24]
    4de6:	f001 ffb1 	bl	6d4c <__aeabi_dcmplt>
    4dea:	2800      	cmp	r0, #0
    4dec:	d0d3      	beq.n	4d96 <pow+0x23e>
    4dee:	2200      	movs	r2, #0
    4df0:	4b22      	ldr	r3, [pc, #136]	; (4e7c <pow+0x324>)
    4df2:	4620      	mov	r0, r4
    4df4:	4629      	mov	r1, r5
    4df6:	f001 fd37 	bl	6868 <__aeabi_dmul>
    4dfa:	4604      	mov	r4, r0
    4dfc:	460d      	mov	r5, r1
    4dfe:	ec45 4b10 	vmov	d0, r4, r5
    4e02:	f001 fa51 	bl	62a8 <rint>
    4e06:	4620      	mov	r0, r4
    4e08:	ec53 2b10 	vmov	r2, r3, d0
    4e0c:	4629      	mov	r1, r5
    4e0e:	f001 ff93 	bl	6d38 <__aeabi_dcmpeq>
    4e12:	b918      	cbnz	r0, 4e1c <pow+0x2c4>
    4e14:	4b1b      	ldr	r3, [pc, #108]	; (4e84 <pow+0x32c>)
    4e16:	2200      	movs	r2, #0
    4e18:	e9cd 2306 	strd	r2, r3, [sp, #24]
    4e1c:	f99a 8000 	ldrsb.w	r8, [sl]
    4e20:	e7b9      	b.n	4d96 <pow+0x23e>
    4e22:	4b15      	ldr	r3, [pc, #84]	; (4e78 <pow+0x320>)
    4e24:	f99a 9000 	ldrsb.w	r9, [sl]
    4e28:	f8cd 8020 	str.w	r8, [sp, #32]
    4e2c:	2201      	movs	r2, #1
    4e2e:	e9cd 6702 	strd	r6, r7, [sp, #8]
    4e32:	e9cd 4504 	strd	r4, r5, [sp, #16]
    4e36:	e88d 000c 	stmia.w	sp, {r2, r3}
    4e3a:	f1b9 0f00 	cmp.w	r9, #0
    4e3e:	f43f af2d 	beq.w	4c9c <pow+0x144>
    4e42:	2200      	movs	r2, #0
    4e44:	2300      	movs	r3, #0
    4e46:	4610      	mov	r0, r2
    4e48:	4619      	mov	r1, r3
    4e4a:	f001 fe37 	bl	6abc <__aeabi_ddiv>
    4e4e:	f1b9 0f02 	cmp.w	r9, #2
    4e52:	e9cd 0106 	strd	r0, r1, [sp, #24]
    4e56:	d0b9      	beq.n	4dcc <pow+0x274>
    4e58:	e724      	b.n	4ca4 <pow+0x14c>
    4e5a:	bf00      	nop
    4e5c:	f3af 8000 	nop.w
	...
    4e6c:	3ff00000 	.word	0x3ff00000
    4e70:	00000000 	.word	0x00000000
    4e74:	7ff00000 	.word	0x7ff00000
    4e78:	00007cb0 	.word	0x00007cb0
    4e7c:	3fe00000 	.word	0x3fe00000
    4e80:	c7efffff 	.word	0xc7efffff
    4e84:	fff00000 	.word	0xfff00000
    4e88:	1fff0ece 	.word	0x1fff0ece
    4e8c:	47efffff 	.word	0x47efffff

00004e90 <__ieee754_exp>:
    4e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e94:	ec55 4b10 	vmov	r4, r5, d0
    4e98:	49bd      	ldr	r1, [pc, #756]	; (5190 <__ieee754_exp+0x300>)
    4e9a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
    4e9e:	428a      	cmp	r2, r1
    4ea0:	b083      	sub	sp, #12
    4ea2:	ea4f 77d5 	mov.w	r7, r5, lsr #31
    4ea6:	d90d      	bls.n	4ec4 <__ieee754_exp+0x34>
    4ea8:	49ba      	ldr	r1, [pc, #744]	; (5194 <__ieee754_exp+0x304>)
    4eaa:	428a      	cmp	r2, r1
    4eac:	d92a      	bls.n	4f04 <__ieee754_exp+0x74>
    4eae:	f3c5 0313 	ubfx	r3, r5, #0, #20
    4eb2:	4323      	orrs	r3, r4
    4eb4:	f040 80fa 	bne.w	50ac <__ieee754_exp+0x21c>
    4eb8:	b10f      	cbz	r7, 4ebe <__ieee754_exp+0x2e>
    4eba:	ed9f 0b9d 	vldr	d0, [pc, #628]	; 5130 <__ieee754_exp+0x2a0>
    4ebe:	b003      	add	sp, #12
    4ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ec4:	4bb4      	ldr	r3, [pc, #720]	; (5198 <__ieee754_exp+0x308>)
    4ec6:	429a      	cmp	r2, r3
    4ec8:	f200 80d5 	bhi.w	5076 <__ieee754_exp+0x1e6>
    4ecc:	4bb3      	ldr	r3, [pc, #716]	; (519c <__ieee754_exp+0x30c>)
    4ece:	429a      	cmp	r2, r3
    4ed0:	f200 80ea 	bhi.w	50a8 <__ieee754_exp+0x218>
    4ed4:	a398      	add	r3, pc, #608	; (adr r3, 5138 <__ieee754_exp+0x2a8>)
    4ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
    4eda:	ee10 0a10 	vmov	r0, s0
    4ede:	4629      	mov	r1, r5
    4ee0:	f001 fb10 	bl	6504 <__adddf3>
    4ee4:	2200      	movs	r2, #0
    4ee6:	4bae      	ldr	r3, [pc, #696]	; (51a0 <__ieee754_exp+0x310>)
    4ee8:	f001 ff4e 	bl	6d88 <__aeabi_dcmpgt>
    4eec:	2800      	cmp	r0, #0
    4eee:	f000 811c 	beq.w	512a <__ieee754_exp+0x29a>
    4ef2:	4620      	mov	r0, r4
    4ef4:	4629      	mov	r1, r5
    4ef6:	2200      	movs	r2, #0
    4ef8:	4ba9      	ldr	r3, [pc, #676]	; (51a0 <__ieee754_exp+0x310>)
    4efa:	f001 fb03 	bl	6504 <__adddf3>
    4efe:	ec41 0b10 	vmov	d0, r0, r1
    4f02:	e7dc      	b.n	4ebe <__ieee754_exp+0x2e>
    4f04:	a38e      	add	r3, pc, #568	; (adr r3, 5140 <__ieee754_exp+0x2b0>)
    4f06:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f0a:	ee10 0a10 	vmov	r0, s0
    4f0e:	4629      	mov	r1, r5
    4f10:	f001 ff3a 	bl	6d88 <__aeabi_dcmpgt>
    4f14:	2800      	cmp	r0, #0
    4f16:	f040 80d3 	bne.w	50c0 <__ieee754_exp+0x230>
    4f1a:	a38b      	add	r3, pc, #556	; (adr r3, 5148 <__ieee754_exp+0x2b8>)
    4f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f20:	4620      	mov	r0, r4
    4f22:	4629      	mov	r1, r5
    4f24:	f001 ff12 	bl	6d4c <__aeabi_dcmplt>
    4f28:	2800      	cmp	r0, #0
    4f2a:	d1c6      	bne.n	4eba <__ieee754_exp+0x2a>
    4f2c:	4e9d      	ldr	r6, [pc, #628]	; (51a4 <__ieee754_exp+0x314>)
    4f2e:	a388      	add	r3, pc, #544	; (adr r3, 5150 <__ieee754_exp+0x2c0>)
    4f30:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f34:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    4f38:	4620      	mov	r0, r4
    4f3a:	4629      	mov	r1, r5
    4f3c:	f001 fc94 	bl	6868 <__aeabi_dmul>
    4f40:	e9d6 2300 	ldrd	r2, r3, [r6]
    4f44:	f001 fade 	bl	6504 <__adddf3>
    4f48:	f001 ff3e 	bl	6dc8 <__aeabi_d2iz>
    4f4c:	4606      	mov	r6, r0
    4f4e:	f001 fc25 	bl	679c <__aeabi_i2d>
    4f52:	a381      	add	r3, pc, #516	; (adr r3, 5158 <__ieee754_exp+0x2c8>)
    4f54:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f58:	4680      	mov	r8, r0
    4f5a:	4689      	mov	r9, r1
    4f5c:	f001 fc84 	bl	6868 <__aeabi_dmul>
    4f60:	4602      	mov	r2, r0
    4f62:	460b      	mov	r3, r1
    4f64:	4620      	mov	r0, r4
    4f66:	4629      	mov	r1, r5
    4f68:	f001 faca 	bl	6500 <__aeabi_dsub>
    4f6c:	a37c      	add	r3, pc, #496	; (adr r3, 5160 <__ieee754_exp+0x2d0>)
    4f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f72:	e9cd 0100 	strd	r0, r1, [sp]
    4f76:	4640      	mov	r0, r8
    4f78:	4649      	mov	r1, r9
    4f7a:	f001 fc75 	bl	6868 <__aeabi_dmul>
    4f7e:	4682      	mov	sl, r0
    4f80:	468b      	mov	fp, r1
    4f82:	4652      	mov	r2, sl
    4f84:	465b      	mov	r3, fp
    4f86:	e9dd 0100 	ldrd	r0, r1, [sp]
    4f8a:	f001 fab9 	bl	6500 <__aeabi_dsub>
    4f8e:	4604      	mov	r4, r0
    4f90:	460d      	mov	r5, r1
    4f92:	4622      	mov	r2, r4
    4f94:	462b      	mov	r3, r5
    4f96:	4620      	mov	r0, r4
    4f98:	4629      	mov	r1, r5
    4f9a:	f001 fc65 	bl	6868 <__aeabi_dmul>
    4f9e:	a372      	add	r3, pc, #456	; (adr r3, 5168 <__ieee754_exp+0x2d8>)
    4fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
    4fa4:	4680      	mov	r8, r0
    4fa6:	4689      	mov	r9, r1
    4fa8:	f001 fc5e 	bl	6868 <__aeabi_dmul>
    4fac:	a370      	add	r3, pc, #448	; (adr r3, 5170 <__ieee754_exp+0x2e0>)
    4fae:	e9d3 2300 	ldrd	r2, r3, [r3]
    4fb2:	f001 faa5 	bl	6500 <__aeabi_dsub>
    4fb6:	4642      	mov	r2, r8
    4fb8:	464b      	mov	r3, r9
    4fba:	f001 fc55 	bl	6868 <__aeabi_dmul>
    4fbe:	a36e      	add	r3, pc, #440	; (adr r3, 5178 <__ieee754_exp+0x2e8>)
    4fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
    4fc4:	f001 fa9e 	bl	6504 <__adddf3>
    4fc8:	4642      	mov	r2, r8
    4fca:	464b      	mov	r3, r9
    4fcc:	f001 fc4c 	bl	6868 <__aeabi_dmul>
    4fd0:	a36b      	add	r3, pc, #428	; (adr r3, 5180 <__ieee754_exp+0x2f0>)
    4fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
    4fd6:	f001 fa93 	bl	6500 <__aeabi_dsub>
    4fda:	4642      	mov	r2, r8
    4fdc:	464b      	mov	r3, r9
    4fde:	f001 fc43 	bl	6868 <__aeabi_dmul>
    4fe2:	a369      	add	r3, pc, #420	; (adr r3, 5188 <__ieee754_exp+0x2f8>)
    4fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
    4fe8:	f001 fa8c 	bl	6504 <__adddf3>
    4fec:	4642      	mov	r2, r8
    4fee:	464b      	mov	r3, r9
    4ff0:	f001 fc3a 	bl	6868 <__aeabi_dmul>
    4ff4:	4602      	mov	r2, r0
    4ff6:	460b      	mov	r3, r1
    4ff8:	4620      	mov	r0, r4
    4ffa:	4629      	mov	r1, r5
    4ffc:	f001 fa80 	bl	6500 <__aeabi_dsub>
    5000:	4680      	mov	r8, r0
    5002:	4689      	mov	r9, r1
    5004:	2e00      	cmp	r6, #0
    5006:	d065      	beq.n	50d4 <__ieee754_exp+0x244>
    5008:	4620      	mov	r0, r4
    500a:	4629      	mov	r1, r5
    500c:	4642      	mov	r2, r8
    500e:	464b      	mov	r3, r9
    5010:	f001 fc2a 	bl	6868 <__aeabi_dmul>
    5014:	4642      	mov	r2, r8
    5016:	4604      	mov	r4, r0
    5018:	460d      	mov	r5, r1
    501a:	464b      	mov	r3, r9
    501c:	2000      	movs	r0, #0
    501e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5022:	f001 fa6d 	bl	6500 <__aeabi_dsub>
    5026:	4602      	mov	r2, r0
    5028:	460b      	mov	r3, r1
    502a:	4620      	mov	r0, r4
    502c:	4629      	mov	r1, r5
    502e:	f001 fd45 	bl	6abc <__aeabi_ddiv>
    5032:	4602      	mov	r2, r0
    5034:	460b      	mov	r3, r1
    5036:	4650      	mov	r0, sl
    5038:	4659      	mov	r1, fp
    503a:	f001 fa61 	bl	6500 <__aeabi_dsub>
    503e:	e9dd 2300 	ldrd	r2, r3, [sp]
    5042:	f001 fa5d 	bl	6500 <__aeabi_dsub>
    5046:	460b      	mov	r3, r1
    5048:	4602      	mov	r2, r0
    504a:	4955      	ldr	r1, [pc, #340]	; (51a0 <__ieee754_exp+0x310>)
    504c:	2000      	movs	r0, #0
    504e:	f001 fa57 	bl	6500 <__aeabi_dsub>
    5052:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
    5056:	429e      	cmp	r6, r3
    5058:	da60      	bge.n	511c <__ieee754_exp+0x28c>
    505a:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
    505e:	eb01 5106 	add.w	r1, r1, r6, lsl #20
    5062:	2200      	movs	r2, #0
    5064:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
    5068:	f001 fbfe 	bl	6868 <__aeabi_dmul>
    506c:	ec41 0b10 	vmov	d0, r0, r1
    5070:	b003      	add	sp, #12
    5072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5076:	4b4c      	ldr	r3, [pc, #304]	; (51a8 <__ieee754_exp+0x318>)
    5078:	429a      	cmp	r2, r3
    507a:	f63f af57 	bhi.w	4f2c <__ieee754_exp+0x9c>
    507e:	4b4b      	ldr	r3, [pc, #300]	; (51ac <__ieee754_exp+0x31c>)
    5080:	ea4f 08c7 	mov.w	r8, r7, lsl #3
    5084:	4443      	add	r3, r8
    5086:	e9d3 2300 	ldrd	r2, r3, [r3]
    508a:	ee10 0a10 	vmov	r0, s0
    508e:	4629      	mov	r1, r5
    5090:	f001 fa36 	bl	6500 <__aeabi_dsub>
    5094:	4b46      	ldr	r3, [pc, #280]	; (51b0 <__ieee754_exp+0x320>)
    5096:	f1c7 0601 	rsb	r6, r7, #1
    509a:	4498      	add	r8, r3
    509c:	e9cd 0100 	strd	r0, r1, [sp]
    50a0:	e9d8 ab00 	ldrd	sl, fp, [r8]
    50a4:	1bf6      	subs	r6, r6, r7
    50a6:	e76c      	b.n	4f82 <__ieee754_exp+0xf2>
    50a8:	2600      	movs	r6, #0
    50aa:	e772      	b.n	4f92 <__ieee754_exp+0x102>
    50ac:	ee10 2a10 	vmov	r2, s0
    50b0:	462b      	mov	r3, r5
    50b2:	4620      	mov	r0, r4
    50b4:	4629      	mov	r1, r5
    50b6:	f001 fa25 	bl	6504 <__adddf3>
    50ba:	ec41 0b10 	vmov	d0, r0, r1
    50be:	e6fe      	b.n	4ebe <__ieee754_exp+0x2e>
    50c0:	a31d      	add	r3, pc, #116	; (adr r3, 5138 <__ieee754_exp+0x2a8>)
    50c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    50c6:	4610      	mov	r0, r2
    50c8:	4619      	mov	r1, r3
    50ca:	f001 fbcd 	bl	6868 <__aeabi_dmul>
    50ce:	ec41 0b10 	vmov	d0, r0, r1
    50d2:	e6f4      	b.n	4ebe <__ieee754_exp+0x2e>
    50d4:	4602      	mov	r2, r0
    50d6:	460b      	mov	r3, r1
    50d8:	4620      	mov	r0, r4
    50da:	4629      	mov	r1, r5
    50dc:	f001 fbc4 	bl	6868 <__aeabi_dmul>
    50e0:	2200      	movs	r2, #0
    50e2:	4606      	mov	r6, r0
    50e4:	460f      	mov	r7, r1
    50e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    50ea:	4640      	mov	r0, r8
    50ec:	4649      	mov	r1, r9
    50ee:	f001 fa07 	bl	6500 <__aeabi_dsub>
    50f2:	4602      	mov	r2, r0
    50f4:	460b      	mov	r3, r1
    50f6:	4630      	mov	r0, r6
    50f8:	4639      	mov	r1, r7
    50fa:	f001 fcdf 	bl	6abc <__aeabi_ddiv>
    50fe:	4622      	mov	r2, r4
    5100:	462b      	mov	r3, r5
    5102:	f001 f9fd 	bl	6500 <__aeabi_dsub>
    5106:	4602      	mov	r2, r0
    5108:	460b      	mov	r3, r1
    510a:	2000      	movs	r0, #0
    510c:	4924      	ldr	r1, [pc, #144]	; (51a0 <__ieee754_exp+0x310>)
    510e:	f001 f9f7 	bl	6500 <__aeabi_dsub>
    5112:	ec41 0b10 	vmov	d0, r0, r1
    5116:	b003      	add	sp, #12
    5118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    511c:	eb01 5106 	add.w	r1, r1, r6, lsl #20
    5120:	ec41 0b10 	vmov	d0, r0, r1
    5124:	b003      	add	sp, #12
    5126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    512a:	4606      	mov	r6, r0
    512c:	e731      	b.n	4f92 <__ieee754_exp+0x102>
    512e:	bf00      	nop
	...
    5138:	8800759c 	.word	0x8800759c
    513c:	7e37e43c 	.word	0x7e37e43c
    5140:	fefa39ef 	.word	0xfefa39ef
    5144:	40862e42 	.word	0x40862e42
    5148:	d52d3051 	.word	0xd52d3051
    514c:	c0874910 	.word	0xc0874910
    5150:	652b82fe 	.word	0x652b82fe
    5154:	3ff71547 	.word	0x3ff71547
    5158:	fee00000 	.word	0xfee00000
    515c:	3fe62e42 	.word	0x3fe62e42
    5160:	35793c76 	.word	0x35793c76
    5164:	3dea39ef 	.word	0x3dea39ef
    5168:	72bea4d0 	.word	0x72bea4d0
    516c:	3e663769 	.word	0x3e663769
    5170:	c5d26bf1 	.word	0xc5d26bf1
    5174:	3ebbbd41 	.word	0x3ebbbd41
    5178:	af25de2c 	.word	0xaf25de2c
    517c:	3f11566a 	.word	0x3f11566a
    5180:	16bebd93 	.word	0x16bebd93
    5184:	3f66c16c 	.word	0x3f66c16c
    5188:	5555553e 	.word	0x5555553e
    518c:	3fc55555 	.word	0x3fc55555
    5190:	40862e41 	.word	0x40862e41
    5194:	7fefffff 	.word	0x7fefffff
    5198:	3fd62e42 	.word	0x3fd62e42
    519c:	3e2fffff 	.word	0x3e2fffff
    51a0:	3ff00000 	.word	0x3ff00000
    51a4:	00007cb8 	.word	0x00007cb8
    51a8:	3ff0a2b1 	.word	0x3ff0a2b1
    51ac:	00007cd8 	.word	0x00007cd8
    51b0:	00007cc8 	.word	0x00007cc8
    51b4:	ffffffff 	.word	0xffffffff

000051b8 <__ieee754_log>:
    51b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51bc:	ec51 0b10 	vmov	r0, r1, d0
    51c0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    51c4:	b085      	sub	sp, #20
    51c6:	460b      	mov	r3, r1
    51c8:	da59      	bge.n	527e <__ieee754_log+0xc6>
    51ca:	ee10 2a10 	vmov	r2, s0
    51ce:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    51d2:	4322      	orrs	r2, r4
    51d4:	f000 80f8 	beq.w	53c8 <__ieee754_log+0x210>
    51d8:	2900      	cmp	r1, #0
    51da:	f2c0 8180 	blt.w	54de <__ieee754_log+0x326>
    51de:	2200      	movs	r2, #0
    51e0:	4bdd      	ldr	r3, [pc, #884]	; (5558 <__ieee754_log+0x3a0>)
    51e2:	4cde      	ldr	r4, [pc, #888]	; (555c <__ieee754_log+0x3a4>)
    51e4:	f001 fb40 	bl	6868 <__aeabi_dmul>
    51e8:	460b      	mov	r3, r1
    51ea:	42a3      	cmp	r3, r4
    51ec:	f06f 0235 	mvn.w	r2, #53	; 0x35
    51f0:	dc4a      	bgt.n	5288 <__ieee754_log+0xd0>
    51f2:	f3c3 0513 	ubfx	r5, r3, #0, #20
    51f6:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
    51fa:	f604 7464 	addw	r4, r4, #3940	; 0xf64
    51fe:	f404 1680 	and.w	r6, r4, #1048576	; 0x100000
    5202:	f086 547f 	eor.w	r4, r6, #1069547520	; 0x3fc00000
    5206:	151b      	asrs	r3, r3, #20
    5208:	f484 1440 	eor.w	r4, r4, #3145728	; 0x300000
    520c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    5210:	ea44 0105 	orr.w	r1, r4, r5
    5214:	189c      	adds	r4, r3, r2
    5216:	2200      	movs	r2, #0
    5218:	4bd1      	ldr	r3, [pc, #836]	; (5560 <__ieee754_log+0x3a8>)
    521a:	f001 f971 	bl	6500 <__aeabi_dsub>
    521e:	1cab      	adds	r3, r5, #2
    5220:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5224:	2b02      	cmp	r3, #2
    5226:	eb04 5416 	add.w	r4, r4, r6, lsr #20
    522a:	4682      	mov	sl, r0
    522c:	468b      	mov	fp, r1
    522e:	f04f 0200 	mov.w	r2, #0
    5232:	dc32      	bgt.n	529a <__ieee754_log+0xe2>
    5234:	2300      	movs	r3, #0
    5236:	f001 fd7f 	bl	6d38 <__aeabi_dcmpeq>
    523a:	2800      	cmp	r0, #0
    523c:	f000 80cf 	beq.w	53de <__ieee754_log+0x226>
    5240:	2c00      	cmp	r4, #0
    5242:	f000 8158 	beq.w	54f6 <__ieee754_log+0x33e>
    5246:	4620      	mov	r0, r4
    5248:	f001 faa8 	bl	679c <__aeabi_i2d>
    524c:	a3ac      	add	r3, pc, #688	; (adr r3, 5500 <__ieee754_log+0x348>)
    524e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5252:	4606      	mov	r6, r0
    5254:	460f      	mov	r7, r1
    5256:	f001 fb07 	bl	6868 <__aeabi_dmul>
    525a:	a3ab      	add	r3, pc, #684	; (adr r3, 5508 <__ieee754_log+0x350>)
    525c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5260:	4604      	mov	r4, r0
    5262:	460d      	mov	r5, r1
    5264:	4630      	mov	r0, r6
    5266:	4639      	mov	r1, r7
    5268:	f001 fafe 	bl	6868 <__aeabi_dmul>
    526c:	4602      	mov	r2, r0
    526e:	460b      	mov	r3, r1
    5270:	4620      	mov	r0, r4
    5272:	4629      	mov	r1, r5
    5274:	f001 f946 	bl	6504 <__adddf3>
    5278:	ec41 0b10 	vmov	d0, r0, r1
    527c:	e00a      	b.n	5294 <__ieee754_log+0xdc>
    527e:	4cb7      	ldr	r4, [pc, #732]	; (555c <__ieee754_log+0x3a4>)
    5280:	42a3      	cmp	r3, r4
    5282:	f04f 0200 	mov.w	r2, #0
    5286:	ddb4      	ble.n	51f2 <__ieee754_log+0x3a>
    5288:	4602      	mov	r2, r0
    528a:	460b      	mov	r3, r1
    528c:	f001 f93a 	bl	6504 <__adddf3>
    5290:	ec41 0b10 	vmov	d0, r0, r1
    5294:	b005      	add	sp, #20
    5296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    529a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    529e:	f001 f931 	bl	6504 <__adddf3>
    52a2:	4602      	mov	r2, r0
    52a4:	460b      	mov	r3, r1
    52a6:	4650      	mov	r0, sl
    52a8:	4659      	mov	r1, fp
    52aa:	f001 fc07 	bl	6abc <__aeabi_ddiv>
    52ae:	4606      	mov	r6, r0
    52b0:	4620      	mov	r0, r4
    52b2:	460f      	mov	r7, r1
    52b4:	f001 fa72 	bl	679c <__aeabi_i2d>
    52b8:	4632      	mov	r2, r6
    52ba:	e9cd 0100 	strd	r0, r1, [sp]
    52be:	463b      	mov	r3, r7
    52c0:	4630      	mov	r0, r6
    52c2:	4639      	mov	r1, r7
    52c4:	e9cd 6702 	strd	r6, r7, [sp, #8]
    52c8:	f001 face 	bl	6868 <__aeabi_dmul>
    52cc:	4602      	mov	r2, r0
    52ce:	460b      	mov	r3, r1
    52d0:	4680      	mov	r8, r0
    52d2:	4689      	mov	r9, r1
    52d4:	f001 fac8 	bl	6868 <__aeabi_dmul>
    52d8:	a38d      	add	r3, pc, #564	; (adr r3, 5510 <__ieee754_log+0x358>)
    52da:	e9d3 2300 	ldrd	r2, r3, [r3]
    52de:	4606      	mov	r6, r0
    52e0:	460f      	mov	r7, r1
    52e2:	f001 fac1 	bl	6868 <__aeabi_dmul>
    52e6:	a38c      	add	r3, pc, #560	; (adr r3, 5518 <__ieee754_log+0x360>)
    52e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    52ec:	f001 f90a 	bl	6504 <__adddf3>
    52f0:	4632      	mov	r2, r6
    52f2:	463b      	mov	r3, r7
    52f4:	f001 fab8 	bl	6868 <__aeabi_dmul>
    52f8:	a389      	add	r3, pc, #548	; (adr r3, 5520 <__ieee754_log+0x368>)
    52fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    52fe:	f001 f901 	bl	6504 <__adddf3>
    5302:	4632      	mov	r2, r6
    5304:	463b      	mov	r3, r7
    5306:	f001 faaf 	bl	6868 <__aeabi_dmul>
    530a:	a387      	add	r3, pc, #540	; (adr r3, 5528 <__ieee754_log+0x370>)
    530c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5310:	f001 f8f8 	bl	6504 <__adddf3>
    5314:	4642      	mov	r2, r8
    5316:	464b      	mov	r3, r9
    5318:	f001 faa6 	bl	6868 <__aeabi_dmul>
    531c:	a384      	add	r3, pc, #528	; (adr r3, 5530 <__ieee754_log+0x378>)
    531e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5322:	4680      	mov	r8, r0
    5324:	4689      	mov	r9, r1
    5326:	4630      	mov	r0, r6
    5328:	4639      	mov	r1, r7
    532a:	f001 fa9d 	bl	6868 <__aeabi_dmul>
    532e:	a382      	add	r3, pc, #520	; (adr r3, 5538 <__ieee754_log+0x380>)
    5330:	e9d3 2300 	ldrd	r2, r3, [r3]
    5334:	f001 f8e6 	bl	6504 <__adddf3>
    5338:	4632      	mov	r2, r6
    533a:	463b      	mov	r3, r7
    533c:	f001 fa94 	bl	6868 <__aeabi_dmul>
    5340:	a37f      	add	r3, pc, #508	; (adr r3, 5540 <__ieee754_log+0x388>)
    5342:	e9d3 2300 	ldrd	r2, r3, [r3]
    5346:	f001 f8dd 	bl	6504 <__adddf3>
    534a:	4632      	mov	r2, r6
    534c:	463b      	mov	r3, r7
    534e:	f001 fa8b 	bl	6868 <__aeabi_dmul>
    5352:	460b      	mov	r3, r1
    5354:	4602      	mov	r2, r0
    5356:	4649      	mov	r1, r9
    5358:	4640      	mov	r0, r8
    535a:	f001 f8d3 	bl	6504 <__adddf3>
    535e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
    5362:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
    5366:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
    536a:	3551      	adds	r5, #81	; 0x51
    536c:	431d      	orrs	r5, r3
    536e:	2d00      	cmp	r5, #0
    5370:	4680      	mov	r8, r0
    5372:	4689      	mov	r9, r1
    5374:	dd5c      	ble.n	5430 <__ieee754_log+0x278>
    5376:	2200      	movs	r2, #0
    5378:	4b7a      	ldr	r3, [pc, #488]	; (5564 <__ieee754_log+0x3ac>)
    537a:	4650      	mov	r0, sl
    537c:	4659      	mov	r1, fp
    537e:	f001 fa73 	bl	6868 <__aeabi_dmul>
    5382:	4652      	mov	r2, sl
    5384:	465b      	mov	r3, fp
    5386:	f001 fa6f 	bl	6868 <__aeabi_dmul>
    538a:	4606      	mov	r6, r0
    538c:	460f      	mov	r7, r1
    538e:	2c00      	cmp	r4, #0
    5390:	d16e      	bne.n	5470 <__ieee754_log+0x2b8>
    5392:	4632      	mov	r2, r6
    5394:	463b      	mov	r3, r7
    5396:	4640      	mov	r0, r8
    5398:	4649      	mov	r1, r9
    539a:	f001 f8b3 	bl	6504 <__adddf3>
    539e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    53a2:	f001 fa61 	bl	6868 <__aeabi_dmul>
    53a6:	4602      	mov	r2, r0
    53a8:	460b      	mov	r3, r1
    53aa:	4630      	mov	r0, r6
    53ac:	4639      	mov	r1, r7
    53ae:	f001 f8a7 	bl	6500 <__aeabi_dsub>
    53b2:	4602      	mov	r2, r0
    53b4:	460b      	mov	r3, r1
    53b6:	4650      	mov	r0, sl
    53b8:	4659      	mov	r1, fp
    53ba:	f001 f8a1 	bl	6500 <__aeabi_dsub>
    53be:	ec41 0b10 	vmov	d0, r0, r1
    53c2:	b005      	add	sp, #20
    53c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53c8:	2200      	movs	r2, #0
    53ca:	2300      	movs	r3, #0
    53cc:	2000      	movs	r0, #0
    53ce:	4966      	ldr	r1, [pc, #408]	; (5568 <__ieee754_log+0x3b0>)
    53d0:	f001 fb74 	bl	6abc <__aeabi_ddiv>
    53d4:	ec41 0b10 	vmov	d0, r0, r1
    53d8:	b005      	add	sp, #20
    53da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53de:	a35a      	add	r3, pc, #360	; (adr r3, 5548 <__ieee754_log+0x390>)
    53e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    53e4:	4650      	mov	r0, sl
    53e6:	4659      	mov	r1, fp
    53e8:	f001 fa3e 	bl	6868 <__aeabi_dmul>
    53ec:	4602      	mov	r2, r0
    53ee:	460b      	mov	r3, r1
    53f0:	2000      	movs	r0, #0
    53f2:	495c      	ldr	r1, [pc, #368]	; (5564 <__ieee754_log+0x3ac>)
    53f4:	f001 f884 	bl	6500 <__aeabi_dsub>
    53f8:	4652      	mov	r2, sl
    53fa:	4606      	mov	r6, r0
    53fc:	460f      	mov	r7, r1
    53fe:	465b      	mov	r3, fp
    5400:	4650      	mov	r0, sl
    5402:	4659      	mov	r1, fp
    5404:	f001 fa30 	bl	6868 <__aeabi_dmul>
    5408:	4602      	mov	r2, r0
    540a:	460b      	mov	r3, r1
    540c:	4630      	mov	r0, r6
    540e:	4639      	mov	r1, r7
    5410:	f001 fa2a 	bl	6868 <__aeabi_dmul>
    5414:	4606      	mov	r6, r0
    5416:	460f      	mov	r7, r1
    5418:	2c00      	cmp	r4, #0
    541a:	f040 80a7 	bne.w	556c <__ieee754_log+0x3b4>
    541e:	4602      	mov	r2, r0
    5420:	460b      	mov	r3, r1
    5422:	4650      	mov	r0, sl
    5424:	4659      	mov	r1, fp
    5426:	f001 f86b 	bl	6500 <__aeabi_dsub>
    542a:	ec41 0b10 	vmov	d0, r0, r1
    542e:	e731      	b.n	5294 <__ieee754_log+0xdc>
    5430:	2c00      	cmp	r4, #0
    5432:	f000 80af 	beq.w	5594 <__ieee754_log+0x3dc>
    5436:	a332      	add	r3, pc, #200	; (adr r3, 5500 <__ieee754_log+0x348>)
    5438:	e9d3 2300 	ldrd	r2, r3, [r3]
    543c:	e9dd 0100 	ldrd	r0, r1, [sp]
    5440:	f001 fa12 	bl	6868 <__aeabi_dmul>
    5444:	4642      	mov	r2, r8
    5446:	464b      	mov	r3, r9
    5448:	4604      	mov	r4, r0
    544a:	460d      	mov	r5, r1
    544c:	4650      	mov	r0, sl
    544e:	4659      	mov	r1, fp
    5450:	f001 f856 	bl	6500 <__aeabi_dsub>
    5454:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5458:	f001 fa06 	bl	6868 <__aeabi_dmul>
    545c:	a32a      	add	r3, pc, #168	; (adr r3, 5508 <__ieee754_log+0x350>)
    545e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5462:	4606      	mov	r6, r0
    5464:	460f      	mov	r7, r1
    5466:	e9dd 0100 	ldrd	r0, r1, [sp]
    546a:	f001 f9fd 	bl	6868 <__aeabi_dmul>
    546e:	e021      	b.n	54b4 <__ieee754_log+0x2fc>
    5470:	a323      	add	r3, pc, #140	; (adr r3, 5500 <__ieee754_log+0x348>)
    5472:	e9d3 2300 	ldrd	r2, r3, [r3]
    5476:	e9dd 0100 	ldrd	r0, r1, [sp]
    547a:	f001 f9f5 	bl	6868 <__aeabi_dmul>
    547e:	4632      	mov	r2, r6
    5480:	463b      	mov	r3, r7
    5482:	4604      	mov	r4, r0
    5484:	460d      	mov	r5, r1
    5486:	4640      	mov	r0, r8
    5488:	4649      	mov	r1, r9
    548a:	f001 f83b 	bl	6504 <__adddf3>
    548e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5492:	f001 f9e9 	bl	6868 <__aeabi_dmul>
    5496:	a31c      	add	r3, pc, #112	; (adr r3, 5508 <__ieee754_log+0x350>)
    5498:	e9d3 2300 	ldrd	r2, r3, [r3]
    549c:	4680      	mov	r8, r0
    549e:	4689      	mov	r9, r1
    54a0:	e9dd 0100 	ldrd	r0, r1, [sp]
    54a4:	f001 f9e0 	bl	6868 <__aeabi_dmul>
    54a8:	4602      	mov	r2, r0
    54aa:	460b      	mov	r3, r1
    54ac:	4640      	mov	r0, r8
    54ae:	4649      	mov	r1, r9
    54b0:	f001 f828 	bl	6504 <__adddf3>
    54b4:	4602      	mov	r2, r0
    54b6:	460b      	mov	r3, r1
    54b8:	4630      	mov	r0, r6
    54ba:	4639      	mov	r1, r7
    54bc:	f001 f820 	bl	6500 <__aeabi_dsub>
    54c0:	4652      	mov	r2, sl
    54c2:	465b      	mov	r3, fp
    54c4:	f001 f81c 	bl	6500 <__aeabi_dsub>
    54c8:	4602      	mov	r2, r0
    54ca:	460b      	mov	r3, r1
    54cc:	4620      	mov	r0, r4
    54ce:	4629      	mov	r1, r5
    54d0:	f001 f816 	bl	6500 <__aeabi_dsub>
    54d4:	ec41 0b10 	vmov	d0, r0, r1
    54d8:	b005      	add	sp, #20
    54da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    54de:	ee10 2a10 	vmov	r2, s0
    54e2:	460b      	mov	r3, r1
    54e4:	f001 f80c 	bl	6500 <__aeabi_dsub>
    54e8:	2200      	movs	r2, #0
    54ea:	2300      	movs	r3, #0
    54ec:	f001 fae6 	bl	6abc <__aeabi_ddiv>
    54f0:	ec41 0b10 	vmov	d0, r0, r1
    54f4:	e6ce      	b.n	5294 <__ieee754_log+0xdc>
    54f6:	ed9f 0b16 	vldr	d0, [pc, #88]	; 5550 <__ieee754_log+0x398>
    54fa:	e6cb      	b.n	5294 <__ieee754_log+0xdc>
    54fc:	f3af 8000 	nop.w
    5500:	fee00000 	.word	0xfee00000
    5504:	3fe62e42 	.word	0x3fe62e42
    5508:	35793c76 	.word	0x35793c76
    550c:	3dea39ef 	.word	0x3dea39ef
    5510:	df3e5244 	.word	0xdf3e5244
    5514:	3fc2f112 	.word	0x3fc2f112
    5518:	96cb03de 	.word	0x96cb03de
    551c:	3fc74664 	.word	0x3fc74664
    5520:	94229359 	.word	0x94229359
    5524:	3fd24924 	.word	0x3fd24924
    5528:	55555593 	.word	0x55555593
    552c:	3fe55555 	.word	0x3fe55555
    5530:	d078c69f 	.word	0xd078c69f
    5534:	3fc39a09 	.word	0x3fc39a09
    5538:	1d8e78af 	.word	0x1d8e78af
    553c:	3fcc71c5 	.word	0x3fcc71c5
    5540:	9997fa04 	.word	0x9997fa04
    5544:	3fd99999 	.word	0x3fd99999
    5548:	55555555 	.word	0x55555555
    554c:	3fd55555 	.word	0x3fd55555
	...
    5558:	43500000 	.word	0x43500000
    555c:	7fefffff 	.word	0x7fefffff
    5560:	3ff00000 	.word	0x3ff00000
    5564:	3fe00000 	.word	0x3fe00000
    5568:	c3500000 	.word	0xc3500000
    556c:	4620      	mov	r0, r4
    556e:	f001 f915 	bl	679c <__aeabi_i2d>
    5572:	a30f      	add	r3, pc, #60	; (adr r3, 55b0 <__ieee754_log+0x3f8>)
    5574:	e9d3 2300 	ldrd	r2, r3, [r3]
    5578:	4680      	mov	r8, r0
    557a:	4689      	mov	r9, r1
    557c:	f001 f974 	bl	6868 <__aeabi_dmul>
    5580:	a30d      	add	r3, pc, #52	; (adr r3, 55b8 <__ieee754_log+0x400>)
    5582:	e9d3 2300 	ldrd	r2, r3, [r3]
    5586:	4604      	mov	r4, r0
    5588:	460d      	mov	r5, r1
    558a:	4640      	mov	r0, r8
    558c:	4649      	mov	r1, r9
    558e:	f001 f96b 	bl	6868 <__aeabi_dmul>
    5592:	e78f      	b.n	54b4 <__ieee754_log+0x2fc>
    5594:	4602      	mov	r2, r0
    5596:	460b      	mov	r3, r1
    5598:	4650      	mov	r0, sl
    559a:	4659      	mov	r1, fp
    559c:	f000 ffb0 	bl	6500 <__aeabi_dsub>
    55a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    55a4:	f001 f960 	bl	6868 <__aeabi_dmul>
    55a8:	e703      	b.n	53b2 <__ieee754_log+0x1fa>
    55aa:	bf00      	nop
    55ac:	f3af 8000 	nop.w
    55b0:	fee00000 	.word	0xfee00000
    55b4:	3fe62e42 	.word	0x3fe62e42
    55b8:	35793c76 	.word	0x35793c76
    55bc:	3dea39ef 	.word	0x3dea39ef

000055c0 <__ieee754_pow>:
    55c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55c4:	ec51 0b11 	vmov	r0, r1, d1
    55c8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
    55cc:	ea58 0400 	orrs.w	r4, r8, r0
    55d0:	b093      	sub	sp, #76	; 0x4c
    55d2:	d03c      	beq.n	564e <__ieee754_pow+0x8e>
    55d4:	ec53 2b10 	vmov	r2, r3, d0
    55d8:	4e6d      	ldr	r6, [pc, #436]	; (5790 <__ieee754_pow+0x1d0>)
    55da:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
    55de:	42b4      	cmp	r4, r6
    55e0:	ee10 aa10 	vmov	sl, s0
    55e4:	461d      	mov	r5, r3
    55e6:	dc2b      	bgt.n	5640 <__ieee754_pow+0x80>
    55e8:	4689      	mov	r9, r1
    55ea:	ee11 ea10 	vmov	lr, s2
    55ee:	d026      	beq.n	563e <__ieee754_pow+0x7e>
    55f0:	45b0      	cmp	r8, r6
    55f2:	dc25      	bgt.n	5640 <__ieee754_pow+0x80>
    55f4:	4e66      	ldr	r6, [pc, #408]	; (5790 <__ieee754_pow+0x1d0>)
    55f6:	45b0      	cmp	r8, r6
    55f8:	d077      	beq.n	56ea <__ieee754_pow+0x12a>
    55fa:	2d00      	cmp	r5, #0
    55fc:	4616      	mov	r6, r2
    55fe:	461f      	mov	r7, r3
    5600:	e9cd 0100 	strd	r0, r1, [sp]
    5604:	db75      	blt.n	56f2 <__ieee754_pow+0x132>
    5606:	f04f 0b00 	mov.w	fp, #0
    560a:	f1be 0f00 	cmp.w	lr, #0
    560e:	d12d      	bne.n	566c <__ieee754_pow+0xac>
    5610:	4b5f      	ldr	r3, [pc, #380]	; (5790 <__ieee754_pow+0x1d0>)
    5612:	4598      	cmp	r8, r3
    5614:	f000 8089 	beq.w	572a <__ieee754_pow+0x16a>
    5618:	4b5e      	ldr	r3, [pc, #376]	; (5794 <__ieee754_pow+0x1d4>)
    561a:	4598      	cmp	r8, r3
    561c:	d05e      	beq.n	56dc <__ieee754_pow+0x11c>
    561e:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
    5622:	f000 83de 	beq.w	5de2 <__ieee754_pow+0x822>
    5626:	4b5c      	ldr	r3, [pc, #368]	; (5798 <__ieee754_pow+0x1d8>)
    5628:	4599      	cmp	r9, r3
    562a:	d11f      	bne.n	566c <__ieee754_pow+0xac>
    562c:	2d00      	cmp	r5, #0
    562e:	db1d      	blt.n	566c <__ieee754_pow+0xac>
    5630:	ec47 6b10 	vmov	d0, r6, r7
    5634:	b013      	add	sp, #76	; 0x4c
    5636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    563a:	f000 bd49 	b.w	60d0 <__ieee754_sqrt>
    563e:	b15a      	cbz	r2, 5658 <__ieee754_pow+0x98>
    5640:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    5644:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    5648:	ea54 030a 	orrs.w	r3, r4, sl
    564c:	d106      	bne.n	565c <__ieee754_pow+0x9c>
    564e:	ed9f 0b4a 	vldr	d0, [pc, #296]	; 5778 <__ieee754_pow+0x1b8>
    5652:	b013      	add	sp, #76	; 0x4c
    5654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5658:	45a0      	cmp	r8, r4
    565a:	ddcb      	ble.n	55f4 <__ieee754_pow+0x34>
    565c:	484f      	ldr	r0, [pc, #316]	; (579c <__ieee754_pow+0x1dc>)
    565e:	b013      	add	sp, #76	; 0x4c
    5660:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5664:	f000 be18 	b.w	6298 <nan>
    5668:	f04f 0b00 	mov.w	fp, #0
    566c:	ec47 6b10 	vmov	d0, r6, r7
    5670:	f000 fdfe 	bl	6270 <fabs>
    5674:	ec51 0b10 	vmov	r0, r1, d0
    5678:	f1ba 0f00 	cmp.w	sl, #0
    567c:	d01e      	beq.n	56bc <__ieee754_pow+0xfc>
    567e:	0fed      	lsrs	r5, r5, #31
    5680:	f105 3aff 	add.w	sl, r5, #4294967295
    5684:	ea5b 030a 	orrs.w	r3, fp, sl
    5688:	d063      	beq.n	5752 <__ieee754_pow+0x192>
    568a:	4b45      	ldr	r3, [pc, #276]	; (57a0 <__ieee754_pow+0x1e0>)
    568c:	4598      	cmp	r8, r3
    568e:	f340 808d 	ble.w	57ac <__ieee754_pow+0x1ec>
    5692:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    5696:	4598      	cmp	r8, r3
    5698:	f340 8438 	ble.w	5f0c <__ieee754_pow+0x94c>
    569c:	4b41      	ldr	r3, [pc, #260]	; (57a4 <__ieee754_pow+0x1e4>)
    569e:	429c      	cmp	r4, r3
    56a0:	dd62      	ble.n	5768 <__ieee754_pow+0x1a8>
    56a2:	f1b9 0f00 	cmp.w	r9, #0
    56a6:	dd62      	ble.n	576e <__ieee754_pow+0x1ae>
    56a8:	a335      	add	r3, pc, #212	; (adr r3, 5780 <__ieee754_pow+0x1c0>)
    56aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    56ae:	4610      	mov	r0, r2
    56b0:	4619      	mov	r1, r3
    56b2:	f001 f8d9 	bl	6868 <__aeabi_dmul>
    56b6:	ec41 0b10 	vmov	d0, r0, r1
    56ba:	e7ca      	b.n	5652 <__ieee754_pow+0x92>
    56bc:	b124      	cbz	r4, 56c8 <__ieee754_pow+0x108>
    56be:	4b35      	ldr	r3, [pc, #212]	; (5794 <__ieee754_pow+0x1d4>)
    56c0:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
    56c4:	429a      	cmp	r2, r3
    56c6:	d1da      	bne.n	567e <__ieee754_pow+0xbe>
    56c8:	f1b9 0f00 	cmp.w	r9, #0
    56cc:	f2c0 83cb 	blt.w	5e66 <__ieee754_pow+0x8a6>
    56d0:	2d00      	cmp	r5, #0
    56d2:	f2c0 8374 	blt.w	5dbe <__ieee754_pow+0x7fe>
    56d6:	ec41 0b10 	vmov	d0, r0, r1
    56da:	e7ba      	b.n	5652 <__ieee754_pow+0x92>
    56dc:	f1b9 0f00 	cmp.w	r9, #0
    56e0:	f2c0 847a 	blt.w	5fd8 <__ieee754_pow+0xa18>
    56e4:	ec47 6b10 	vmov	d0, r6, r7
    56e8:	e7b3      	b.n	5652 <__ieee754_pow+0x92>
    56ea:	f1be 0f00 	cmp.w	lr, #0
    56ee:	d084      	beq.n	55fa <__ieee754_pow+0x3a>
    56f0:	e7a6      	b.n	5640 <__ieee754_pow+0x80>
    56f2:	4b2d      	ldr	r3, [pc, #180]	; (57a8 <__ieee754_pow+0x1e8>)
    56f4:	4598      	cmp	r8, r3
    56f6:	dc29      	bgt.n	574c <__ieee754_pow+0x18c>
    56f8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    56fc:	4598      	cmp	r8, r3
    56fe:	dd82      	ble.n	5606 <__ieee754_pow+0x46>
    5700:	ea4f 5328 	mov.w	r3, r8, asr #20
    5704:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    5708:	2b14      	cmp	r3, #20
    570a:	f340 847f 	ble.w	600c <__ieee754_pow+0xa4c>
    570e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    5712:	fa2e f203 	lsr.w	r2, lr, r3
    5716:	fa02 f303 	lsl.w	r3, r2, r3
    571a:	459e      	cmp	lr, r3
    571c:	f47f af73 	bne.w	5606 <__ieee754_pow+0x46>
    5720:	f002 0201 	and.w	r2, r2, #1
    5724:	f1c2 0b02 	rsb	fp, r2, #2
    5728:	e76f      	b.n	560a <__ieee754_pow+0x4a>
    572a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
    572e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    5732:	ea53 030a 	orrs.w	r3, r3, sl
    5736:	d08a      	beq.n	564e <__ieee754_pow+0x8e>
    5738:	4b1a      	ldr	r3, [pc, #104]	; (57a4 <__ieee754_pow+0x1e4>)
    573a:	429c      	cmp	r4, r3
    573c:	f340 8385 	ble.w	5e4a <__ieee754_pow+0x88a>
    5740:	f1b9 0f00 	cmp.w	r9, #0
    5744:	db13      	blt.n	576e <__ieee754_pow+0x1ae>
    5746:	ed9d 0b00 	vldr	d0, [sp]
    574a:	e782      	b.n	5652 <__ieee754_pow+0x92>
    574c:	f04f 0b02 	mov.w	fp, #2
    5750:	e75b      	b.n	560a <__ieee754_pow+0x4a>
    5752:	4632      	mov	r2, r6
    5754:	463b      	mov	r3, r7
    5756:	4610      	mov	r0, r2
    5758:	4619      	mov	r1, r3
    575a:	f000 fed1 	bl	6500 <__aeabi_dsub>
    575e:	4602      	mov	r2, r0
    5760:	460b      	mov	r3, r1
    5762:	f001 f9ab 	bl	6abc <__aeabi_ddiv>
    5766:	e7b6      	b.n	56d6 <__ieee754_pow+0x116>
    5768:	f1b9 0f00 	cmp.w	r9, #0
    576c:	db9c      	blt.n	56a8 <__ieee754_pow+0xe8>
    576e:	ed9f 0b06 	vldr	d0, [pc, #24]	; 5788 <__ieee754_pow+0x1c8>
    5772:	e76e      	b.n	5652 <__ieee754_pow+0x92>
    5774:	f3af 8000 	nop.w
    5778:	00000000 	.word	0x00000000
    577c:	3ff00000 	.word	0x3ff00000
    5780:	8800759c 	.word	0x8800759c
    5784:	7e37e43c 	.word	0x7e37e43c
	...
    5790:	7ff00000 	.word	0x7ff00000
    5794:	3ff00000 	.word	0x3ff00000
    5798:	3fe00000 	.word	0x3fe00000
    579c:	00007920 	.word	0x00007920
    57a0:	41e00000 	.word	0x41e00000
    57a4:	3fefffff 	.word	0x3fefffff
    57a8:	433fffff 	.word	0x433fffff
    57ac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    57b0:	f04f 0200 	mov.w	r2, #0
    57b4:	da05      	bge.n	57c2 <__ieee754_pow+0x202>
    57b6:	4bd6      	ldr	r3, [pc, #856]	; (5b10 <__ieee754_pow+0x550>)
    57b8:	f001 f856 	bl	6868 <__aeabi_dmul>
    57bc:	f06f 0234 	mvn.w	r2, #52	; 0x34
    57c0:	460c      	mov	r4, r1
    57c2:	1523      	asrs	r3, r4, #20
    57c4:	4ed3      	ldr	r6, [pc, #844]	; (5b14 <__ieee754_pow+0x554>)
    57c6:	f3c4 0413 	ubfx	r4, r4, #0, #20
    57ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    57ce:	4413      	add	r3, r2
    57d0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
    57d4:	42b4      	cmp	r4, r6
    57d6:	461a      	mov	r2, r3
    57d8:	930d      	str	r3, [sp, #52]	; 0x34
    57da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    57de:	f340 8349 	ble.w	5e74 <__ieee754_pow+0x8b4>
    57e2:	4bcd      	ldr	r3, [pc, #820]	; (5b18 <__ieee754_pow+0x558>)
    57e4:	429c      	cmp	r4, r3
    57e6:	f340 842d 	ble.w	6044 <__ieee754_pow+0xa84>
    57ea:	ed9f 7bb3 	vldr	d7, [pc, #716]	; 5ab8 <__ieee754_pow+0x4f8>
    57ee:	ed8d 7b08 	vstr	d7, [sp, #32]
    57f2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    57f6:	ed9f 7bb2 	vldr	d7, [pc, #712]	; 5ac0 <__ieee754_pow+0x500>
    57fa:	4613      	mov	r3, r2
    57fc:	ed8d 7b06 	vstr	d7, [sp, #24]
    5800:	3301      	adds	r3, #1
    5802:	930d      	str	r3, [sp, #52]	; 0x34
    5804:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
    5808:	f04f 0800 	mov.w	r8, #0
    580c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    5810:	4629      	mov	r1, r5
    5812:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    5816:	f000 fe73 	bl	6500 <__aeabi_dsub>
    581a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    581e:	4606      	mov	r6, r0
    5820:	460f      	mov	r7, r1
    5822:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    5826:	f000 fe6d 	bl	6504 <__adddf3>
    582a:	4602      	mov	r2, r0
    582c:	460b      	mov	r3, r1
    582e:	2000      	movs	r0, #0
    5830:	49ba      	ldr	r1, [pc, #744]	; (5b1c <__ieee754_pow+0x55c>)
    5832:	f001 f943 	bl	6abc <__aeabi_ddiv>
    5836:	4603      	mov	r3, r0
    5838:	460c      	mov	r4, r1
    583a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    583e:	4602      	mov	r2, r0
    5840:	460b      	mov	r3, r1
    5842:	4630      	mov	r0, r6
    5844:	4639      	mov	r1, r7
    5846:	f001 f80f 	bl	6868 <__aeabi_dmul>
    584a:	106b      	asrs	r3, r5, #1
    584c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    5850:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    5854:	eb03 0508 	add.w	r5, r3, r8
    5858:	460a      	mov	r2, r1
    585a:	2300      	movs	r3, #0
    585c:	4601      	mov	r1, r0
    585e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    5862:	9302      	str	r3, [sp, #8]
    5864:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
    5868:	2400      	movs	r4, #0
    586a:	e9cd 1204 	strd	r1, r2, [sp, #16]
    586e:	462b      	mov	r3, r5
    5870:	4622      	mov	r2, r4
    5872:	4640      	mov	r0, r8
    5874:	4649      	mov	r1, r9
    5876:	f000 fff7 	bl	6868 <__aeabi_dmul>
    587a:	4602      	mov	r2, r0
    587c:	460b      	mov	r3, r1
    587e:	4630      	mov	r0, r6
    5880:	4639      	mov	r1, r7
    5882:	f000 fe3d 	bl	6500 <__aeabi_dsub>
    5886:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    588a:	4606      	mov	r6, r0
    588c:	460f      	mov	r7, r1
    588e:	4620      	mov	r0, r4
    5890:	4629      	mov	r1, r5
    5892:	f000 fe35 	bl	6500 <__aeabi_dsub>
    5896:	4602      	mov	r2, r0
    5898:	460b      	mov	r3, r1
    589a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    589e:	f000 fe2f 	bl	6500 <__aeabi_dsub>
    58a2:	4642      	mov	r2, r8
    58a4:	464b      	mov	r3, r9
    58a6:	f000 ffdf 	bl	6868 <__aeabi_dmul>
    58aa:	4602      	mov	r2, r0
    58ac:	460b      	mov	r3, r1
    58ae:	4630      	mov	r0, r6
    58b0:	4639      	mov	r1, r7
    58b2:	f000 fe25 	bl	6500 <__aeabi_dsub>
    58b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    58ba:	f000 ffd5 	bl	6868 <__aeabi_dmul>
    58be:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    58c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
    58c6:	4622      	mov	r2, r4
    58c8:	462b      	mov	r3, r5
    58ca:	4620      	mov	r0, r4
    58cc:	4629      	mov	r1, r5
    58ce:	f000 ffcb 	bl	6868 <__aeabi_dmul>
    58d2:	a37d      	add	r3, pc, #500	; (adr r3, 5ac8 <__ieee754_pow+0x508>)
    58d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    58d8:	4604      	mov	r4, r0
    58da:	460d      	mov	r5, r1
    58dc:	f000 ffc4 	bl	6868 <__aeabi_dmul>
    58e0:	a37b      	add	r3, pc, #492	; (adr r3, 5ad0 <__ieee754_pow+0x510>)
    58e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    58e6:	f000 fe0d 	bl	6504 <__adddf3>
    58ea:	4622      	mov	r2, r4
    58ec:	462b      	mov	r3, r5
    58ee:	f000 ffbb 	bl	6868 <__aeabi_dmul>
    58f2:	a379      	add	r3, pc, #484	; (adr r3, 5ad8 <__ieee754_pow+0x518>)
    58f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    58f8:	f000 fe04 	bl	6504 <__adddf3>
    58fc:	4622      	mov	r2, r4
    58fe:	462b      	mov	r3, r5
    5900:	f000 ffb2 	bl	6868 <__aeabi_dmul>
    5904:	a376      	add	r3, pc, #472	; (adr r3, 5ae0 <__ieee754_pow+0x520>)
    5906:	e9d3 2300 	ldrd	r2, r3, [r3]
    590a:	f000 fdfb 	bl	6504 <__adddf3>
    590e:	4622      	mov	r2, r4
    5910:	462b      	mov	r3, r5
    5912:	f000 ffa9 	bl	6868 <__aeabi_dmul>
    5916:	a374      	add	r3, pc, #464	; (adr r3, 5ae8 <__ieee754_pow+0x528>)
    5918:	e9d3 2300 	ldrd	r2, r3, [r3]
    591c:	f000 fdf2 	bl	6504 <__adddf3>
    5920:	4622      	mov	r2, r4
    5922:	462b      	mov	r3, r5
    5924:	f000 ffa0 	bl	6868 <__aeabi_dmul>
    5928:	a371      	add	r3, pc, #452	; (adr r3, 5af0 <__ieee754_pow+0x530>)
    592a:	e9d3 2300 	ldrd	r2, r3, [r3]
    592e:	f000 fde9 	bl	6504 <__adddf3>
    5932:	4622      	mov	r2, r4
    5934:	4606      	mov	r6, r0
    5936:	460f      	mov	r7, r1
    5938:	462b      	mov	r3, r5
    593a:	4620      	mov	r0, r4
    593c:	4629      	mov	r1, r5
    593e:	f000 ff93 	bl	6868 <__aeabi_dmul>
    5942:	4602      	mov	r2, r0
    5944:	460b      	mov	r3, r1
    5946:	4630      	mov	r0, r6
    5948:	4639      	mov	r1, r7
    594a:	f000 ff8d 	bl	6868 <__aeabi_dmul>
    594e:	4642      	mov	r2, r8
    5950:	4604      	mov	r4, r0
    5952:	460d      	mov	r5, r1
    5954:	464b      	mov	r3, r9
    5956:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    595a:	f000 fdd3 	bl	6504 <__adddf3>
    595e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    5962:	f000 ff81 	bl	6868 <__aeabi_dmul>
    5966:	4622      	mov	r2, r4
    5968:	462b      	mov	r3, r5
    596a:	f000 fdcb 	bl	6504 <__adddf3>
    596e:	4642      	mov	r2, r8
    5970:	4606      	mov	r6, r0
    5972:	460f      	mov	r7, r1
    5974:	464b      	mov	r3, r9
    5976:	4640      	mov	r0, r8
    5978:	4649      	mov	r1, r9
    597a:	f000 ff75 	bl	6868 <__aeabi_dmul>
    597e:	2200      	movs	r2, #0
    5980:	4b67      	ldr	r3, [pc, #412]	; (5b20 <__ieee754_pow+0x560>)
    5982:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    5986:	f000 fdbd 	bl	6504 <__adddf3>
    598a:	4632      	mov	r2, r6
    598c:	463b      	mov	r3, r7
    598e:	f000 fdb9 	bl	6504 <__adddf3>
    5992:	9802      	ldr	r0, [sp, #8]
    5994:	460d      	mov	r5, r1
    5996:	4604      	mov	r4, r0
    5998:	4622      	mov	r2, r4
    599a:	462b      	mov	r3, r5
    599c:	4640      	mov	r0, r8
    599e:	4649      	mov	r1, r9
    59a0:	f000 ff62 	bl	6868 <__aeabi_dmul>
    59a4:	2200      	movs	r2, #0
    59a6:	4680      	mov	r8, r0
    59a8:	4689      	mov	r9, r1
    59aa:	4b5d      	ldr	r3, [pc, #372]	; (5b20 <__ieee754_pow+0x560>)
    59ac:	4620      	mov	r0, r4
    59ae:	4629      	mov	r1, r5
    59b0:	f000 fda6 	bl	6500 <__aeabi_dsub>
    59b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    59b8:	f000 fda2 	bl	6500 <__aeabi_dsub>
    59bc:	4602      	mov	r2, r0
    59be:	460b      	mov	r3, r1
    59c0:	4630      	mov	r0, r6
    59c2:	4639      	mov	r1, r7
    59c4:	f000 fd9c 	bl	6500 <__aeabi_dsub>
    59c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    59cc:	f000 ff4c 	bl	6868 <__aeabi_dmul>
    59d0:	4622      	mov	r2, r4
    59d2:	4606      	mov	r6, r0
    59d4:	460f      	mov	r7, r1
    59d6:	462b      	mov	r3, r5
    59d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    59dc:	f000 ff44 	bl	6868 <__aeabi_dmul>
    59e0:	4602      	mov	r2, r0
    59e2:	460b      	mov	r3, r1
    59e4:	4630      	mov	r0, r6
    59e6:	4639      	mov	r1, r7
    59e8:	f000 fd8c 	bl	6504 <__adddf3>
    59ec:	4606      	mov	r6, r0
    59ee:	460f      	mov	r7, r1
    59f0:	4602      	mov	r2, r0
    59f2:	460b      	mov	r3, r1
    59f4:	4640      	mov	r0, r8
    59f6:	4649      	mov	r1, r9
    59f8:	e9cd 8904 	strd	r8, r9, [sp, #16]
    59fc:	f000 fd82 	bl	6504 <__adddf3>
    5a00:	9802      	ldr	r0, [sp, #8]
    5a02:	a33d      	add	r3, pc, #244	; (adr r3, 5af8 <__ieee754_pow+0x538>)
    5a04:	e9d3 2300 	ldrd	r2, r3, [r3]
    5a08:	4604      	mov	r4, r0
    5a0a:	460d      	mov	r5, r1
    5a0c:	f000 ff2c 	bl	6868 <__aeabi_dmul>
    5a10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    5a14:	4680      	mov	r8, r0
    5a16:	4689      	mov	r9, r1
    5a18:	4620      	mov	r0, r4
    5a1a:	4629      	mov	r1, r5
    5a1c:	f000 fd70 	bl	6500 <__aeabi_dsub>
    5a20:	4602      	mov	r2, r0
    5a22:	460b      	mov	r3, r1
    5a24:	4630      	mov	r0, r6
    5a26:	4639      	mov	r1, r7
    5a28:	f000 fd6a 	bl	6500 <__aeabi_dsub>
    5a2c:	a334      	add	r3, pc, #208	; (adr r3, 5b00 <__ieee754_pow+0x540>)
    5a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5a32:	f000 ff19 	bl	6868 <__aeabi_dmul>
    5a36:	a334      	add	r3, pc, #208	; (adr r3, 5b08 <__ieee754_pow+0x548>)
    5a38:	e9d3 2300 	ldrd	r2, r3, [r3]
    5a3c:	4606      	mov	r6, r0
    5a3e:	460f      	mov	r7, r1
    5a40:	4620      	mov	r0, r4
    5a42:	4629      	mov	r1, r5
    5a44:	f000 ff10 	bl	6868 <__aeabi_dmul>
    5a48:	4602      	mov	r2, r0
    5a4a:	460b      	mov	r3, r1
    5a4c:	4630      	mov	r0, r6
    5a4e:	4639      	mov	r1, r7
    5a50:	f000 fd58 	bl	6504 <__adddf3>
    5a54:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    5a58:	f000 fd54 	bl	6504 <__adddf3>
    5a5c:	4606      	mov	r6, r0
    5a5e:	980d      	ldr	r0, [sp, #52]	; 0x34
    5a60:	460f      	mov	r7, r1
    5a62:	f000 fe9b 	bl	679c <__aeabi_i2d>
    5a66:	4632      	mov	r2, r6
    5a68:	4604      	mov	r4, r0
    5a6a:	460d      	mov	r5, r1
    5a6c:	463b      	mov	r3, r7
    5a6e:	4640      	mov	r0, r8
    5a70:	4649      	mov	r1, r9
    5a72:	f000 fd47 	bl	6504 <__adddf3>
    5a76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    5a7a:	f000 fd43 	bl	6504 <__adddf3>
    5a7e:	4622      	mov	r2, r4
    5a80:	462b      	mov	r3, r5
    5a82:	f000 fd3f 	bl	6504 <__adddf3>
    5a86:	9802      	ldr	r0, [sp, #8]
    5a88:	4622      	mov	r2, r4
    5a8a:	462b      	mov	r3, r5
    5a8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    5a90:	f000 fd36 	bl	6500 <__aeabi_dsub>
    5a94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    5a98:	f000 fd32 	bl	6500 <__aeabi_dsub>
    5a9c:	4642      	mov	r2, r8
    5a9e:	464b      	mov	r3, r9
    5aa0:	f000 fd2e 	bl	6500 <__aeabi_dsub>
    5aa4:	4602      	mov	r2, r0
    5aa6:	460b      	mov	r3, r1
    5aa8:	4630      	mov	r0, r6
    5aaa:	4639      	mov	r1, r7
    5aac:	f000 fd28 	bl	6500 <__aeabi_dsub>
    5ab0:	4680      	mov	r8, r0
    5ab2:	4689      	mov	r9, r1
    5ab4:	e036      	b.n	5b24 <__ieee754_pow+0x564>
    5ab6:	bf00      	nop
	...
    5ac4:	3ff00000 	.word	0x3ff00000
    5ac8:	4a454eef 	.word	0x4a454eef
    5acc:	3fca7e28 	.word	0x3fca7e28
    5ad0:	93c9db65 	.word	0x93c9db65
    5ad4:	3fcd864a 	.word	0x3fcd864a
    5ad8:	a91d4101 	.word	0xa91d4101
    5adc:	3fd17460 	.word	0x3fd17460
    5ae0:	518f264d 	.word	0x518f264d
    5ae4:	3fd55555 	.word	0x3fd55555
    5ae8:	db6fabff 	.word	0xdb6fabff
    5aec:	3fdb6db6 	.word	0x3fdb6db6
    5af0:	33333303 	.word	0x33333303
    5af4:	3fe33333 	.word	0x3fe33333
    5af8:	e0000000 	.word	0xe0000000
    5afc:	3feec709 	.word	0x3feec709
    5b00:	dc3a03fd 	.word	0xdc3a03fd
    5b04:	3feec709 	.word	0x3feec709
    5b08:	145b01f5 	.word	0x145b01f5
    5b0c:	be3e2fe0 	.word	0xbe3e2fe0
    5b10:	43400000 	.word	0x43400000
    5b14:	0003988e 	.word	0x0003988e
    5b18:	000bb679 	.word	0x000bb679
    5b1c:	3ff00000 	.word	0x3ff00000
    5b20:	40080000 	.word	0x40080000
    5b24:	f10b 33ff 	add.w	r3, fp, #4294967295
    5b28:	ea53 030a 	orrs.w	r3, r3, sl
    5b2c:	f000 8188 	beq.w	5e40 <__ieee754_pow+0x880>
    5b30:	ed9f 7bd7 	vldr	d7, [pc, #860]	; 5e90 <__ieee754_pow+0x8d0>
    5b34:	ed8d 7b06 	vstr	d7, [sp, #24]
    5b38:	e9dd ab00 	ldrd	sl, fp, [sp]
    5b3c:	4653      	mov	r3, sl
    5b3e:	465c      	mov	r4, fp
    5b40:	e9cd 3400 	strd	r3, r4, [sp]
    5b44:	2300      	movs	r3, #0
    5b46:	9300      	str	r3, [sp, #0]
    5b48:	e9dd 4500 	ldrd	r4, r5, [sp]
    5b4c:	4650      	mov	r0, sl
    5b4e:	4622      	mov	r2, r4
    5b50:	462b      	mov	r3, r5
    5b52:	4659      	mov	r1, fp
    5b54:	f000 fcd4 	bl	6500 <__aeabi_dsub>
    5b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5b5c:	f000 fe84 	bl	6868 <__aeabi_dmul>
    5b60:	4652      	mov	r2, sl
    5b62:	4606      	mov	r6, r0
    5b64:	460f      	mov	r7, r1
    5b66:	465b      	mov	r3, fp
    5b68:	4640      	mov	r0, r8
    5b6a:	4649      	mov	r1, r9
    5b6c:	f000 fe7c 	bl	6868 <__aeabi_dmul>
    5b70:	4602      	mov	r2, r0
    5b72:	460b      	mov	r3, r1
    5b74:	4630      	mov	r0, r6
    5b76:	4639      	mov	r1, r7
    5b78:	f000 fcc4 	bl	6504 <__adddf3>
    5b7c:	4622      	mov	r2, r4
    5b7e:	4680      	mov	r8, r0
    5b80:	4689      	mov	r9, r1
    5b82:	462b      	mov	r3, r5
    5b84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    5b88:	e9cd 8904 	strd	r8, r9, [sp, #16]
    5b8c:	f000 fe6c 	bl	6868 <__aeabi_dmul>
    5b90:	460b      	mov	r3, r1
    5b92:	4602      	mov	r2, r0
    5b94:	4606      	mov	r6, r0
    5b96:	460f      	mov	r7, r1
    5b98:	4640      	mov	r0, r8
    5b9a:	4649      	mov	r1, r9
    5b9c:	f000 fcb2 	bl	6504 <__adddf3>
    5ba0:	4bd5      	ldr	r3, [pc, #852]	; (5ef8 <__ieee754_pow+0x938>)
    5ba2:	4299      	cmp	r1, r3
    5ba4:	4604      	mov	r4, r0
    5ba6:	460d      	mov	r5, r1
    5ba8:	468a      	mov	sl, r1
    5baa:	f340 8123 	ble.w	5df4 <__ieee754_pow+0x834>
    5bae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    5bb2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    5bb6:	4303      	orrs	r3, r0
    5bb8:	f040 8218 	bne.w	5fec <__ieee754_pow+0xa2c>
    5bbc:	a3b6      	add	r3, pc, #728	; (adr r3, 5e98 <__ieee754_pow+0x8d8>)
    5bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
    5bc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    5bc6:	f000 fc9d 	bl	6504 <__adddf3>
    5bca:	4632      	mov	r2, r6
    5bcc:	4680      	mov	r8, r0
    5bce:	4689      	mov	r9, r1
    5bd0:	463b      	mov	r3, r7
    5bd2:	4620      	mov	r0, r4
    5bd4:	4629      	mov	r1, r5
    5bd6:	f000 fc93 	bl	6500 <__aeabi_dsub>
    5bda:	4602      	mov	r2, r0
    5bdc:	460b      	mov	r3, r1
    5bde:	4640      	mov	r0, r8
    5be0:	4649      	mov	r1, r9
    5be2:	f001 f8d1 	bl	6d88 <__aeabi_dcmpgt>
    5be6:	2800      	cmp	r0, #0
    5be8:	f040 8200 	bne.w	5fec <__ieee754_pow+0xa2c>
    5bec:	46a8      	mov	r8, r5
    5bee:	ea4f 5328 	mov.w	r3, r8, asr #20
    5bf2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    5bf6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    5bfa:	fa42 f303 	asr.w	r3, r2, r3
    5bfe:	4453      	add	r3, sl
    5c00:	f3c3 520a 	ubfx	r2, r3, #20, #11
    5c04:	4dbd      	ldr	r5, [pc, #756]	; (5efc <__ieee754_pow+0x93c>)
    5c06:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    5c0a:	4115      	asrs	r5, r2
    5c0c:	f3c3 0b13 	ubfx	fp, r3, #0, #20
    5c10:	2000      	movs	r0, #0
    5c12:	f1c2 0414 	rsb	r4, r2, #20
    5c16:	ea23 0105 	bic.w	r1, r3, r5
    5c1a:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
    5c1e:	f1ba 0f00 	cmp.w	sl, #0
    5c22:	4602      	mov	r2, r0
    5c24:	460b      	mov	r3, r1
    5c26:	fa4b fb04 	asr.w	fp, fp, r4
    5c2a:	4630      	mov	r0, r6
    5c2c:	4639      	mov	r1, r7
    5c2e:	bfb8      	it	lt
    5c30:	f1cb 0b00 	rsblt	fp, fp, #0
    5c34:	f000 fc64 	bl	6500 <__aeabi_dsub>
    5c38:	4602      	mov	r2, r0
    5c3a:	460b      	mov	r3, r1
    5c3c:	4606      	mov	r6, r0
    5c3e:	460f      	mov	r7, r1
    5c40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    5c44:	f000 fc5e 	bl	6504 <__adddf3>
    5c48:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
    5c4c:	2400      	movs	r4, #0
    5c4e:	a394      	add	r3, pc, #592	; (adr r3, 5ea0 <__ieee754_pow+0x8e0>)
    5c50:	e9d3 2300 	ldrd	r2, r3, [r3]
    5c54:	4620      	mov	r0, r4
    5c56:	460d      	mov	r5, r1
    5c58:	f000 fe06 	bl	6868 <__aeabi_dmul>
    5c5c:	4632      	mov	r2, r6
    5c5e:	4680      	mov	r8, r0
    5c60:	4689      	mov	r9, r1
    5c62:	463b      	mov	r3, r7
    5c64:	4620      	mov	r0, r4
    5c66:	4629      	mov	r1, r5
    5c68:	f000 fc4a 	bl	6500 <__aeabi_dsub>
    5c6c:	4602      	mov	r2, r0
    5c6e:	460b      	mov	r3, r1
    5c70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    5c74:	f000 fc44 	bl	6500 <__aeabi_dsub>
    5c78:	a38b      	add	r3, pc, #556	; (adr r3, 5ea8 <__ieee754_pow+0x8e8>)
    5c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    5c7e:	f000 fdf3 	bl	6868 <__aeabi_dmul>
    5c82:	a38b      	add	r3, pc, #556	; (adr r3, 5eb0 <__ieee754_pow+0x8f0>)
    5c84:	e9d3 2300 	ldrd	r2, r3, [r3]
    5c88:	4606      	mov	r6, r0
    5c8a:	460f      	mov	r7, r1
    5c8c:	4620      	mov	r0, r4
    5c8e:	4629      	mov	r1, r5
    5c90:	f000 fdea 	bl	6868 <__aeabi_dmul>
    5c94:	4602      	mov	r2, r0
    5c96:	460b      	mov	r3, r1
    5c98:	4630      	mov	r0, r6
    5c9a:	4639      	mov	r1, r7
    5c9c:	f000 fc32 	bl	6504 <__adddf3>
    5ca0:	4606      	mov	r6, r0
    5ca2:	460f      	mov	r7, r1
    5ca4:	4602      	mov	r2, r0
    5ca6:	460b      	mov	r3, r1
    5ca8:	4640      	mov	r0, r8
    5caa:	4649      	mov	r1, r9
    5cac:	f000 fc2a 	bl	6504 <__adddf3>
    5cb0:	4642      	mov	r2, r8
    5cb2:	464b      	mov	r3, r9
    5cb4:	4604      	mov	r4, r0
    5cb6:	460d      	mov	r5, r1
    5cb8:	f000 fc22 	bl	6500 <__aeabi_dsub>
    5cbc:	4602      	mov	r2, r0
    5cbe:	460b      	mov	r3, r1
    5cc0:	4630      	mov	r0, r6
    5cc2:	4639      	mov	r1, r7
    5cc4:	f000 fc1c 	bl	6500 <__aeabi_dsub>
    5cc8:	4622      	mov	r2, r4
    5cca:	4680      	mov	r8, r0
    5ccc:	4689      	mov	r9, r1
    5cce:	462b      	mov	r3, r5
    5cd0:	4620      	mov	r0, r4
    5cd2:	4629      	mov	r1, r5
    5cd4:	f000 fdc8 	bl	6868 <__aeabi_dmul>
    5cd8:	a377      	add	r3, pc, #476	; (adr r3, 5eb8 <__ieee754_pow+0x8f8>)
    5cda:	e9d3 2300 	ldrd	r2, r3, [r3]
    5cde:	4606      	mov	r6, r0
    5ce0:	460f      	mov	r7, r1
    5ce2:	f000 fdc1 	bl	6868 <__aeabi_dmul>
    5ce6:	a376      	add	r3, pc, #472	; (adr r3, 5ec0 <__ieee754_pow+0x900>)
    5ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
    5cec:	f000 fc08 	bl	6500 <__aeabi_dsub>
    5cf0:	4632      	mov	r2, r6
    5cf2:	463b      	mov	r3, r7
    5cf4:	f000 fdb8 	bl	6868 <__aeabi_dmul>
    5cf8:	a373      	add	r3, pc, #460	; (adr r3, 5ec8 <__ieee754_pow+0x908>)
    5cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
    5cfe:	f000 fc01 	bl	6504 <__adddf3>
    5d02:	4632      	mov	r2, r6
    5d04:	463b      	mov	r3, r7
    5d06:	f000 fdaf 	bl	6868 <__aeabi_dmul>
    5d0a:	a371      	add	r3, pc, #452	; (adr r3, 5ed0 <__ieee754_pow+0x910>)
    5d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5d10:	f000 fbf6 	bl	6500 <__aeabi_dsub>
    5d14:	4632      	mov	r2, r6
    5d16:	463b      	mov	r3, r7
    5d18:	f000 fda6 	bl	6868 <__aeabi_dmul>
    5d1c:	a36e      	add	r3, pc, #440	; (adr r3, 5ed8 <__ieee754_pow+0x918>)
    5d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5d22:	f000 fbef 	bl	6504 <__adddf3>
    5d26:	4632      	mov	r2, r6
    5d28:	463b      	mov	r3, r7
    5d2a:	f000 fd9d 	bl	6868 <__aeabi_dmul>
    5d2e:	4602      	mov	r2, r0
    5d30:	460b      	mov	r3, r1
    5d32:	4620      	mov	r0, r4
    5d34:	4629      	mov	r1, r5
    5d36:	f000 fbe3 	bl	6500 <__aeabi_dsub>
    5d3a:	4606      	mov	r6, r0
    5d3c:	460f      	mov	r7, r1
    5d3e:	4602      	mov	r2, r0
    5d40:	460b      	mov	r3, r1
    5d42:	4620      	mov	r0, r4
    5d44:	4629      	mov	r1, r5
    5d46:	f000 fd8f 	bl	6868 <__aeabi_dmul>
    5d4a:	2200      	movs	r2, #0
    5d4c:	e9cd 0100 	strd	r0, r1, [sp]
    5d50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d54:	4630      	mov	r0, r6
    5d56:	4639      	mov	r1, r7
    5d58:	f000 fbd2 	bl	6500 <__aeabi_dsub>
    5d5c:	4602      	mov	r2, r0
    5d5e:	460b      	mov	r3, r1
    5d60:	e9dd 0100 	ldrd	r0, r1, [sp]
    5d64:	f000 feaa 	bl	6abc <__aeabi_ddiv>
    5d68:	4642      	mov	r2, r8
    5d6a:	4606      	mov	r6, r0
    5d6c:	460f      	mov	r7, r1
    5d6e:	464b      	mov	r3, r9
    5d70:	4620      	mov	r0, r4
    5d72:	4629      	mov	r1, r5
    5d74:	f000 fd78 	bl	6868 <__aeabi_dmul>
    5d78:	4642      	mov	r2, r8
    5d7a:	464b      	mov	r3, r9
    5d7c:	f000 fbc2 	bl	6504 <__adddf3>
    5d80:	4602      	mov	r2, r0
    5d82:	460b      	mov	r3, r1
    5d84:	4630      	mov	r0, r6
    5d86:	4639      	mov	r1, r7
    5d88:	f000 fbba 	bl	6500 <__aeabi_dsub>
    5d8c:	4622      	mov	r2, r4
    5d8e:	462b      	mov	r3, r5
    5d90:	f000 fbb6 	bl	6500 <__aeabi_dsub>
    5d94:	4602      	mov	r2, r0
    5d96:	460b      	mov	r3, r1
    5d98:	2000      	movs	r0, #0
    5d9a:	4959      	ldr	r1, [pc, #356]	; (5f00 <__ieee754_pow+0x940>)
    5d9c:	f000 fbb0 	bl	6500 <__aeabi_dsub>
    5da0:	448a      	add	sl, r1
    5da2:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
    5da6:	4602      	mov	r2, r0
    5da8:	460b      	mov	r3, r1
    5daa:	f2c0 815b 	blt.w	6064 <__ieee754_pow+0xaa4>
    5dae:	4651      	mov	r1, sl
    5db0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    5db4:	f000 fd58 	bl	6868 <__aeabi_dmul>
    5db8:	ec41 0b10 	vmov	d0, r0, r1
    5dbc:	e449      	b.n	5652 <__ieee754_pow+0x92>
    5dbe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    5dc2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    5dc6:	ea54 030b 	orrs.w	r3, r4, fp
    5dca:	f000 8137 	beq.w	603c <__ieee754_pow+0xa7c>
    5dce:	f1bb 0f01 	cmp.w	fp, #1
    5dd2:	f47f ac80 	bne.w	56d6 <__ieee754_pow+0x116>
    5dd6:	4602      	mov	r2, r0
    5dd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    5ddc:	ec43 2b10 	vmov	d0, r2, r3
    5de0:	e437      	b.n	5652 <__ieee754_pow+0x92>
    5de2:	4632      	mov	r2, r6
    5de4:	463b      	mov	r3, r7
    5de6:	4630      	mov	r0, r6
    5de8:	4639      	mov	r1, r7
    5dea:	f000 fd3d 	bl	6868 <__aeabi_dmul>
    5dee:	ec41 0b10 	vmov	d0, r0, r1
    5df2:	e42e      	b.n	5652 <__ieee754_pow+0x92>
    5df4:	4b43      	ldr	r3, [pc, #268]	; (5f04 <__ieee754_pow+0x944>)
    5df6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
    5dfa:	4598      	cmp	r8, r3
    5dfc:	f340 8115 	ble.w	602a <__ieee754_pow+0xa6a>
    5e00:	4b41      	ldr	r3, [pc, #260]	; (5f08 <__ieee754_pow+0x948>)
    5e02:	440b      	add	r3, r1
    5e04:	4303      	orrs	r3, r0
    5e06:	d10c      	bne.n	5e22 <__ieee754_pow+0x862>
    5e08:	4632      	mov	r2, r6
    5e0a:	463b      	mov	r3, r7
    5e0c:	f000 fb78 	bl	6500 <__aeabi_dsub>
    5e10:	4602      	mov	r2, r0
    5e12:	460b      	mov	r3, r1
    5e14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    5e18:	f000 ffa2 	bl	6d60 <__aeabi_dcmple>
    5e1c:	2800      	cmp	r0, #0
    5e1e:	f43f aee6 	beq.w	5bee <__ieee754_pow+0x62e>
    5e22:	a32f      	add	r3, pc, #188	; (adr r3, 5ee0 <__ieee754_pow+0x920>)
    5e24:	e9d3 2300 	ldrd	r2, r3, [r3]
    5e28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    5e2c:	f000 fd1c 	bl	6868 <__aeabi_dmul>
    5e30:	a32b      	add	r3, pc, #172	; (adr r3, 5ee0 <__ieee754_pow+0x920>)
    5e32:	e9d3 2300 	ldrd	r2, r3, [r3]
    5e36:	f000 fd17 	bl	6868 <__aeabi_dmul>
    5e3a:	ec41 0b10 	vmov	d0, r0, r1
    5e3e:	e408      	b.n	5652 <__ieee754_pow+0x92>
    5e40:	ed9f 7b29 	vldr	d7, [pc, #164]	; 5ee8 <__ieee754_pow+0x928>
    5e44:	ed8d 7b06 	vstr	d7, [sp, #24]
    5e48:	e676      	b.n	5b38 <__ieee754_pow+0x578>
    5e4a:	f1b9 0f00 	cmp.w	r9, #0
    5e4e:	f6bf ac8e 	bge.w	576e <__ieee754_pow+0x1ae>
    5e52:	e9dd 3400 	ldrd	r3, r4, [sp]
    5e56:	ee00 3a10 	vmov	s0, r3
    5e5a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
    5e5e:	ee00 3a90 	vmov	s1, r3
    5e62:	f7ff bbf6 	b.w	5652 <__ieee754_pow+0x92>
    5e66:	4602      	mov	r2, r0
    5e68:	460b      	mov	r3, r1
    5e6a:	2000      	movs	r0, #0
    5e6c:	4924      	ldr	r1, [pc, #144]	; (5f00 <__ieee754_pow+0x940>)
    5e6e:	f000 fe25 	bl	6abc <__aeabi_ddiv>
    5e72:	e42d      	b.n	56d0 <__ieee754_pow+0x110>
    5e74:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 5ef0 <__ieee754_pow+0x930>
    5e78:	ed8d 7b08 	vstr	d7, [sp, #32]
    5e7c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    5e80:	ed9f 7b03 	vldr	d7, [pc, #12]	; 5e90 <__ieee754_pow+0x8d0>
    5e84:	f04f 0800 	mov.w	r8, #0
    5e88:	ed8d 7b06 	vstr	d7, [sp, #24]
    5e8c:	e4be      	b.n	580c <__ieee754_pow+0x24c>
    5e8e:	bf00      	nop
    5e90:	00000000 	.word	0x00000000
    5e94:	3ff00000 	.word	0x3ff00000
    5e98:	652b82fe 	.word	0x652b82fe
    5e9c:	3c971547 	.word	0x3c971547
    5ea0:	00000000 	.word	0x00000000
    5ea4:	3fe62e43 	.word	0x3fe62e43
    5ea8:	fefa39ef 	.word	0xfefa39ef
    5eac:	3fe62e42 	.word	0x3fe62e42
    5eb0:	0ca86c39 	.word	0x0ca86c39
    5eb4:	be205c61 	.word	0xbe205c61
    5eb8:	72bea4d0 	.word	0x72bea4d0
    5ebc:	3e663769 	.word	0x3e663769
    5ec0:	c5d26bf1 	.word	0xc5d26bf1
    5ec4:	3ebbbd41 	.word	0x3ebbbd41
    5ec8:	af25de2c 	.word	0xaf25de2c
    5ecc:	3f11566a 	.word	0x3f11566a
    5ed0:	16bebd93 	.word	0x16bebd93
    5ed4:	3f66c16c 	.word	0x3f66c16c
    5ed8:	5555553e 	.word	0x5555553e
    5edc:	3fc55555 	.word	0x3fc55555
    5ee0:	c2f8f359 	.word	0xc2f8f359
    5ee4:	01a56e1f 	.word	0x01a56e1f
    5ee8:	00000000 	.word	0x00000000
    5eec:	bff00000 	.word	0xbff00000
	...
    5ef8:	408fffff 	.word	0x408fffff
    5efc:	000fffff 	.word	0x000fffff
    5f00:	3ff00000 	.word	0x3ff00000
    5f04:	4090cbff 	.word	0x4090cbff
    5f08:	3f6f3400 	.word	0x3f6f3400
    5f0c:	4b6c      	ldr	r3, [pc, #432]	; (60c0 <__ieee754_pow+0xb00>)
    5f0e:	429c      	cmp	r4, r3
    5f10:	f77f ac2a 	ble.w	5768 <__ieee754_pow+0x1a8>
    5f14:	4b6b      	ldr	r3, [pc, #428]	; (60c4 <__ieee754_pow+0xb04>)
    5f16:	429c      	cmp	r4, r3
    5f18:	f73f abc3 	bgt.w	56a2 <__ieee754_pow+0xe2>
    5f1c:	2200      	movs	r2, #0
    5f1e:	4b69      	ldr	r3, [pc, #420]	; (60c4 <__ieee754_pow+0xb04>)
    5f20:	f000 faee 	bl	6500 <__aeabi_dsub>
    5f24:	a356      	add	r3, pc, #344	; (adr r3, 6080 <__ieee754_pow+0xac0>)
    5f26:	e9d3 2300 	ldrd	r2, r3, [r3]
    5f2a:	4604      	mov	r4, r0
    5f2c:	460d      	mov	r5, r1
    5f2e:	f000 fc9b 	bl	6868 <__aeabi_dmul>
    5f32:	a355      	add	r3, pc, #340	; (adr r3, 6088 <__ieee754_pow+0xac8>)
    5f34:	e9d3 2300 	ldrd	r2, r3, [r3]
    5f38:	4680      	mov	r8, r0
    5f3a:	4689      	mov	r9, r1
    5f3c:	4620      	mov	r0, r4
    5f3e:	4629      	mov	r1, r5
    5f40:	f000 fc92 	bl	6868 <__aeabi_dmul>
    5f44:	2200      	movs	r2, #0
    5f46:	e9cd 0102 	strd	r0, r1, [sp, #8]
    5f4a:	4b5f      	ldr	r3, [pc, #380]	; (60c8 <__ieee754_pow+0xb08>)
    5f4c:	4620      	mov	r0, r4
    5f4e:	4629      	mov	r1, r5
    5f50:	f000 fc8a 	bl	6868 <__aeabi_dmul>
    5f54:	4602      	mov	r2, r0
    5f56:	460b      	mov	r3, r1
    5f58:	a14d      	add	r1, pc, #308	; (adr r1, 6090 <__ieee754_pow+0xad0>)
    5f5a:	e9d1 0100 	ldrd	r0, r1, [r1]
    5f5e:	f000 facf 	bl	6500 <__aeabi_dsub>
    5f62:	4622      	mov	r2, r4
    5f64:	462b      	mov	r3, r5
    5f66:	f000 fc7f 	bl	6868 <__aeabi_dmul>
    5f6a:	4602      	mov	r2, r0
    5f6c:	460b      	mov	r3, r1
    5f6e:	2000      	movs	r0, #0
    5f70:	4956      	ldr	r1, [pc, #344]	; (60cc <__ieee754_pow+0xb0c>)
    5f72:	f000 fac5 	bl	6500 <__aeabi_dsub>
    5f76:	4622      	mov	r2, r4
    5f78:	462b      	mov	r3, r5
    5f7a:	4606      	mov	r6, r0
    5f7c:	460f      	mov	r7, r1
    5f7e:	4620      	mov	r0, r4
    5f80:	4629      	mov	r1, r5
    5f82:	f000 fc71 	bl	6868 <__aeabi_dmul>
    5f86:	4602      	mov	r2, r0
    5f88:	460b      	mov	r3, r1
    5f8a:	4630      	mov	r0, r6
    5f8c:	4639      	mov	r1, r7
    5f8e:	f000 fc6b 	bl	6868 <__aeabi_dmul>
    5f92:	a341      	add	r3, pc, #260	; (adr r3, 6098 <__ieee754_pow+0xad8>)
    5f94:	e9d3 2300 	ldrd	r2, r3, [r3]
    5f98:	f000 fc66 	bl	6868 <__aeabi_dmul>
    5f9c:	4602      	mov	r2, r0
    5f9e:	460b      	mov	r3, r1
    5fa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    5fa4:	f000 faac 	bl	6500 <__aeabi_dsub>
    5fa8:	4602      	mov	r2, r0
    5faa:	460b      	mov	r3, r1
    5fac:	4604      	mov	r4, r0
    5fae:	460d      	mov	r5, r1
    5fb0:	4640      	mov	r0, r8
    5fb2:	4649      	mov	r1, r9
    5fb4:	f000 faa6 	bl	6504 <__adddf3>
    5fb8:	4642      	mov	r2, r8
    5fba:	464b      	mov	r3, r9
    5fbc:	2000      	movs	r0, #0
    5fbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
    5fc2:	f000 fa9d 	bl	6500 <__aeabi_dsub>
    5fc6:	4602      	mov	r2, r0
    5fc8:	460b      	mov	r3, r1
    5fca:	4620      	mov	r0, r4
    5fcc:	4629      	mov	r1, r5
    5fce:	f000 fa97 	bl	6500 <__aeabi_dsub>
    5fd2:	4680      	mov	r8, r0
    5fd4:	4689      	mov	r9, r1
    5fd6:	e5a5      	b.n	5b24 <__ieee754_pow+0x564>
    5fd8:	4632      	mov	r2, r6
    5fda:	463b      	mov	r3, r7
    5fdc:	2000      	movs	r0, #0
    5fde:	4939      	ldr	r1, [pc, #228]	; (60c4 <__ieee754_pow+0xb04>)
    5fe0:	f000 fd6c 	bl	6abc <__aeabi_ddiv>
    5fe4:	ec41 0b10 	vmov	d0, r0, r1
    5fe8:	f7ff bb33 	b.w	5652 <__ieee754_pow+0x92>
    5fec:	a32c      	add	r3, pc, #176	; (adr r3, 60a0 <__ieee754_pow+0xae0>)
    5fee:	e9d3 2300 	ldrd	r2, r3, [r3]
    5ff2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    5ff6:	f000 fc37 	bl	6868 <__aeabi_dmul>
    5ffa:	a329      	add	r3, pc, #164	; (adr r3, 60a0 <__ieee754_pow+0xae0>)
    5ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
    6000:	f000 fc32 	bl	6868 <__aeabi_dmul>
    6004:	ec41 0b10 	vmov	d0, r0, r1
    6008:	f7ff bb23 	b.w	5652 <__ieee754_pow+0x92>
    600c:	f1be 0f00 	cmp.w	lr, #0
    6010:	f47f ab2a 	bne.w	5668 <__ieee754_pow+0xa8>
    6014:	f1c3 0314 	rsb	r3, r3, #20
    6018:	fa48 f203 	asr.w	r2, r8, r3
    601c:	fa02 f303 	lsl.w	r3, r2, r3
    6020:	4598      	cmp	r8, r3
    6022:	d027      	beq.n	6074 <__ieee754_pow+0xab4>
    6024:	46f3      	mov	fp, lr
    6026:	f7ff baf7 	b.w	5618 <__ieee754_pow+0x58>
    602a:	4b28      	ldr	r3, [pc, #160]	; (60cc <__ieee754_pow+0xb0c>)
    602c:	4598      	cmp	r8, r3
    602e:	f73f adde 	bgt.w	5bee <__ieee754_pow+0x62e>
    6032:	e9dd 3400 	ldrd	r3, r4, [sp]
    6036:	469a      	mov	sl, r3
    6038:	469b      	mov	fp, r3
    603a:	e607      	b.n	5c4c <__ieee754_pow+0x68c>
    603c:	4602      	mov	r2, r0
    603e:	460b      	mov	r3, r1
    6040:	f7ff bb89 	b.w	5756 <__ieee754_pow+0x196>
    6044:	ed9f 7b18 	vldr	d7, [pc, #96]	; 60a8 <__ieee754_pow+0xae8>
    6048:	ed8d 7b08 	vstr	d7, [sp, #32]
    604c:	ed9f 7b18 	vldr	d7, [pc, #96]	; 60b0 <__ieee754_pow+0xaf0>
    6050:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    6054:	ed9f 7b18 	vldr	d7, [pc, #96]	; 60b8 <__ieee754_pow+0xaf8>
    6058:	f44f 2880 	mov.w	r8, #262144	; 0x40000
    605c:	ed8d 7b06 	vstr	d7, [sp, #24]
    6060:	f7ff bbd4 	b.w	580c <__ieee754_pow+0x24c>
    6064:	4658      	mov	r0, fp
    6066:	ec43 2b10 	vmov	d0, r2, r3
    606a:	f000 f9b1 	bl	63d0 <scalbn>
    606e:	ec51 0b10 	vmov	r0, r1, d0
    6072:	e69d      	b.n	5db0 <__ieee754_pow+0x7f0>
    6074:	f002 0201 	and.w	r2, r2, #1
    6078:	f1c2 0b02 	rsb	fp, r2, #2
    607c:	f7ff bacc 	b.w	5618 <__ieee754_pow+0x58>
    6080:	60000000 	.word	0x60000000
    6084:	3ff71547 	.word	0x3ff71547
    6088:	f85ddf44 	.word	0xf85ddf44
    608c:	3e54ae0b 	.word	0x3e54ae0b
    6090:	55555555 	.word	0x55555555
    6094:	3fd55555 	.word	0x3fd55555
    6098:	652b82fe 	.word	0x652b82fe
    609c:	3ff71547 	.word	0x3ff71547
    60a0:	8800759c 	.word	0x8800759c
    60a4:	7e37e43c 	.word	0x7e37e43c
    60a8:	40000000 	.word	0x40000000
    60ac:	3fe2b803 	.word	0x3fe2b803
    60b0:	43cfd006 	.word	0x43cfd006
    60b4:	3e4cfdeb 	.word	0x3e4cfdeb
    60b8:	00000000 	.word	0x00000000
    60bc:	3ff80000 	.word	0x3ff80000
    60c0:	3feffffe 	.word	0x3feffffe
    60c4:	3ff00000 	.word	0x3ff00000
    60c8:	3fd00000 	.word	0x3fd00000
    60cc:	3fe00000 	.word	0x3fe00000

000060d0 <__ieee754_sqrt>:
    60d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60d4:	4965      	ldr	r1, [pc, #404]	; (626c <__ieee754_sqrt+0x19c>)
    60d6:	ec55 4b10 	vmov	r4, r5, d0
    60da:	460e      	mov	r6, r1
    60dc:	4029      	ands	r1, r5
    60de:	42b1      	cmp	r1, r6
    60e0:	f000 8097 	beq.w	6212 <__ieee754_sqrt+0x142>
    60e4:	2d00      	cmp	r5, #0
    60e6:	462b      	mov	r3, r5
    60e8:	ee10 2a10 	vmov	r2, s0
    60ec:	dd74      	ble.n	61d8 <__ieee754_sqrt+0x108>
    60ee:	152f      	asrs	r7, r5, #20
    60f0:	d07f      	beq.n	61f2 <__ieee754_sqrt+0x122>
    60f2:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
    60f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
    60fa:	07f9      	lsls	r1, r7, #31
    60fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    6100:	d465      	bmi.n	61ce <__ieee754_sqrt+0xfe>
    6102:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
    6106:	2600      	movs	r6, #0
    6108:	440b      	add	r3, r1
    610a:	107f      	asrs	r7, r7, #1
    610c:	0052      	lsls	r2, r2, #1
    610e:	46b6      	mov	lr, r6
    6110:	2016      	movs	r0, #22
    6112:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    6116:	eb0e 0401 	add.w	r4, lr, r1
    611a:	429c      	cmp	r4, r3
    611c:	ea4f 75d2 	mov.w	r5, r2, lsr #31
    6120:	ea4f 0242 	mov.w	r2, r2, lsl #1
    6124:	dc03      	bgt.n	612e <__ieee754_sqrt+0x5e>
    6126:	1b1b      	subs	r3, r3, r4
    6128:	eb04 0e01 	add.w	lr, r4, r1
    612c:	440e      	add	r6, r1
    612e:	3801      	subs	r0, #1
    6130:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    6134:	ea4f 0151 	mov.w	r1, r1, lsr #1
    6138:	d1ed      	bne.n	6116 <__ieee754_sqrt+0x46>
    613a:	4684      	mov	ip, r0
    613c:	2420      	movs	r4, #32
    613e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    6142:	e009      	b.n	6158 <__ieee754_sqrt+0x88>
    6144:	d020      	beq.n	6188 <__ieee754_sqrt+0xb8>
    6146:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
    614a:	3c01      	subs	r4, #1
    614c:	ea4f 0151 	mov.w	r1, r1, lsr #1
    6150:	442b      	add	r3, r5
    6152:	ea4f 0242 	mov.w	r2, r2, lsl #1
    6156:	d020      	beq.n	619a <__ieee754_sqrt+0xca>
    6158:	459e      	cmp	lr, r3
    615a:	eb01 050c 	add.w	r5, r1, ip
    615e:	daf1      	bge.n	6144 <__ieee754_sqrt+0x74>
    6160:	2d00      	cmp	r5, #0
    6162:	eb05 0c01 	add.w	ip, r5, r1
    6166:	db09      	blt.n	617c <__ieee754_sqrt+0xac>
    6168:	46f0      	mov	r8, lr
    616a:	4295      	cmp	r5, r2
    616c:	ebce 0303 	rsb	r3, lr, r3
    6170:	d900      	bls.n	6174 <__ieee754_sqrt+0xa4>
    6172:	3b01      	subs	r3, #1
    6174:	1b52      	subs	r2, r2, r5
    6176:	4408      	add	r0, r1
    6178:	46c6      	mov	lr, r8
    617a:	e7e4      	b.n	6146 <__ieee754_sqrt+0x76>
    617c:	f1bc 0f00 	cmp.w	ip, #0
    6180:	dbf2      	blt.n	6168 <__ieee754_sqrt+0x98>
    6182:	f10e 0801 	add.w	r8, lr, #1
    6186:	e7f0      	b.n	616a <__ieee754_sqrt+0x9a>
    6188:	4295      	cmp	r5, r2
    618a:	d81e      	bhi.n	61ca <__ieee754_sqrt+0xfa>
    618c:	2d00      	cmp	r5, #0
    618e:	eb05 0c01 	add.w	ip, r5, r1
    6192:	db50      	blt.n	6236 <__ieee754_sqrt+0x166>
    6194:	4698      	mov	r8, r3
    6196:	2300      	movs	r3, #0
    6198:	e7ec      	b.n	6174 <__ieee754_sqrt+0xa4>
    619a:	4313      	orrs	r3, r2
    619c:	d004      	beq.n	61a8 <__ieee754_sqrt+0xd8>
    619e:	1c42      	adds	r2, r0, #1
    61a0:	d04d      	beq.n	623e <__ieee754_sqrt+0x16e>
    61a2:	f000 0301 	and.w	r3, r0, #1
    61a6:	4418      	add	r0, r3
    61a8:	0840      	lsrs	r0, r0, #1
    61aa:	1071      	asrs	r1, r6, #1
    61ac:	07f3      	lsls	r3, r6, #31
    61ae:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
    61b2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
    61b6:	bf48      	it	mi
    61b8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
    61bc:	eb01 5307 	add.w	r3, r1, r7, lsl #20
    61c0:	4602      	mov	r2, r0
    61c2:	ec43 2b10 	vmov	d0, r2, r3
    61c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    61ca:	4673      	mov	r3, lr
    61cc:	e7bb      	b.n	6146 <__ieee754_sqrt+0x76>
    61ce:	005b      	lsls	r3, r3, #1
    61d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
    61d4:	0052      	lsls	r2, r2, #1
    61d6:	e794      	b.n	6102 <__ieee754_sqrt+0x32>
    61d8:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
    61dc:	4321      	orrs	r1, r4
    61de:	d028      	beq.n	6232 <__ieee754_sqrt+0x162>
    61e0:	bbad      	cbnz	r5, 624e <__ieee754_sqrt+0x17e>
    61e2:	462f      	mov	r7, r5
    61e4:	0ad3      	lsrs	r3, r2, #11
    61e6:	3f15      	subs	r7, #21
    61e8:	0552      	lsls	r2, r2, #21
    61ea:	2b00      	cmp	r3, #0
    61ec:	d0fa      	beq.n	61e4 <__ieee754_sqrt+0x114>
    61ee:	02dd      	lsls	r5, r3, #11
    61f0:	d428      	bmi.n	6244 <__ieee754_sqrt+0x174>
    61f2:	2100      	movs	r1, #0
    61f4:	e000      	b.n	61f8 <__ieee754_sqrt+0x128>
    61f6:	4601      	mov	r1, r0
    61f8:	005b      	lsls	r3, r3, #1
    61fa:	02dc      	lsls	r4, r3, #11
    61fc:	f101 0001 	add.w	r0, r1, #1
    6200:	d5f9      	bpl.n	61f6 <__ieee754_sqrt+0x126>
    6202:	f1c0 0420 	rsb	r4, r0, #32
    6206:	fa22 f404 	lsr.w	r4, r2, r4
    620a:	4323      	orrs	r3, r4
    620c:	1a7f      	subs	r7, r7, r1
    620e:	4082      	lsls	r2, r0
    6210:	e76f      	b.n	60f2 <__ieee754_sqrt+0x22>
    6212:	ee10 2a10 	vmov	r2, s0
    6216:	462b      	mov	r3, r5
    6218:	ee10 0a10 	vmov	r0, s0
    621c:	4629      	mov	r1, r5
    621e:	f000 fb23 	bl	6868 <__aeabi_dmul>
    6222:	4622      	mov	r2, r4
    6224:	462b      	mov	r3, r5
    6226:	f000 f96d 	bl	6504 <__adddf3>
    622a:	ec41 0b10 	vmov	d0, r0, r1
    622e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6236:	f1bc 0f00 	cmp.w	ip, #0
    623a:	daa2      	bge.n	6182 <__ieee754_sqrt+0xb2>
    623c:	e7aa      	b.n	6194 <__ieee754_sqrt+0xc4>
    623e:	3601      	adds	r6, #1
    6240:	4620      	mov	r0, r4
    6242:	e7b2      	b.n	61aa <__ieee754_sqrt+0xda>
    6244:	2420      	movs	r4, #32
    6246:	f04f 31ff 	mov.w	r1, #4294967295
    624a:	2000      	movs	r0, #0
    624c:	e7db      	b.n	6206 <__ieee754_sqrt+0x136>
    624e:	ee10 2a10 	vmov	r2, s0
    6252:	462b      	mov	r3, r5
    6254:	4620      	mov	r0, r4
    6256:	4629      	mov	r1, r5
    6258:	f000 f952 	bl	6500 <__aeabi_dsub>
    625c:	4602      	mov	r2, r0
    625e:	460b      	mov	r3, r1
    6260:	f000 fc2c 	bl	6abc <__aeabi_ddiv>
    6264:	ec41 0b10 	vmov	d0, r0, r1
    6268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    626c:	7ff00000 	.word	0x7ff00000

00006270 <fabs>:
    6270:	ec53 2b10 	vmov	r2, r3, d0
    6274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    6278:	ec43 2b10 	vmov	d0, r2, r3
    627c:	4770      	bx	lr
    627e:	bf00      	nop

00006280 <finite>:
    6280:	ee10 3a90 	vmov	r3, s1
    6284:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
    6288:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
    628c:	0fc0      	lsrs	r0, r0, #31
    628e:	4770      	bx	lr

00006290 <matherr>:
    6290:	2000      	movs	r0, #0
    6292:	4770      	bx	lr
    6294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00006298 <nan>:
    6298:	ed9f 0b01 	vldr	d0, [pc, #4]	; 62a0 <nan+0x8>
    629c:	4770      	bx	lr
    629e:	bf00      	nop
    62a0:	00000000 	.word	0x00000000
    62a4:	7ff80000 	.word	0x7ff80000

000062a8 <rint>:
    62a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    62aa:	ec53 2b10 	vmov	r2, r3, d0
    62ae:	f3c3 560a 	ubfx	r6, r3, #20, #11
    62b2:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
    62b6:	2813      	cmp	r0, #19
    62b8:	b083      	sub	sp, #12
    62ba:	4619      	mov	r1, r3
    62bc:	ea4f 74d3 	mov.w	r4, r3, lsr #31
    62c0:	ee10 5a10 	vmov	r5, s0
    62c4:	dc2f      	bgt.n	6326 <rint+0x7e>
    62c6:	2800      	cmp	r0, #0
    62c8:	db49      	blt.n	635e <rint+0xb6>
    62ca:	4e3f      	ldr	r6, [pc, #252]	; (63c8 <rint+0x120>)
    62cc:	4106      	asrs	r6, r0
    62ce:	ea03 0706 	and.w	r7, r3, r6
    62d2:	4317      	orrs	r7, r2
    62d4:	d02c      	beq.n	6330 <rint+0x88>
    62d6:	0876      	lsrs	r6, r6, #1
    62d8:	4033      	ands	r3, r6
    62da:	431d      	orrs	r5, r3
    62dc:	d00c      	beq.n	62f8 <rint+0x50>
    62de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    62e2:	2813      	cmp	r0, #19
    62e4:	ea21 0606 	bic.w	r6, r1, r6
    62e8:	fa43 f100 	asr.w	r1, r3, r0
    62ec:	ea41 0106 	orr.w	r1, r1, r6
    62f0:	bf0c      	ite	eq
    62f2:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    62f6:	2500      	movne	r5, #0
    62f8:	4834      	ldr	r0, [pc, #208]	; (63cc <rint+0x124>)
    62fa:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
    62fe:	462a      	mov	r2, r5
    6300:	e9d4 4500 	ldrd	r4, r5, [r4]
    6304:	4610      	mov	r0, r2
    6306:	462b      	mov	r3, r5
    6308:	4622      	mov	r2, r4
    630a:	f000 f8fb 	bl	6504 <__adddf3>
    630e:	e9cd 0100 	strd	r0, r1, [sp]
    6312:	4622      	mov	r2, r4
    6314:	462b      	mov	r3, r5
    6316:	e9dd 0100 	ldrd	r0, r1, [sp]
    631a:	f000 f8f1 	bl	6500 <__aeabi_dsub>
    631e:	ec41 0b10 	vmov	d0, r0, r1
    6322:	b003      	add	sp, #12
    6324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6326:	2833      	cmp	r0, #51	; 0x33
    6328:	dd06      	ble.n	6338 <rint+0x90>
    632a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    632e:	d042      	beq.n	63b6 <rint+0x10e>
    6330:	ec43 2b10 	vmov	d0, r2, r3
    6334:	b003      	add	sp, #12
    6336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6338:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
    633c:	f04f 30ff 	mov.w	r0, #4294967295
    6340:	40f0      	lsrs	r0, r6
    6342:	4202      	tst	r2, r0
    6344:	d0f4      	beq.n	6330 <rint+0x88>
    6346:	0840      	lsrs	r0, r0, #1
    6348:	4202      	tst	r2, r0
    634a:	d0d5      	beq.n	62f8 <rint+0x50>
    634c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6350:	ea25 0000 	bic.w	r0, r5, r0
    6354:	fa43 f606 	asr.w	r6, r3, r6
    6358:	ea46 0500 	orr.w	r5, r6, r0
    635c:	e7cc      	b.n	62f8 <rint+0x50>
    635e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    6362:	4310      	orrs	r0, r2
    6364:	ee10 7a10 	vmov	r7, s0
    6368:	d0e2      	beq.n	6330 <rint+0x88>
    636a:	f3c3 0013 	ubfx	r0, r3, #0, #20
    636e:	4307      	orrs	r7, r0
    6370:	4278      	negs	r0, r7
    6372:	4307      	orrs	r7, r0
    6374:	4815      	ldr	r0, [pc, #84]	; (63cc <rint+0x124>)
    6376:	0c59      	lsrs	r1, r3, #17
    6378:	0b3f      	lsrs	r7, r7, #12
    637a:	0449      	lsls	r1, r1, #17
    637c:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
    6380:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    6384:	ea47 0301 	orr.w	r3, r7, r1
    6388:	e9d0 6700 	ldrd	r6, r7, [r0]
    638c:	4619      	mov	r1, r3
    638e:	4610      	mov	r0, r2
    6390:	463b      	mov	r3, r7
    6392:	4632      	mov	r2, r6
    6394:	f000 f8b6 	bl	6504 <__adddf3>
    6398:	e9cd 0100 	strd	r0, r1, [sp]
    639c:	463b      	mov	r3, r7
    639e:	4632      	mov	r2, r6
    63a0:	e9dd 0100 	ldrd	r0, r1, [sp]
    63a4:	f000 f8ac 	bl	6500 <__aeabi_dsub>
    63a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    63ac:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
    63b0:	ec41 0b10 	vmov	d0, r0, r1
    63b4:	e7be      	b.n	6334 <rint+0x8c>
    63b6:	ee10 0a10 	vmov	r0, s0
    63ba:	4619      	mov	r1, r3
    63bc:	f000 f8a2 	bl	6504 <__adddf3>
    63c0:	ec41 0b10 	vmov	d0, r0, r1
    63c4:	e7b6      	b.n	6334 <rint+0x8c>
    63c6:	bf00      	nop
    63c8:	000fffff 	.word	0x000fffff
    63cc:	00007ce8 	.word	0x00007ce8

000063d0 <scalbn>:
    63d0:	ec53 2b10 	vmov	r2, r3, d0
    63d4:	b570      	push	{r4, r5, r6, lr}
    63d6:	f3c3 540a 	ubfx	r4, r3, #20, #11
    63da:	4619      	mov	r1, r3
    63dc:	4605      	mov	r5, r0
    63de:	bb14      	cbnz	r4, 6426 <scalbn+0x56>
    63e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    63e4:	4311      	orrs	r1, r2
    63e6:	d02a      	beq.n	643e <scalbn+0x6e>
    63e8:	4619      	mov	r1, r3
    63ea:	2200      	movs	r2, #0
    63ec:	4b38      	ldr	r3, [pc, #224]	; (64d0 <scalbn+0x100>)
    63ee:	4e39      	ldr	r6, [pc, #228]	; (64d4 <scalbn+0x104>)
    63f0:	ee10 0a10 	vmov	r0, s0
    63f4:	f000 fa38 	bl	6868 <__aeabi_dmul>
    63f8:	42b5      	cmp	r5, r6
    63fa:	4602      	mov	r2, r0
    63fc:	460b      	mov	r3, r1
    63fe:	db1f      	blt.n	6440 <scalbn+0x70>
    6400:	f3c1 540a 	ubfx	r4, r1, #20, #11
    6404:	3c36      	subs	r4, #54	; 0x36
    6406:	442c      	add	r4, r5
    6408:	f240 70fe 	movw	r0, #2046	; 0x7fe
    640c:	4284      	cmp	r4, r0
    640e:	dc1f      	bgt.n	6450 <scalbn+0x80>
    6410:	2c00      	cmp	r4, #0
    6412:	dd2d      	ble.n	6470 <scalbn+0xa0>
    6414:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
    6418:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
    641c:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
    6420:	ec43 2b10 	vmov	d0, r2, r3
    6424:	bd70      	pop	{r4, r5, r6, pc}
    6426:	f240 70ff 	movw	r0, #2047	; 0x7ff
    642a:	4284      	cmp	r4, r0
    642c:	d1eb      	bne.n	6406 <scalbn+0x36>
    642e:	ee10 0a10 	vmov	r0, s0
    6432:	4619      	mov	r1, r3
    6434:	f000 f866 	bl	6504 <__adddf3>
    6438:	ec41 0b10 	vmov	d0, r0, r1
    643c:	bd70      	pop	{r4, r5, r6, pc}
    643e:	bd70      	pop	{r4, r5, r6, pc}
    6440:	a31f      	add	r3, pc, #124	; (adr r3, 64c0 <scalbn+0xf0>)
    6442:	e9d3 2300 	ldrd	r2, r3, [r3]
    6446:	f000 fa0f 	bl	6868 <__aeabi_dmul>
    644a:	ec41 0b10 	vmov	d0, r0, r1
    644e:	bd70      	pop	{r4, r5, r6, pc}
    6450:	ec43 2b11 	vmov	d1, r2, r3
    6454:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 64c8 <scalbn+0xf8>
    6458:	f000 f840 	bl	64dc <copysign>
    645c:	a31a      	add	r3, pc, #104	; (adr r3, 64c8 <scalbn+0xf8>)
    645e:	e9d3 2300 	ldrd	r2, r3, [r3]
    6462:	ec51 0b10 	vmov	r0, r1, d0
    6466:	f000 f9ff 	bl	6868 <__aeabi_dmul>
    646a:	ec41 0b10 	vmov	d0, r0, r1
    646e:	bd70      	pop	{r4, r5, r6, pc}
    6470:	f114 0f35 	cmn.w	r4, #53	; 0x35
    6474:	da13      	bge.n	649e <scalbn+0xce>
    6476:	f24c 3150 	movw	r1, #50000	; 0xc350
    647a:	428d      	cmp	r5, r1
    647c:	ec43 2b11 	vmov	d1, r2, r3
    6480:	dce8      	bgt.n	6454 <scalbn+0x84>
    6482:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 64c0 <scalbn+0xf0>
    6486:	f000 f829 	bl	64dc <copysign>
    648a:	a30d      	add	r3, pc, #52	; (adr r3, 64c0 <scalbn+0xf0>)
    648c:	e9d3 2300 	ldrd	r2, r3, [r3]
    6490:	ec51 0b10 	vmov	r0, r1, d0
    6494:	f000 f9e8 	bl	6868 <__aeabi_dmul>
    6498:	ec41 0b10 	vmov	d0, r0, r1
    649c:	bd70      	pop	{r4, r5, r6, pc}
    649e:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
    64a2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
    64a6:	3436      	adds	r4, #54	; 0x36
    64a8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
    64ac:	4610      	mov	r0, r2
    64ae:	4619      	mov	r1, r3
    64b0:	2200      	movs	r2, #0
    64b2:	4b09      	ldr	r3, [pc, #36]	; (64d8 <scalbn+0x108>)
    64b4:	f000 f9d8 	bl	6868 <__aeabi_dmul>
    64b8:	ec41 0b10 	vmov	d0, r0, r1
    64bc:	bd70      	pop	{r4, r5, r6, pc}
    64be:	bf00      	nop
    64c0:	c2f8f359 	.word	0xc2f8f359
    64c4:	01a56e1f 	.word	0x01a56e1f
    64c8:	8800759c 	.word	0x8800759c
    64cc:	7e37e43c 	.word	0x7e37e43c
    64d0:	43500000 	.word	0x43500000
    64d4:	ffff3cb0 	.word	0xffff3cb0
    64d8:	3c900000 	.word	0x3c900000

000064dc <copysign>:
    64dc:	ec53 2b10 	vmov	r2, r3, d0
    64e0:	ee11 0a90 	vmov	r0, s3
    64e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    64e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    64ec:	ea41 0300 	orr.w	r3, r1, r0
    64f0:	ec43 2b10 	vmov	d0, r2, r3
    64f4:	4770      	bx	lr
    64f6:	bf00      	nop

000064f8 <__aeabi_drsub>:
    64f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    64fc:	e002      	b.n	6504 <__adddf3>
    64fe:	bf00      	nop

00006500 <__aeabi_dsub>:
    6500:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00006504 <__adddf3>:
    6504:	b530      	push	{r4, r5, lr}
    6506:	ea4f 0441 	mov.w	r4, r1, lsl #1
    650a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    650e:	ea94 0f05 	teq	r4, r5
    6512:	bf08      	it	eq
    6514:	ea90 0f02 	teqeq	r0, r2
    6518:	bf1f      	itttt	ne
    651a:	ea54 0c00 	orrsne.w	ip, r4, r0
    651e:	ea55 0c02 	orrsne.w	ip, r5, r2
    6522:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    6526:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    652a:	f000 80e2 	beq.w	66f2 <__adddf3+0x1ee>
    652e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    6532:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    6536:	bfb8      	it	lt
    6538:	426d      	neglt	r5, r5
    653a:	dd0c      	ble.n	6556 <__adddf3+0x52>
    653c:	442c      	add	r4, r5
    653e:	ea80 0202 	eor.w	r2, r0, r2
    6542:	ea81 0303 	eor.w	r3, r1, r3
    6546:	ea82 0000 	eor.w	r0, r2, r0
    654a:	ea83 0101 	eor.w	r1, r3, r1
    654e:	ea80 0202 	eor.w	r2, r0, r2
    6552:	ea81 0303 	eor.w	r3, r1, r3
    6556:	2d36      	cmp	r5, #54	; 0x36
    6558:	bf88      	it	hi
    655a:	bd30      	pophi	{r4, r5, pc}
    655c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    6560:	ea4f 3101 	mov.w	r1, r1, lsl #12
    6564:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    6568:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    656c:	d002      	beq.n	6574 <__adddf3+0x70>
    656e:	4240      	negs	r0, r0
    6570:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6574:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    6578:	ea4f 3303 	mov.w	r3, r3, lsl #12
    657c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    6580:	d002      	beq.n	6588 <__adddf3+0x84>
    6582:	4252      	negs	r2, r2
    6584:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6588:	ea94 0f05 	teq	r4, r5
    658c:	f000 80a7 	beq.w	66de <__adddf3+0x1da>
    6590:	f1a4 0401 	sub.w	r4, r4, #1
    6594:	f1d5 0e20 	rsbs	lr, r5, #32
    6598:	db0d      	blt.n	65b6 <__adddf3+0xb2>
    659a:	fa02 fc0e 	lsl.w	ip, r2, lr
    659e:	fa22 f205 	lsr.w	r2, r2, r5
    65a2:	1880      	adds	r0, r0, r2
    65a4:	f141 0100 	adc.w	r1, r1, #0
    65a8:	fa03 f20e 	lsl.w	r2, r3, lr
    65ac:	1880      	adds	r0, r0, r2
    65ae:	fa43 f305 	asr.w	r3, r3, r5
    65b2:	4159      	adcs	r1, r3
    65b4:	e00e      	b.n	65d4 <__adddf3+0xd0>
    65b6:	f1a5 0520 	sub.w	r5, r5, #32
    65ba:	f10e 0e20 	add.w	lr, lr, #32
    65be:	2a01      	cmp	r2, #1
    65c0:	fa03 fc0e 	lsl.w	ip, r3, lr
    65c4:	bf28      	it	cs
    65c6:	f04c 0c02 	orrcs.w	ip, ip, #2
    65ca:	fa43 f305 	asr.w	r3, r3, r5
    65ce:	18c0      	adds	r0, r0, r3
    65d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    65d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    65d8:	d507      	bpl.n	65ea <__adddf3+0xe6>
    65da:	f04f 0e00 	mov.w	lr, #0
    65de:	f1dc 0c00 	rsbs	ip, ip, #0
    65e2:	eb7e 0000 	sbcs.w	r0, lr, r0
    65e6:	eb6e 0101 	sbc.w	r1, lr, r1
    65ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    65ee:	d31b      	bcc.n	6628 <__adddf3+0x124>
    65f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    65f4:	d30c      	bcc.n	6610 <__adddf3+0x10c>
    65f6:	0849      	lsrs	r1, r1, #1
    65f8:	ea5f 0030 	movs.w	r0, r0, rrx
    65fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
    6600:	f104 0401 	add.w	r4, r4, #1
    6604:	ea4f 5244 	mov.w	r2, r4, lsl #21
    6608:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    660c:	f080 809a 	bcs.w	6744 <__adddf3+0x240>
    6610:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    6614:	bf08      	it	eq
    6616:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    661a:	f150 0000 	adcs.w	r0, r0, #0
    661e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    6622:	ea41 0105 	orr.w	r1, r1, r5
    6626:	bd30      	pop	{r4, r5, pc}
    6628:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    662c:	4140      	adcs	r0, r0
    662e:	eb41 0101 	adc.w	r1, r1, r1
    6632:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    6636:	f1a4 0401 	sub.w	r4, r4, #1
    663a:	d1e9      	bne.n	6610 <__adddf3+0x10c>
    663c:	f091 0f00 	teq	r1, #0
    6640:	bf04      	itt	eq
    6642:	4601      	moveq	r1, r0
    6644:	2000      	moveq	r0, #0
    6646:	fab1 f381 	clz	r3, r1
    664a:	bf08      	it	eq
    664c:	3320      	addeq	r3, #32
    664e:	f1a3 030b 	sub.w	r3, r3, #11
    6652:	f1b3 0220 	subs.w	r2, r3, #32
    6656:	da0c      	bge.n	6672 <__adddf3+0x16e>
    6658:	320c      	adds	r2, #12
    665a:	dd08      	ble.n	666e <__adddf3+0x16a>
    665c:	f102 0c14 	add.w	ip, r2, #20
    6660:	f1c2 020c 	rsb	r2, r2, #12
    6664:	fa01 f00c 	lsl.w	r0, r1, ip
    6668:	fa21 f102 	lsr.w	r1, r1, r2
    666c:	e00c      	b.n	6688 <__adddf3+0x184>
    666e:	f102 0214 	add.w	r2, r2, #20
    6672:	bfd8      	it	le
    6674:	f1c2 0c20 	rsble	ip, r2, #32
    6678:	fa01 f102 	lsl.w	r1, r1, r2
    667c:	fa20 fc0c 	lsr.w	ip, r0, ip
    6680:	bfdc      	itt	le
    6682:	ea41 010c 	orrle.w	r1, r1, ip
    6686:	4090      	lslle	r0, r2
    6688:	1ae4      	subs	r4, r4, r3
    668a:	bfa2      	ittt	ge
    668c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    6690:	4329      	orrge	r1, r5
    6692:	bd30      	popge	{r4, r5, pc}
    6694:	ea6f 0404 	mvn.w	r4, r4
    6698:	3c1f      	subs	r4, #31
    669a:	da1c      	bge.n	66d6 <__adddf3+0x1d2>
    669c:	340c      	adds	r4, #12
    669e:	dc0e      	bgt.n	66be <__adddf3+0x1ba>
    66a0:	f104 0414 	add.w	r4, r4, #20
    66a4:	f1c4 0220 	rsb	r2, r4, #32
    66a8:	fa20 f004 	lsr.w	r0, r0, r4
    66ac:	fa01 f302 	lsl.w	r3, r1, r2
    66b0:	ea40 0003 	orr.w	r0, r0, r3
    66b4:	fa21 f304 	lsr.w	r3, r1, r4
    66b8:	ea45 0103 	orr.w	r1, r5, r3
    66bc:	bd30      	pop	{r4, r5, pc}
    66be:	f1c4 040c 	rsb	r4, r4, #12
    66c2:	f1c4 0220 	rsb	r2, r4, #32
    66c6:	fa20 f002 	lsr.w	r0, r0, r2
    66ca:	fa01 f304 	lsl.w	r3, r1, r4
    66ce:	ea40 0003 	orr.w	r0, r0, r3
    66d2:	4629      	mov	r1, r5
    66d4:	bd30      	pop	{r4, r5, pc}
    66d6:	fa21 f004 	lsr.w	r0, r1, r4
    66da:	4629      	mov	r1, r5
    66dc:	bd30      	pop	{r4, r5, pc}
    66de:	f094 0f00 	teq	r4, #0
    66e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    66e6:	bf06      	itte	eq
    66e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    66ec:	3401      	addeq	r4, #1
    66ee:	3d01      	subne	r5, #1
    66f0:	e74e      	b.n	6590 <__adddf3+0x8c>
    66f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    66f6:	bf18      	it	ne
    66f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    66fc:	d029      	beq.n	6752 <__adddf3+0x24e>
    66fe:	ea94 0f05 	teq	r4, r5
    6702:	bf08      	it	eq
    6704:	ea90 0f02 	teqeq	r0, r2
    6708:	d005      	beq.n	6716 <__adddf3+0x212>
    670a:	ea54 0c00 	orrs.w	ip, r4, r0
    670e:	bf04      	itt	eq
    6710:	4619      	moveq	r1, r3
    6712:	4610      	moveq	r0, r2
    6714:	bd30      	pop	{r4, r5, pc}
    6716:	ea91 0f03 	teq	r1, r3
    671a:	bf1e      	ittt	ne
    671c:	2100      	movne	r1, #0
    671e:	2000      	movne	r0, #0
    6720:	bd30      	popne	{r4, r5, pc}
    6722:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    6726:	d105      	bne.n	6734 <__adddf3+0x230>
    6728:	0040      	lsls	r0, r0, #1
    672a:	4149      	adcs	r1, r1
    672c:	bf28      	it	cs
    672e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    6732:	bd30      	pop	{r4, r5, pc}
    6734:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    6738:	bf3c      	itt	cc
    673a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    673e:	bd30      	popcc	{r4, r5, pc}
    6740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    6744:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    6748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    674c:	f04f 0000 	mov.w	r0, #0
    6750:	bd30      	pop	{r4, r5, pc}
    6752:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    6756:	bf1a      	itte	ne
    6758:	4619      	movne	r1, r3
    675a:	4610      	movne	r0, r2
    675c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    6760:	bf1c      	itt	ne
    6762:	460b      	movne	r3, r1
    6764:	4602      	movne	r2, r0
    6766:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    676a:	bf06      	itte	eq
    676c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    6770:	ea91 0f03 	teqeq	r1, r3
    6774:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    6778:	bd30      	pop	{r4, r5, pc}
    677a:	bf00      	nop

0000677c <__aeabi_ui2d>:
    677c:	f090 0f00 	teq	r0, #0
    6780:	bf04      	itt	eq
    6782:	2100      	moveq	r1, #0
    6784:	4770      	bxeq	lr
    6786:	b530      	push	{r4, r5, lr}
    6788:	f44f 6480 	mov.w	r4, #1024	; 0x400
    678c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6790:	f04f 0500 	mov.w	r5, #0
    6794:	f04f 0100 	mov.w	r1, #0
    6798:	e750      	b.n	663c <__adddf3+0x138>
    679a:	bf00      	nop

0000679c <__aeabi_i2d>:
    679c:	f090 0f00 	teq	r0, #0
    67a0:	bf04      	itt	eq
    67a2:	2100      	moveq	r1, #0
    67a4:	4770      	bxeq	lr
    67a6:	b530      	push	{r4, r5, lr}
    67a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    67ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
    67b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    67b4:	bf48      	it	mi
    67b6:	4240      	negmi	r0, r0
    67b8:	f04f 0100 	mov.w	r1, #0
    67bc:	e73e      	b.n	663c <__adddf3+0x138>
    67be:	bf00      	nop

000067c0 <__aeabi_f2d>:
    67c0:	0042      	lsls	r2, r0, #1
    67c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
    67c6:	ea4f 0131 	mov.w	r1, r1, rrx
    67ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
    67ce:	bf1f      	itttt	ne
    67d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    67d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    67d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    67dc:	4770      	bxne	lr
    67de:	f092 0f00 	teq	r2, #0
    67e2:	bf14      	ite	ne
    67e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    67e8:	4770      	bxeq	lr
    67ea:	b530      	push	{r4, r5, lr}
    67ec:	f44f 7460 	mov.w	r4, #896	; 0x380
    67f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    67f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    67f8:	e720      	b.n	663c <__adddf3+0x138>
    67fa:	bf00      	nop

000067fc <__aeabi_ul2d>:
    67fc:	ea50 0201 	orrs.w	r2, r0, r1
    6800:	bf08      	it	eq
    6802:	4770      	bxeq	lr
    6804:	b530      	push	{r4, r5, lr}
    6806:	f04f 0500 	mov.w	r5, #0
    680a:	e00a      	b.n	6822 <__aeabi_l2d+0x16>

0000680c <__aeabi_l2d>:
    680c:	ea50 0201 	orrs.w	r2, r0, r1
    6810:	bf08      	it	eq
    6812:	4770      	bxeq	lr
    6814:	b530      	push	{r4, r5, lr}
    6816:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    681a:	d502      	bpl.n	6822 <__aeabi_l2d+0x16>
    681c:	4240      	negs	r0, r0
    681e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6822:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6826:	f104 0432 	add.w	r4, r4, #50	; 0x32
    682a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    682e:	f43f aedc 	beq.w	65ea <__adddf3+0xe6>
    6832:	f04f 0203 	mov.w	r2, #3
    6836:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    683a:	bf18      	it	ne
    683c:	3203      	addne	r2, #3
    683e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    6842:	bf18      	it	ne
    6844:	3203      	addne	r2, #3
    6846:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    684a:	f1c2 0320 	rsb	r3, r2, #32
    684e:	fa00 fc03 	lsl.w	ip, r0, r3
    6852:	fa20 f002 	lsr.w	r0, r0, r2
    6856:	fa01 fe03 	lsl.w	lr, r1, r3
    685a:	ea40 000e 	orr.w	r0, r0, lr
    685e:	fa21 f102 	lsr.w	r1, r1, r2
    6862:	4414      	add	r4, r2
    6864:	e6c1      	b.n	65ea <__adddf3+0xe6>
    6866:	bf00      	nop

00006868 <__aeabi_dmul>:
    6868:	b570      	push	{r4, r5, r6, lr}
    686a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    686e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    6872:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    6876:	bf1d      	ittte	ne
    6878:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    687c:	ea94 0f0c 	teqne	r4, ip
    6880:	ea95 0f0c 	teqne	r5, ip
    6884:	f000 f8de 	bleq	6a44 <__aeabi_dmul+0x1dc>
    6888:	442c      	add	r4, r5
    688a:	ea81 0603 	eor.w	r6, r1, r3
    688e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    6892:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    6896:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    689a:	bf18      	it	ne
    689c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    68a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    68a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    68a8:	d038      	beq.n	691c <__aeabi_dmul+0xb4>
    68aa:	fba0 ce02 	umull	ip, lr, r0, r2
    68ae:	f04f 0500 	mov.w	r5, #0
    68b2:	fbe1 e502 	umlal	lr, r5, r1, r2
    68b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    68ba:	fbe0 e503 	umlal	lr, r5, r0, r3
    68be:	f04f 0600 	mov.w	r6, #0
    68c2:	fbe1 5603 	umlal	r5, r6, r1, r3
    68c6:	f09c 0f00 	teq	ip, #0
    68ca:	bf18      	it	ne
    68cc:	f04e 0e01 	orrne.w	lr, lr, #1
    68d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    68d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    68d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    68dc:	d204      	bcs.n	68e8 <__aeabi_dmul+0x80>
    68de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    68e2:	416d      	adcs	r5, r5
    68e4:	eb46 0606 	adc.w	r6, r6, r6
    68e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    68ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    68f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    68f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    68f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    68fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    6900:	bf88      	it	hi
    6902:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    6906:	d81e      	bhi.n	6946 <__aeabi_dmul+0xde>
    6908:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    690c:	bf08      	it	eq
    690e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    6912:	f150 0000 	adcs.w	r0, r0, #0
    6916:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    691a:	bd70      	pop	{r4, r5, r6, pc}
    691c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    6920:	ea46 0101 	orr.w	r1, r6, r1
    6924:	ea40 0002 	orr.w	r0, r0, r2
    6928:	ea81 0103 	eor.w	r1, r1, r3
    692c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    6930:	bfc2      	ittt	gt
    6932:	ebd4 050c 	rsbsgt	r5, r4, ip
    6936:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    693a:	bd70      	popgt	{r4, r5, r6, pc}
    693c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    6940:	f04f 0e00 	mov.w	lr, #0
    6944:	3c01      	subs	r4, #1
    6946:	f300 80ab 	bgt.w	6aa0 <__aeabi_dmul+0x238>
    694a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    694e:	bfde      	ittt	le
    6950:	2000      	movle	r0, #0
    6952:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    6956:	bd70      	pople	{r4, r5, r6, pc}
    6958:	f1c4 0400 	rsb	r4, r4, #0
    695c:	3c20      	subs	r4, #32
    695e:	da35      	bge.n	69cc <__aeabi_dmul+0x164>
    6960:	340c      	adds	r4, #12
    6962:	dc1b      	bgt.n	699c <__aeabi_dmul+0x134>
    6964:	f104 0414 	add.w	r4, r4, #20
    6968:	f1c4 0520 	rsb	r5, r4, #32
    696c:	fa00 f305 	lsl.w	r3, r0, r5
    6970:	fa20 f004 	lsr.w	r0, r0, r4
    6974:	fa01 f205 	lsl.w	r2, r1, r5
    6978:	ea40 0002 	orr.w	r0, r0, r2
    697c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    6980:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    6984:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    6988:	fa21 f604 	lsr.w	r6, r1, r4
    698c:	eb42 0106 	adc.w	r1, r2, r6
    6990:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    6994:	bf08      	it	eq
    6996:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    699a:	bd70      	pop	{r4, r5, r6, pc}
    699c:	f1c4 040c 	rsb	r4, r4, #12
    69a0:	f1c4 0520 	rsb	r5, r4, #32
    69a4:	fa00 f304 	lsl.w	r3, r0, r4
    69a8:	fa20 f005 	lsr.w	r0, r0, r5
    69ac:	fa01 f204 	lsl.w	r2, r1, r4
    69b0:	ea40 0002 	orr.w	r0, r0, r2
    69b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    69b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    69bc:	f141 0100 	adc.w	r1, r1, #0
    69c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    69c4:	bf08      	it	eq
    69c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    69ca:	bd70      	pop	{r4, r5, r6, pc}
    69cc:	f1c4 0520 	rsb	r5, r4, #32
    69d0:	fa00 f205 	lsl.w	r2, r0, r5
    69d4:	ea4e 0e02 	orr.w	lr, lr, r2
    69d8:	fa20 f304 	lsr.w	r3, r0, r4
    69dc:	fa01 f205 	lsl.w	r2, r1, r5
    69e0:	ea43 0302 	orr.w	r3, r3, r2
    69e4:	fa21 f004 	lsr.w	r0, r1, r4
    69e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    69ec:	fa21 f204 	lsr.w	r2, r1, r4
    69f0:	ea20 0002 	bic.w	r0, r0, r2
    69f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    69f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    69fc:	bf08      	it	eq
    69fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    6a02:	bd70      	pop	{r4, r5, r6, pc}
    6a04:	f094 0f00 	teq	r4, #0
    6a08:	d10f      	bne.n	6a2a <__aeabi_dmul+0x1c2>
    6a0a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    6a0e:	0040      	lsls	r0, r0, #1
    6a10:	eb41 0101 	adc.w	r1, r1, r1
    6a14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    6a18:	bf08      	it	eq
    6a1a:	3c01      	subeq	r4, #1
    6a1c:	d0f7      	beq.n	6a0e <__aeabi_dmul+0x1a6>
    6a1e:	ea41 0106 	orr.w	r1, r1, r6
    6a22:	f095 0f00 	teq	r5, #0
    6a26:	bf18      	it	ne
    6a28:	4770      	bxne	lr
    6a2a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    6a2e:	0052      	lsls	r2, r2, #1
    6a30:	eb43 0303 	adc.w	r3, r3, r3
    6a34:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    6a38:	bf08      	it	eq
    6a3a:	3d01      	subeq	r5, #1
    6a3c:	d0f7      	beq.n	6a2e <__aeabi_dmul+0x1c6>
    6a3e:	ea43 0306 	orr.w	r3, r3, r6
    6a42:	4770      	bx	lr
    6a44:	ea94 0f0c 	teq	r4, ip
    6a48:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    6a4c:	bf18      	it	ne
    6a4e:	ea95 0f0c 	teqne	r5, ip
    6a52:	d00c      	beq.n	6a6e <__aeabi_dmul+0x206>
    6a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    6a58:	bf18      	it	ne
    6a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    6a5e:	d1d1      	bne.n	6a04 <__aeabi_dmul+0x19c>
    6a60:	ea81 0103 	eor.w	r1, r1, r3
    6a64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    6a68:	f04f 0000 	mov.w	r0, #0
    6a6c:	bd70      	pop	{r4, r5, r6, pc}
    6a6e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    6a72:	bf06      	itte	eq
    6a74:	4610      	moveq	r0, r2
    6a76:	4619      	moveq	r1, r3
    6a78:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    6a7c:	d019      	beq.n	6ab2 <__aeabi_dmul+0x24a>
    6a7e:	ea94 0f0c 	teq	r4, ip
    6a82:	d102      	bne.n	6a8a <__aeabi_dmul+0x222>
    6a84:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    6a88:	d113      	bne.n	6ab2 <__aeabi_dmul+0x24a>
    6a8a:	ea95 0f0c 	teq	r5, ip
    6a8e:	d105      	bne.n	6a9c <__aeabi_dmul+0x234>
    6a90:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    6a94:	bf1c      	itt	ne
    6a96:	4610      	movne	r0, r2
    6a98:	4619      	movne	r1, r3
    6a9a:	d10a      	bne.n	6ab2 <__aeabi_dmul+0x24a>
    6a9c:	ea81 0103 	eor.w	r1, r1, r3
    6aa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    6aa4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    6aa8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    6aac:	f04f 0000 	mov.w	r0, #0
    6ab0:	bd70      	pop	{r4, r5, r6, pc}
    6ab2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    6ab6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    6aba:	bd70      	pop	{r4, r5, r6, pc}

00006abc <__aeabi_ddiv>:
    6abc:	b570      	push	{r4, r5, r6, lr}
    6abe:	f04f 0cff 	mov.w	ip, #255	; 0xff
    6ac2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    6ac6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    6aca:	bf1d      	ittte	ne
    6acc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    6ad0:	ea94 0f0c 	teqne	r4, ip
    6ad4:	ea95 0f0c 	teqne	r5, ip
    6ad8:	f000 f8a7 	bleq	6c2a <__aeabi_ddiv+0x16e>
    6adc:	eba4 0405 	sub.w	r4, r4, r5
    6ae0:	ea81 0e03 	eor.w	lr, r1, r3
    6ae4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    6ae8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    6aec:	f000 8088 	beq.w	6c00 <__aeabi_ddiv+0x144>
    6af0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    6af4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    6af8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    6afc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    6b00:	ea4f 2202 	mov.w	r2, r2, lsl #8
    6b04:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    6b08:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    6b0c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    6b10:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    6b14:	429d      	cmp	r5, r3
    6b16:	bf08      	it	eq
    6b18:	4296      	cmpeq	r6, r2
    6b1a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    6b1e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    6b22:	d202      	bcs.n	6b2a <__aeabi_ddiv+0x6e>
    6b24:	085b      	lsrs	r3, r3, #1
    6b26:	ea4f 0232 	mov.w	r2, r2, rrx
    6b2a:	1ab6      	subs	r6, r6, r2
    6b2c:	eb65 0503 	sbc.w	r5, r5, r3
    6b30:	085b      	lsrs	r3, r3, #1
    6b32:	ea4f 0232 	mov.w	r2, r2, rrx
    6b36:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    6b3a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    6b3e:	ebb6 0e02 	subs.w	lr, r6, r2
    6b42:	eb75 0e03 	sbcs.w	lr, r5, r3
    6b46:	bf22      	ittt	cs
    6b48:	1ab6      	subcs	r6, r6, r2
    6b4a:	4675      	movcs	r5, lr
    6b4c:	ea40 000c 	orrcs.w	r0, r0, ip
    6b50:	085b      	lsrs	r3, r3, #1
    6b52:	ea4f 0232 	mov.w	r2, r2, rrx
    6b56:	ebb6 0e02 	subs.w	lr, r6, r2
    6b5a:	eb75 0e03 	sbcs.w	lr, r5, r3
    6b5e:	bf22      	ittt	cs
    6b60:	1ab6      	subcs	r6, r6, r2
    6b62:	4675      	movcs	r5, lr
    6b64:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    6b68:	085b      	lsrs	r3, r3, #1
    6b6a:	ea4f 0232 	mov.w	r2, r2, rrx
    6b6e:	ebb6 0e02 	subs.w	lr, r6, r2
    6b72:	eb75 0e03 	sbcs.w	lr, r5, r3
    6b76:	bf22      	ittt	cs
    6b78:	1ab6      	subcs	r6, r6, r2
    6b7a:	4675      	movcs	r5, lr
    6b7c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    6b80:	085b      	lsrs	r3, r3, #1
    6b82:	ea4f 0232 	mov.w	r2, r2, rrx
    6b86:	ebb6 0e02 	subs.w	lr, r6, r2
    6b8a:	eb75 0e03 	sbcs.w	lr, r5, r3
    6b8e:	bf22      	ittt	cs
    6b90:	1ab6      	subcs	r6, r6, r2
    6b92:	4675      	movcs	r5, lr
    6b94:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    6b98:	ea55 0e06 	orrs.w	lr, r5, r6
    6b9c:	d018      	beq.n	6bd0 <__aeabi_ddiv+0x114>
    6b9e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    6ba2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    6ba6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    6baa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    6bae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    6bb2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    6bb6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    6bba:	d1c0      	bne.n	6b3e <__aeabi_ddiv+0x82>
    6bbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    6bc0:	d10b      	bne.n	6bda <__aeabi_ddiv+0x11e>
    6bc2:	ea41 0100 	orr.w	r1, r1, r0
    6bc6:	f04f 0000 	mov.w	r0, #0
    6bca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    6bce:	e7b6      	b.n	6b3e <__aeabi_ddiv+0x82>
    6bd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    6bd4:	bf04      	itt	eq
    6bd6:	4301      	orreq	r1, r0
    6bd8:	2000      	moveq	r0, #0
    6bda:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    6bde:	bf88      	it	hi
    6be0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    6be4:	f63f aeaf 	bhi.w	6946 <__aeabi_dmul+0xde>
    6be8:	ebb5 0c03 	subs.w	ip, r5, r3
    6bec:	bf04      	itt	eq
    6bee:	ebb6 0c02 	subseq.w	ip, r6, r2
    6bf2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    6bf6:	f150 0000 	adcs.w	r0, r0, #0
    6bfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    6bfe:	bd70      	pop	{r4, r5, r6, pc}
    6c00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    6c04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    6c08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    6c0c:	bfc2      	ittt	gt
    6c0e:	ebd4 050c 	rsbsgt	r5, r4, ip
    6c12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    6c16:	bd70      	popgt	{r4, r5, r6, pc}
    6c18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    6c1c:	f04f 0e00 	mov.w	lr, #0
    6c20:	3c01      	subs	r4, #1
    6c22:	e690      	b.n	6946 <__aeabi_dmul+0xde>
    6c24:	ea45 0e06 	orr.w	lr, r5, r6
    6c28:	e68d      	b.n	6946 <__aeabi_dmul+0xde>
    6c2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    6c2e:	ea94 0f0c 	teq	r4, ip
    6c32:	bf08      	it	eq
    6c34:	ea95 0f0c 	teqeq	r5, ip
    6c38:	f43f af3b 	beq.w	6ab2 <__aeabi_dmul+0x24a>
    6c3c:	ea94 0f0c 	teq	r4, ip
    6c40:	d10a      	bne.n	6c58 <__aeabi_ddiv+0x19c>
    6c42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    6c46:	f47f af34 	bne.w	6ab2 <__aeabi_dmul+0x24a>
    6c4a:	ea95 0f0c 	teq	r5, ip
    6c4e:	f47f af25 	bne.w	6a9c <__aeabi_dmul+0x234>
    6c52:	4610      	mov	r0, r2
    6c54:	4619      	mov	r1, r3
    6c56:	e72c      	b.n	6ab2 <__aeabi_dmul+0x24a>
    6c58:	ea95 0f0c 	teq	r5, ip
    6c5c:	d106      	bne.n	6c6c <__aeabi_ddiv+0x1b0>
    6c5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    6c62:	f43f aefd 	beq.w	6a60 <__aeabi_dmul+0x1f8>
    6c66:	4610      	mov	r0, r2
    6c68:	4619      	mov	r1, r3
    6c6a:	e722      	b.n	6ab2 <__aeabi_dmul+0x24a>
    6c6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    6c70:	bf18      	it	ne
    6c72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    6c76:	f47f aec5 	bne.w	6a04 <__aeabi_dmul+0x19c>
    6c7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    6c7e:	f47f af0d 	bne.w	6a9c <__aeabi_dmul+0x234>
    6c82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    6c86:	f47f aeeb 	bne.w	6a60 <__aeabi_dmul+0x1f8>
    6c8a:	e712      	b.n	6ab2 <__aeabi_dmul+0x24a>

00006c8c <__gedf2>:
    6c8c:	f04f 3cff 	mov.w	ip, #4294967295
    6c90:	e006      	b.n	6ca0 <__cmpdf2+0x4>
    6c92:	bf00      	nop

00006c94 <__ledf2>:
    6c94:	f04f 0c01 	mov.w	ip, #1
    6c98:	e002      	b.n	6ca0 <__cmpdf2+0x4>
    6c9a:	bf00      	nop

00006c9c <__cmpdf2>:
    6c9c:	f04f 0c01 	mov.w	ip, #1
    6ca0:	f84d cd04 	str.w	ip, [sp, #-4]!
    6ca4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    6ca8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    6cac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    6cb0:	bf18      	it	ne
    6cb2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    6cb6:	d01b      	beq.n	6cf0 <__cmpdf2+0x54>
    6cb8:	b001      	add	sp, #4
    6cba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    6cbe:	bf0c      	ite	eq
    6cc0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    6cc4:	ea91 0f03 	teqne	r1, r3
    6cc8:	bf02      	ittt	eq
    6cca:	ea90 0f02 	teqeq	r0, r2
    6cce:	2000      	moveq	r0, #0
    6cd0:	4770      	bxeq	lr
    6cd2:	f110 0f00 	cmn.w	r0, #0
    6cd6:	ea91 0f03 	teq	r1, r3
    6cda:	bf58      	it	pl
    6cdc:	4299      	cmppl	r1, r3
    6cde:	bf08      	it	eq
    6ce0:	4290      	cmpeq	r0, r2
    6ce2:	bf2c      	ite	cs
    6ce4:	17d8      	asrcs	r0, r3, #31
    6ce6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    6cea:	f040 0001 	orr.w	r0, r0, #1
    6cee:	4770      	bx	lr
    6cf0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    6cf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    6cf8:	d102      	bne.n	6d00 <__cmpdf2+0x64>
    6cfa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    6cfe:	d107      	bne.n	6d10 <__cmpdf2+0x74>
    6d00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    6d04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    6d08:	d1d6      	bne.n	6cb8 <__cmpdf2+0x1c>
    6d0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    6d0e:	d0d3      	beq.n	6cb8 <__cmpdf2+0x1c>
    6d10:	f85d 0b04 	ldr.w	r0, [sp], #4
    6d14:	4770      	bx	lr
    6d16:	bf00      	nop

00006d18 <__aeabi_cdrcmple>:
    6d18:	4684      	mov	ip, r0
    6d1a:	4610      	mov	r0, r2
    6d1c:	4662      	mov	r2, ip
    6d1e:	468c      	mov	ip, r1
    6d20:	4619      	mov	r1, r3
    6d22:	4663      	mov	r3, ip
    6d24:	e000      	b.n	6d28 <__aeabi_cdcmpeq>
    6d26:	bf00      	nop

00006d28 <__aeabi_cdcmpeq>:
    6d28:	b501      	push	{r0, lr}
    6d2a:	f7ff ffb7 	bl	6c9c <__cmpdf2>
    6d2e:	2800      	cmp	r0, #0
    6d30:	bf48      	it	mi
    6d32:	f110 0f00 	cmnmi.w	r0, #0
    6d36:	bd01      	pop	{r0, pc}

00006d38 <__aeabi_dcmpeq>:
    6d38:	f84d ed08 	str.w	lr, [sp, #-8]!
    6d3c:	f7ff fff4 	bl	6d28 <__aeabi_cdcmpeq>
    6d40:	bf0c      	ite	eq
    6d42:	2001      	moveq	r0, #1
    6d44:	2000      	movne	r0, #0
    6d46:	f85d fb08 	ldr.w	pc, [sp], #8
    6d4a:	bf00      	nop

00006d4c <__aeabi_dcmplt>:
    6d4c:	f84d ed08 	str.w	lr, [sp, #-8]!
    6d50:	f7ff ffea 	bl	6d28 <__aeabi_cdcmpeq>
    6d54:	bf34      	ite	cc
    6d56:	2001      	movcc	r0, #1
    6d58:	2000      	movcs	r0, #0
    6d5a:	f85d fb08 	ldr.w	pc, [sp], #8
    6d5e:	bf00      	nop

00006d60 <__aeabi_dcmple>:
    6d60:	f84d ed08 	str.w	lr, [sp, #-8]!
    6d64:	f7ff ffe0 	bl	6d28 <__aeabi_cdcmpeq>
    6d68:	bf94      	ite	ls
    6d6a:	2001      	movls	r0, #1
    6d6c:	2000      	movhi	r0, #0
    6d6e:	f85d fb08 	ldr.w	pc, [sp], #8
    6d72:	bf00      	nop

00006d74 <__aeabi_dcmpge>:
    6d74:	f84d ed08 	str.w	lr, [sp, #-8]!
    6d78:	f7ff ffce 	bl	6d18 <__aeabi_cdrcmple>
    6d7c:	bf94      	ite	ls
    6d7e:	2001      	movls	r0, #1
    6d80:	2000      	movhi	r0, #0
    6d82:	f85d fb08 	ldr.w	pc, [sp], #8
    6d86:	bf00      	nop

00006d88 <__aeabi_dcmpgt>:
    6d88:	f84d ed08 	str.w	lr, [sp, #-8]!
    6d8c:	f7ff ffc4 	bl	6d18 <__aeabi_cdrcmple>
    6d90:	bf34      	ite	cc
    6d92:	2001      	movcc	r0, #1
    6d94:	2000      	movcs	r0, #0
    6d96:	f85d fb08 	ldr.w	pc, [sp], #8
    6d9a:	bf00      	nop

00006d9c <__aeabi_dcmpun>:
    6d9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    6da0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    6da4:	d102      	bne.n	6dac <__aeabi_dcmpun+0x10>
    6da6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    6daa:	d10a      	bne.n	6dc2 <__aeabi_dcmpun+0x26>
    6dac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    6db0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    6db4:	d102      	bne.n	6dbc <__aeabi_dcmpun+0x20>
    6db6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    6dba:	d102      	bne.n	6dc2 <__aeabi_dcmpun+0x26>
    6dbc:	f04f 0000 	mov.w	r0, #0
    6dc0:	4770      	bx	lr
    6dc2:	f04f 0001 	mov.w	r0, #1
    6dc6:	4770      	bx	lr

00006dc8 <__aeabi_d2iz>:
    6dc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
    6dcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    6dd0:	d215      	bcs.n	6dfe <__aeabi_d2iz+0x36>
    6dd2:	d511      	bpl.n	6df8 <__aeabi_d2iz+0x30>
    6dd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    6dd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    6ddc:	d912      	bls.n	6e04 <__aeabi_d2iz+0x3c>
    6dde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    6de2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    6de6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    6dea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    6dee:	fa23 f002 	lsr.w	r0, r3, r2
    6df2:	bf18      	it	ne
    6df4:	4240      	negne	r0, r0
    6df6:	4770      	bx	lr
    6df8:	f04f 0000 	mov.w	r0, #0
    6dfc:	4770      	bx	lr
    6dfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    6e02:	d105      	bne.n	6e10 <__aeabi_d2iz+0x48>
    6e04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    6e08:	bf08      	it	eq
    6e0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    6e0e:	4770      	bx	lr
    6e10:	f04f 0000 	mov.w	r0, #0
    6e14:	4770      	bx	lr
    6e16:	bf00      	nop

00006e18 <__aeabi_d2uiz>:
    6e18:	004a      	lsls	r2, r1, #1
    6e1a:	d211      	bcs.n	6e40 <__aeabi_d2uiz+0x28>
    6e1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    6e20:	d211      	bcs.n	6e46 <__aeabi_d2uiz+0x2e>
    6e22:	d50d      	bpl.n	6e40 <__aeabi_d2uiz+0x28>
    6e24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    6e28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    6e2c:	d40e      	bmi.n	6e4c <__aeabi_d2uiz+0x34>
    6e2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    6e32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    6e36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    6e3a:	fa23 f002 	lsr.w	r0, r3, r2
    6e3e:	4770      	bx	lr
    6e40:	f04f 0000 	mov.w	r0, #0
    6e44:	4770      	bx	lr
    6e46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    6e4a:	d102      	bne.n	6e52 <__aeabi_d2uiz+0x3a>
    6e4c:	f04f 30ff 	mov.w	r0, #4294967295
    6e50:	4770      	bx	lr
    6e52:	f04f 0000 	mov.w	r0, #0
    6e56:	4770      	bx	lr

00006e58 <__aeabi_d2f>:
    6e58:	ea4f 0241 	mov.w	r2, r1, lsl #1
    6e5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    6e60:	bf24      	itt	cs
    6e62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    6e66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    6e6a:	d90d      	bls.n	6e88 <__aeabi_d2f+0x30>
    6e6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    6e70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    6e74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    6e78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6e7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    6e80:	bf08      	it	eq
    6e82:	f020 0001 	biceq.w	r0, r0, #1
    6e86:	4770      	bx	lr
    6e88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    6e8c:	d121      	bne.n	6ed2 <__aeabi_d2f+0x7a>
    6e8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    6e92:	bfbc      	itt	lt
    6e94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    6e98:	4770      	bxlt	lr
    6e9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    6e9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    6ea2:	f1c2 0218 	rsb	r2, r2, #24
    6ea6:	f1c2 0c20 	rsb	ip, r2, #32
    6eaa:	fa10 f30c 	lsls.w	r3, r0, ip
    6eae:	fa20 f002 	lsr.w	r0, r0, r2
    6eb2:	bf18      	it	ne
    6eb4:	f040 0001 	orrne.w	r0, r0, #1
    6eb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    6ebc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    6ec0:	fa03 fc0c 	lsl.w	ip, r3, ip
    6ec4:	ea40 000c 	orr.w	r0, r0, ip
    6ec8:	fa23 f302 	lsr.w	r3, r3, r2
    6ecc:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6ed0:	e7cc      	b.n	6e6c <__aeabi_d2f+0x14>
    6ed2:	ea7f 5362 	mvns.w	r3, r2, asr #21
    6ed6:	d107      	bne.n	6ee8 <__aeabi_d2f+0x90>
    6ed8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    6edc:	bf1e      	ittt	ne
    6ede:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    6ee2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    6ee6:	4770      	bxne	lr
    6ee8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    6eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    6ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6ef4:	4770      	bx	lr
    6ef6:	bf00      	nop

00006ef8 <__aeabi_atexit>:
    6ef8:	460b      	mov	r3, r1
    6efa:	4601      	mov	r1, r0
    6efc:	4618      	mov	r0, r3
    6efe:	f000 b801 	b.w	6f04 <__cxa_atexit>
    6f02:	bf00      	nop

00006f04 <__cxa_atexit>:
    6f04:	4613      	mov	r3, r2
    6f06:	460a      	mov	r2, r1
    6f08:	4601      	mov	r1, r0
    6f0a:	2002      	movs	r0, #2
    6f0c:	f000 bb52 	b.w	75b4 <__register_exitproc>

00006f10 <__errno>:
    6f10:	4b01      	ldr	r3, [pc, #4]	; (6f18 <__errno+0x8>)
    6f12:	6818      	ldr	r0, [r3, #0]
    6f14:	4770      	bx	lr
    6f16:	bf00      	nop
    6f18:	1fff12f8 	.word	0x1fff12f8

00006f1c <__libc_init_array>:
    6f1c:	b570      	push	{r4, r5, r6, lr}
    6f1e:	4e0f      	ldr	r6, [pc, #60]	; (6f5c <__libc_init_array+0x40>)
    6f20:	4d0f      	ldr	r5, [pc, #60]	; (6f60 <__libc_init_array+0x44>)
    6f22:	1b76      	subs	r6, r6, r5
    6f24:	10b6      	asrs	r6, r6, #2
    6f26:	bf18      	it	ne
    6f28:	2400      	movne	r4, #0
    6f2a:	d005      	beq.n	6f38 <__libc_init_array+0x1c>
    6f2c:	3401      	adds	r4, #1
    6f2e:	f855 3b04 	ldr.w	r3, [r5], #4
    6f32:	4798      	blx	r3
    6f34:	42a6      	cmp	r6, r4
    6f36:	d1f9      	bne.n	6f2c <__libc_init_array+0x10>
    6f38:	4e0a      	ldr	r6, [pc, #40]	; (6f64 <__libc_init_array+0x48>)
    6f3a:	4d0b      	ldr	r5, [pc, #44]	; (6f68 <__libc_init_array+0x4c>)
    6f3c:	1b76      	subs	r6, r6, r5
    6f3e:	f000 fedd 	bl	7cfc <_init>
    6f42:	10b6      	asrs	r6, r6, #2
    6f44:	bf18      	it	ne
    6f46:	2400      	movne	r4, #0
    6f48:	d006      	beq.n	6f58 <__libc_init_array+0x3c>
    6f4a:	3401      	adds	r4, #1
    6f4c:	f855 3b04 	ldr.w	r3, [r5], #4
    6f50:	4798      	blx	r3
    6f52:	42a6      	cmp	r6, r4
    6f54:	d1f9      	bne.n	6f4a <__libc_init_array+0x2e>
    6f56:	bd70      	pop	{r4, r5, r6, pc}
    6f58:	bd70      	pop	{r4, r5, r6, pc}
    6f5a:	bf00      	nop
    6f5c:	00007d08 	.word	0x00007d08
    6f60:	00007d08 	.word	0x00007d08
    6f64:	00007d18 	.word	0x00007d18
    6f68:	00007d08 	.word	0x00007d08

00006f6c <malloc>:
    6f6c:	4b02      	ldr	r3, [pc, #8]	; (6f78 <malloc+0xc>)
    6f6e:	4601      	mov	r1, r0
    6f70:	6818      	ldr	r0, [r3, #0]
    6f72:	f000 b803 	b.w	6f7c <_malloc_r>
    6f76:	bf00      	nop
    6f78:	1fff12f8 	.word	0x1fff12f8

00006f7c <_malloc_r>:
    6f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f80:	f101 050b 	add.w	r5, r1, #11
    6f84:	2d16      	cmp	r5, #22
    6f86:	b083      	sub	sp, #12
    6f88:	4606      	mov	r6, r0
    6f8a:	f240 809f 	bls.w	70cc <_malloc_r+0x150>
    6f8e:	f035 0507 	bics.w	r5, r5, #7
    6f92:	f100 80bf 	bmi.w	7114 <_malloc_r+0x198>
    6f96:	42a9      	cmp	r1, r5
    6f98:	f200 80bc 	bhi.w	7114 <_malloc_r+0x198>
    6f9c:	f000 faf4 	bl	7588 <__malloc_lock>
    6fa0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    6fa4:	f0c0 829c 	bcc.w	74e0 <_malloc_r+0x564>
    6fa8:	0a6b      	lsrs	r3, r5, #9
    6faa:	f000 80ba 	beq.w	7122 <_malloc_r+0x1a6>
    6fae:	2b04      	cmp	r3, #4
    6fb0:	f200 8183 	bhi.w	72ba <_malloc_r+0x33e>
    6fb4:	09a8      	lsrs	r0, r5, #6
    6fb6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    6fba:	ea4f 034e 	mov.w	r3, lr, lsl #1
    6fbe:	3038      	adds	r0, #56	; 0x38
    6fc0:	4fc4      	ldr	r7, [pc, #784]	; (72d4 <_malloc_r+0x358>)
    6fc2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    6fc6:	f1a3 0108 	sub.w	r1, r3, #8
    6fca:	685c      	ldr	r4, [r3, #4]
    6fcc:	42a1      	cmp	r1, r4
    6fce:	d107      	bne.n	6fe0 <_malloc_r+0x64>
    6fd0:	e0ac      	b.n	712c <_malloc_r+0x1b0>
    6fd2:	2a00      	cmp	r2, #0
    6fd4:	f280 80ac 	bge.w	7130 <_malloc_r+0x1b4>
    6fd8:	68e4      	ldr	r4, [r4, #12]
    6fda:	42a1      	cmp	r1, r4
    6fdc:	f000 80a6 	beq.w	712c <_malloc_r+0x1b0>
    6fe0:	6863      	ldr	r3, [r4, #4]
    6fe2:	f023 0303 	bic.w	r3, r3, #3
    6fe6:	1b5a      	subs	r2, r3, r5
    6fe8:	2a0f      	cmp	r2, #15
    6fea:	ddf2      	ble.n	6fd2 <_malloc_r+0x56>
    6fec:	49b9      	ldr	r1, [pc, #740]	; (72d4 <_malloc_r+0x358>)
    6fee:	693c      	ldr	r4, [r7, #16]
    6ff0:	f101 0e08 	add.w	lr, r1, #8
    6ff4:	4574      	cmp	r4, lr
    6ff6:	f000 81b3 	beq.w	7360 <_malloc_r+0x3e4>
    6ffa:	6863      	ldr	r3, [r4, #4]
    6ffc:	f023 0303 	bic.w	r3, r3, #3
    7000:	1b5a      	subs	r2, r3, r5
    7002:	2a0f      	cmp	r2, #15
    7004:	f300 8199 	bgt.w	733a <_malloc_r+0x3be>
    7008:	2a00      	cmp	r2, #0
    700a:	f8c1 e014 	str.w	lr, [r1, #20]
    700e:	f8c1 e010 	str.w	lr, [r1, #16]
    7012:	f280 809e 	bge.w	7152 <_malloc_r+0x1d6>
    7016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    701a:	f080 8167 	bcs.w	72ec <_malloc_r+0x370>
    701e:	08db      	lsrs	r3, r3, #3
    7020:	f103 0c01 	add.w	ip, r3, #1
    7024:	2201      	movs	r2, #1
    7026:	109b      	asrs	r3, r3, #2
    7028:	fa02 f303 	lsl.w	r3, r2, r3
    702c:	684a      	ldr	r2, [r1, #4]
    702e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    7032:	f8c4 8008 	str.w	r8, [r4, #8]
    7036:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    703a:	431a      	orrs	r2, r3
    703c:	f1a9 0308 	sub.w	r3, r9, #8
    7040:	60e3      	str	r3, [r4, #12]
    7042:	604a      	str	r2, [r1, #4]
    7044:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    7048:	f8c8 400c 	str.w	r4, [r8, #12]
    704c:	1083      	asrs	r3, r0, #2
    704e:	2401      	movs	r4, #1
    7050:	409c      	lsls	r4, r3
    7052:	4294      	cmp	r4, r2
    7054:	f200 808a 	bhi.w	716c <_malloc_r+0x1f0>
    7058:	4214      	tst	r4, r2
    705a:	d106      	bne.n	706a <_malloc_r+0xee>
    705c:	f020 0003 	bic.w	r0, r0, #3
    7060:	0064      	lsls	r4, r4, #1
    7062:	4214      	tst	r4, r2
    7064:	f100 0004 	add.w	r0, r0, #4
    7068:	d0fa      	beq.n	7060 <_malloc_r+0xe4>
    706a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    706e:	46cc      	mov	ip, r9
    7070:	4680      	mov	r8, r0
    7072:	f8dc 100c 	ldr.w	r1, [ip, #12]
    7076:	458c      	cmp	ip, r1
    7078:	d107      	bne.n	708a <_malloc_r+0x10e>
    707a:	e173      	b.n	7364 <_malloc_r+0x3e8>
    707c:	2a00      	cmp	r2, #0
    707e:	f280 8181 	bge.w	7384 <_malloc_r+0x408>
    7082:	68c9      	ldr	r1, [r1, #12]
    7084:	458c      	cmp	ip, r1
    7086:	f000 816d 	beq.w	7364 <_malloc_r+0x3e8>
    708a:	684b      	ldr	r3, [r1, #4]
    708c:	f023 0303 	bic.w	r3, r3, #3
    7090:	1b5a      	subs	r2, r3, r5
    7092:	2a0f      	cmp	r2, #15
    7094:	ddf2      	ble.n	707c <_malloc_r+0x100>
    7096:	460c      	mov	r4, r1
    7098:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    709c:	f854 8f08 	ldr.w	r8, [r4, #8]!
    70a0:	194b      	adds	r3, r1, r5
    70a2:	f045 0501 	orr.w	r5, r5, #1
    70a6:	604d      	str	r5, [r1, #4]
    70a8:	f042 0101 	orr.w	r1, r2, #1
    70ac:	f8c8 c00c 	str.w	ip, [r8, #12]
    70b0:	4630      	mov	r0, r6
    70b2:	f8cc 8008 	str.w	r8, [ip, #8]
    70b6:	617b      	str	r3, [r7, #20]
    70b8:	613b      	str	r3, [r7, #16]
    70ba:	f8c3 e00c 	str.w	lr, [r3, #12]
    70be:	f8c3 e008 	str.w	lr, [r3, #8]
    70c2:	6059      	str	r1, [r3, #4]
    70c4:	509a      	str	r2, [r3, r2]
    70c6:	f000 fa61 	bl	758c <__malloc_unlock>
    70ca:	e01f      	b.n	710c <_malloc_r+0x190>
    70cc:	2910      	cmp	r1, #16
    70ce:	d821      	bhi.n	7114 <_malloc_r+0x198>
    70d0:	f000 fa5a 	bl	7588 <__malloc_lock>
    70d4:	2510      	movs	r5, #16
    70d6:	2306      	movs	r3, #6
    70d8:	2002      	movs	r0, #2
    70da:	4f7e      	ldr	r7, [pc, #504]	; (72d4 <_malloc_r+0x358>)
    70dc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    70e0:	f1a3 0208 	sub.w	r2, r3, #8
    70e4:	685c      	ldr	r4, [r3, #4]
    70e6:	4294      	cmp	r4, r2
    70e8:	f000 8145 	beq.w	7376 <_malloc_r+0x3fa>
    70ec:	6863      	ldr	r3, [r4, #4]
    70ee:	68e1      	ldr	r1, [r4, #12]
    70f0:	68a5      	ldr	r5, [r4, #8]
    70f2:	f023 0303 	bic.w	r3, r3, #3
    70f6:	4423      	add	r3, r4
    70f8:	4630      	mov	r0, r6
    70fa:	685a      	ldr	r2, [r3, #4]
    70fc:	60e9      	str	r1, [r5, #12]
    70fe:	f042 0201 	orr.w	r2, r2, #1
    7102:	608d      	str	r5, [r1, #8]
    7104:	605a      	str	r2, [r3, #4]
    7106:	f000 fa41 	bl	758c <__malloc_unlock>
    710a:	3408      	adds	r4, #8
    710c:	4620      	mov	r0, r4
    710e:	b003      	add	sp, #12
    7110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7114:	2400      	movs	r4, #0
    7116:	230c      	movs	r3, #12
    7118:	4620      	mov	r0, r4
    711a:	6033      	str	r3, [r6, #0]
    711c:	b003      	add	sp, #12
    711e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7122:	2380      	movs	r3, #128	; 0x80
    7124:	f04f 0e40 	mov.w	lr, #64	; 0x40
    7128:	203f      	movs	r0, #63	; 0x3f
    712a:	e749      	b.n	6fc0 <_malloc_r+0x44>
    712c:	4670      	mov	r0, lr
    712e:	e75d      	b.n	6fec <_malloc_r+0x70>
    7130:	4423      	add	r3, r4
    7132:	68e1      	ldr	r1, [r4, #12]
    7134:	685a      	ldr	r2, [r3, #4]
    7136:	68a5      	ldr	r5, [r4, #8]
    7138:	f042 0201 	orr.w	r2, r2, #1
    713c:	60e9      	str	r1, [r5, #12]
    713e:	4630      	mov	r0, r6
    7140:	608d      	str	r5, [r1, #8]
    7142:	605a      	str	r2, [r3, #4]
    7144:	f000 fa22 	bl	758c <__malloc_unlock>
    7148:	3408      	adds	r4, #8
    714a:	4620      	mov	r0, r4
    714c:	b003      	add	sp, #12
    714e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7152:	4423      	add	r3, r4
    7154:	4630      	mov	r0, r6
    7156:	685a      	ldr	r2, [r3, #4]
    7158:	f042 0201 	orr.w	r2, r2, #1
    715c:	605a      	str	r2, [r3, #4]
    715e:	f000 fa15 	bl	758c <__malloc_unlock>
    7162:	3408      	adds	r4, #8
    7164:	4620      	mov	r0, r4
    7166:	b003      	add	sp, #12
    7168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    716c:	68bc      	ldr	r4, [r7, #8]
    716e:	6863      	ldr	r3, [r4, #4]
    7170:	f023 0803 	bic.w	r8, r3, #3
    7174:	45a8      	cmp	r8, r5
    7176:	d304      	bcc.n	7182 <_malloc_r+0x206>
    7178:	ebc5 0308 	rsb	r3, r5, r8
    717c:	2b0f      	cmp	r3, #15
    717e:	f300 808c 	bgt.w	729a <_malloc_r+0x31e>
    7182:	4b55      	ldr	r3, [pc, #340]	; (72d8 <_malloc_r+0x35c>)
    7184:	f8df 9160 	ldr.w	r9, [pc, #352]	; 72e8 <_malloc_r+0x36c>
    7188:	681a      	ldr	r2, [r3, #0]
    718a:	f8d9 3000 	ldr.w	r3, [r9]
    718e:	3301      	adds	r3, #1
    7190:	442a      	add	r2, r5
    7192:	eb04 0a08 	add.w	sl, r4, r8
    7196:	f000 8160 	beq.w	745a <_malloc_r+0x4de>
    719a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    719e:	320f      	adds	r2, #15
    71a0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    71a4:	f022 020f 	bic.w	r2, r2, #15
    71a8:	4611      	mov	r1, r2
    71aa:	4630      	mov	r0, r6
    71ac:	9201      	str	r2, [sp, #4]
    71ae:	f000 f9ef 	bl	7590 <_sbrk_r>
    71b2:	f1b0 3fff 	cmp.w	r0, #4294967295
    71b6:	4683      	mov	fp, r0
    71b8:	9a01      	ldr	r2, [sp, #4]
    71ba:	f000 8158 	beq.w	746e <_malloc_r+0x4f2>
    71be:	4582      	cmp	sl, r0
    71c0:	f200 80fc 	bhi.w	73bc <_malloc_r+0x440>
    71c4:	4b45      	ldr	r3, [pc, #276]	; (72dc <_malloc_r+0x360>)
    71c6:	6819      	ldr	r1, [r3, #0]
    71c8:	45da      	cmp	sl, fp
    71ca:	4411      	add	r1, r2
    71cc:	6019      	str	r1, [r3, #0]
    71ce:	f000 8153 	beq.w	7478 <_malloc_r+0x4fc>
    71d2:	f8d9 0000 	ldr.w	r0, [r9]
    71d6:	f8df e110 	ldr.w	lr, [pc, #272]	; 72e8 <_malloc_r+0x36c>
    71da:	3001      	adds	r0, #1
    71dc:	bf1b      	ittet	ne
    71de:	ebca 0a0b 	rsbne	sl, sl, fp
    71e2:	4451      	addne	r1, sl
    71e4:	f8ce b000 	streq.w	fp, [lr]
    71e8:	6019      	strne	r1, [r3, #0]
    71ea:	f01b 0107 	ands.w	r1, fp, #7
    71ee:	f000 8117 	beq.w	7420 <_malloc_r+0x4a4>
    71f2:	f1c1 0008 	rsb	r0, r1, #8
    71f6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    71fa:	4483      	add	fp, r0
    71fc:	3108      	adds	r1, #8
    71fe:	445a      	add	r2, fp
    7200:	f3c2 020b 	ubfx	r2, r2, #0, #12
    7204:	ebc2 0901 	rsb	r9, r2, r1
    7208:	4649      	mov	r1, r9
    720a:	4630      	mov	r0, r6
    720c:	9301      	str	r3, [sp, #4]
    720e:	f000 f9bf 	bl	7590 <_sbrk_r>
    7212:	1c43      	adds	r3, r0, #1
    7214:	9b01      	ldr	r3, [sp, #4]
    7216:	f000 813f 	beq.w	7498 <_malloc_r+0x51c>
    721a:	ebcb 0200 	rsb	r2, fp, r0
    721e:	444a      	add	r2, r9
    7220:	f042 0201 	orr.w	r2, r2, #1
    7224:	6819      	ldr	r1, [r3, #0]
    7226:	f8c7 b008 	str.w	fp, [r7, #8]
    722a:	4449      	add	r1, r9
    722c:	42bc      	cmp	r4, r7
    722e:	f8cb 2004 	str.w	r2, [fp, #4]
    7232:	6019      	str	r1, [r3, #0]
    7234:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 72dc <_malloc_r+0x360>
    7238:	d016      	beq.n	7268 <_malloc_r+0x2ec>
    723a:	f1b8 0f0f 	cmp.w	r8, #15
    723e:	f240 80fd 	bls.w	743c <_malloc_r+0x4c0>
    7242:	6862      	ldr	r2, [r4, #4]
    7244:	f1a8 030c 	sub.w	r3, r8, #12
    7248:	f023 0307 	bic.w	r3, r3, #7
    724c:	18e0      	adds	r0, r4, r3
    724e:	f002 0201 	and.w	r2, r2, #1
    7252:	f04f 0e05 	mov.w	lr, #5
    7256:	431a      	orrs	r2, r3
    7258:	2b0f      	cmp	r3, #15
    725a:	6062      	str	r2, [r4, #4]
    725c:	f8c0 e004 	str.w	lr, [r0, #4]
    7260:	f8c0 e008 	str.w	lr, [r0, #8]
    7264:	f200 811c 	bhi.w	74a0 <_malloc_r+0x524>
    7268:	4b1d      	ldr	r3, [pc, #116]	; (72e0 <_malloc_r+0x364>)
    726a:	68bc      	ldr	r4, [r7, #8]
    726c:	681a      	ldr	r2, [r3, #0]
    726e:	4291      	cmp	r1, r2
    7270:	bf88      	it	hi
    7272:	6019      	strhi	r1, [r3, #0]
    7274:	4b1b      	ldr	r3, [pc, #108]	; (72e4 <_malloc_r+0x368>)
    7276:	681a      	ldr	r2, [r3, #0]
    7278:	4291      	cmp	r1, r2
    727a:	6862      	ldr	r2, [r4, #4]
    727c:	bf88      	it	hi
    727e:	6019      	strhi	r1, [r3, #0]
    7280:	f022 0203 	bic.w	r2, r2, #3
    7284:	4295      	cmp	r5, r2
    7286:	eba2 0305 	sub.w	r3, r2, r5
    728a:	d801      	bhi.n	7290 <_malloc_r+0x314>
    728c:	2b0f      	cmp	r3, #15
    728e:	dc04      	bgt.n	729a <_malloc_r+0x31e>
    7290:	4630      	mov	r0, r6
    7292:	f000 f97b 	bl	758c <__malloc_unlock>
    7296:	2400      	movs	r4, #0
    7298:	e738      	b.n	710c <_malloc_r+0x190>
    729a:	1962      	adds	r2, r4, r5
    729c:	f043 0301 	orr.w	r3, r3, #1
    72a0:	f045 0501 	orr.w	r5, r5, #1
    72a4:	6065      	str	r5, [r4, #4]
    72a6:	4630      	mov	r0, r6
    72a8:	60ba      	str	r2, [r7, #8]
    72aa:	6053      	str	r3, [r2, #4]
    72ac:	f000 f96e 	bl	758c <__malloc_unlock>
    72b0:	3408      	adds	r4, #8
    72b2:	4620      	mov	r0, r4
    72b4:	b003      	add	sp, #12
    72b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    72ba:	2b14      	cmp	r3, #20
    72bc:	d971      	bls.n	73a2 <_malloc_r+0x426>
    72be:	2b54      	cmp	r3, #84	; 0x54
    72c0:	f200 80a4 	bhi.w	740c <_malloc_r+0x490>
    72c4:	0b28      	lsrs	r0, r5, #12
    72c6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    72ca:	ea4f 034e 	mov.w	r3, lr, lsl #1
    72ce:	306e      	adds	r0, #110	; 0x6e
    72d0:	e676      	b.n	6fc0 <_malloc_r+0x44>
    72d2:	bf00      	nop
    72d4:	1fff12fc 	.word	0x1fff12fc
    72d8:	1fff24ac 	.word	0x1fff24ac
    72dc:	1fff24b0 	.word	0x1fff24b0
    72e0:	1fff24a8 	.word	0x1fff24a8
    72e4:	1fff24a4 	.word	0x1fff24a4
    72e8:	1fff1708 	.word	0x1fff1708
    72ec:	0a5a      	lsrs	r2, r3, #9
    72ee:	2a04      	cmp	r2, #4
    72f0:	d95e      	bls.n	73b0 <_malloc_r+0x434>
    72f2:	2a14      	cmp	r2, #20
    72f4:	f200 80b3 	bhi.w	745e <_malloc_r+0x4e2>
    72f8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    72fc:	0049      	lsls	r1, r1, #1
    72fe:	325b      	adds	r2, #91	; 0x5b
    7300:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    7304:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    7308:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 74e8 <_malloc_r+0x56c>
    730c:	f1ac 0c08 	sub.w	ip, ip, #8
    7310:	458c      	cmp	ip, r1
    7312:	f000 8088 	beq.w	7426 <_malloc_r+0x4aa>
    7316:	684a      	ldr	r2, [r1, #4]
    7318:	f022 0203 	bic.w	r2, r2, #3
    731c:	4293      	cmp	r3, r2
    731e:	d202      	bcs.n	7326 <_malloc_r+0x3aa>
    7320:	6889      	ldr	r1, [r1, #8]
    7322:	458c      	cmp	ip, r1
    7324:	d1f7      	bne.n	7316 <_malloc_r+0x39a>
    7326:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    732a:	687a      	ldr	r2, [r7, #4]
    732c:	f8c4 c00c 	str.w	ip, [r4, #12]
    7330:	60a1      	str	r1, [r4, #8]
    7332:	f8cc 4008 	str.w	r4, [ip, #8]
    7336:	60cc      	str	r4, [r1, #12]
    7338:	e688      	b.n	704c <_malloc_r+0xd0>
    733a:	1963      	adds	r3, r4, r5
    733c:	f042 0701 	orr.w	r7, r2, #1
    7340:	f045 0501 	orr.w	r5, r5, #1
    7344:	6065      	str	r5, [r4, #4]
    7346:	4630      	mov	r0, r6
    7348:	614b      	str	r3, [r1, #20]
    734a:	610b      	str	r3, [r1, #16]
    734c:	f8c3 e00c 	str.w	lr, [r3, #12]
    7350:	f8c3 e008 	str.w	lr, [r3, #8]
    7354:	605f      	str	r7, [r3, #4]
    7356:	509a      	str	r2, [r3, r2]
    7358:	3408      	adds	r4, #8
    735a:	f000 f917 	bl	758c <__malloc_unlock>
    735e:	e6d5      	b.n	710c <_malloc_r+0x190>
    7360:	684a      	ldr	r2, [r1, #4]
    7362:	e673      	b.n	704c <_malloc_r+0xd0>
    7364:	f108 0801 	add.w	r8, r8, #1
    7368:	f018 0f03 	tst.w	r8, #3
    736c:	f10c 0c08 	add.w	ip, ip, #8
    7370:	f47f ae7f 	bne.w	7072 <_malloc_r+0xf6>
    7374:	e030      	b.n	73d8 <_malloc_r+0x45c>
    7376:	68dc      	ldr	r4, [r3, #12]
    7378:	42a3      	cmp	r3, r4
    737a:	bf08      	it	eq
    737c:	3002      	addeq	r0, #2
    737e:	f43f ae35 	beq.w	6fec <_malloc_r+0x70>
    7382:	e6b3      	b.n	70ec <_malloc_r+0x170>
    7384:	440b      	add	r3, r1
    7386:	460c      	mov	r4, r1
    7388:	685a      	ldr	r2, [r3, #4]
    738a:	68c9      	ldr	r1, [r1, #12]
    738c:	f854 5f08 	ldr.w	r5, [r4, #8]!
    7390:	f042 0201 	orr.w	r2, r2, #1
    7394:	605a      	str	r2, [r3, #4]
    7396:	4630      	mov	r0, r6
    7398:	60e9      	str	r1, [r5, #12]
    739a:	608d      	str	r5, [r1, #8]
    739c:	f000 f8f6 	bl	758c <__malloc_unlock>
    73a0:	e6b4      	b.n	710c <_malloc_r+0x190>
    73a2:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    73a6:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    73aa:	ea4f 034e 	mov.w	r3, lr, lsl #1
    73ae:	e607      	b.n	6fc0 <_malloc_r+0x44>
    73b0:	099a      	lsrs	r2, r3, #6
    73b2:	f102 0139 	add.w	r1, r2, #57	; 0x39
    73b6:	0049      	lsls	r1, r1, #1
    73b8:	3238      	adds	r2, #56	; 0x38
    73ba:	e7a1      	b.n	7300 <_malloc_r+0x384>
    73bc:	42bc      	cmp	r4, r7
    73be:	4b4a      	ldr	r3, [pc, #296]	; (74e8 <_malloc_r+0x56c>)
    73c0:	f43f af00 	beq.w	71c4 <_malloc_r+0x248>
    73c4:	689c      	ldr	r4, [r3, #8]
    73c6:	6862      	ldr	r2, [r4, #4]
    73c8:	f022 0203 	bic.w	r2, r2, #3
    73cc:	e75a      	b.n	7284 <_malloc_r+0x308>
    73ce:	f859 3908 	ldr.w	r3, [r9], #-8
    73d2:	4599      	cmp	r9, r3
    73d4:	f040 8082 	bne.w	74dc <_malloc_r+0x560>
    73d8:	f010 0f03 	tst.w	r0, #3
    73dc:	f100 30ff 	add.w	r0, r0, #4294967295
    73e0:	d1f5      	bne.n	73ce <_malloc_r+0x452>
    73e2:	687b      	ldr	r3, [r7, #4]
    73e4:	ea23 0304 	bic.w	r3, r3, r4
    73e8:	607b      	str	r3, [r7, #4]
    73ea:	0064      	lsls	r4, r4, #1
    73ec:	429c      	cmp	r4, r3
    73ee:	f63f aebd 	bhi.w	716c <_malloc_r+0x1f0>
    73f2:	2c00      	cmp	r4, #0
    73f4:	f43f aeba 	beq.w	716c <_malloc_r+0x1f0>
    73f8:	421c      	tst	r4, r3
    73fa:	4640      	mov	r0, r8
    73fc:	f47f ae35 	bne.w	706a <_malloc_r+0xee>
    7400:	0064      	lsls	r4, r4, #1
    7402:	421c      	tst	r4, r3
    7404:	f100 0004 	add.w	r0, r0, #4
    7408:	d0fa      	beq.n	7400 <_malloc_r+0x484>
    740a:	e62e      	b.n	706a <_malloc_r+0xee>
    740c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    7410:	d818      	bhi.n	7444 <_malloc_r+0x4c8>
    7412:	0be8      	lsrs	r0, r5, #15
    7414:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    7418:	ea4f 034e 	mov.w	r3, lr, lsl #1
    741c:	3077      	adds	r0, #119	; 0x77
    741e:	e5cf      	b.n	6fc0 <_malloc_r+0x44>
    7420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    7424:	e6eb      	b.n	71fe <_malloc_r+0x282>
    7426:	2101      	movs	r1, #1
    7428:	f8d8 3004 	ldr.w	r3, [r8, #4]
    742c:	1092      	asrs	r2, r2, #2
    742e:	fa01 f202 	lsl.w	r2, r1, r2
    7432:	431a      	orrs	r2, r3
    7434:	f8c8 2004 	str.w	r2, [r8, #4]
    7438:	4661      	mov	r1, ip
    743a:	e777      	b.n	732c <_malloc_r+0x3b0>
    743c:	2301      	movs	r3, #1
    743e:	f8cb 3004 	str.w	r3, [fp, #4]
    7442:	e725      	b.n	7290 <_malloc_r+0x314>
    7444:	f240 5254 	movw	r2, #1364	; 0x554
    7448:	4293      	cmp	r3, r2
    744a:	d820      	bhi.n	748e <_malloc_r+0x512>
    744c:	0ca8      	lsrs	r0, r5, #18
    744e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    7452:	ea4f 034e 	mov.w	r3, lr, lsl #1
    7456:	307c      	adds	r0, #124	; 0x7c
    7458:	e5b2      	b.n	6fc0 <_malloc_r+0x44>
    745a:	3210      	adds	r2, #16
    745c:	e6a4      	b.n	71a8 <_malloc_r+0x22c>
    745e:	2a54      	cmp	r2, #84	; 0x54
    7460:	d826      	bhi.n	74b0 <_malloc_r+0x534>
    7462:	0b1a      	lsrs	r2, r3, #12
    7464:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    7468:	0049      	lsls	r1, r1, #1
    746a:	326e      	adds	r2, #110	; 0x6e
    746c:	e748      	b.n	7300 <_malloc_r+0x384>
    746e:	68bc      	ldr	r4, [r7, #8]
    7470:	6862      	ldr	r2, [r4, #4]
    7472:	f022 0203 	bic.w	r2, r2, #3
    7476:	e705      	b.n	7284 <_malloc_r+0x308>
    7478:	f3ca 000b 	ubfx	r0, sl, #0, #12
    747c:	2800      	cmp	r0, #0
    747e:	f47f aea8 	bne.w	71d2 <_malloc_r+0x256>
    7482:	4442      	add	r2, r8
    7484:	68bb      	ldr	r3, [r7, #8]
    7486:	f042 0201 	orr.w	r2, r2, #1
    748a:	605a      	str	r2, [r3, #4]
    748c:	e6ec      	b.n	7268 <_malloc_r+0x2ec>
    748e:	23fe      	movs	r3, #254	; 0xfe
    7490:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    7494:	207e      	movs	r0, #126	; 0x7e
    7496:	e593      	b.n	6fc0 <_malloc_r+0x44>
    7498:	2201      	movs	r2, #1
    749a:	f04f 0900 	mov.w	r9, #0
    749e:	e6c1      	b.n	7224 <_malloc_r+0x2a8>
    74a0:	f104 0108 	add.w	r1, r4, #8
    74a4:	4630      	mov	r0, r6
    74a6:	f000 f949 	bl	773c <_free_r>
    74aa:	f8d9 1000 	ldr.w	r1, [r9]
    74ae:	e6db      	b.n	7268 <_malloc_r+0x2ec>
    74b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    74b4:	d805      	bhi.n	74c2 <_malloc_r+0x546>
    74b6:	0bda      	lsrs	r2, r3, #15
    74b8:	f102 0178 	add.w	r1, r2, #120	; 0x78
    74bc:	0049      	lsls	r1, r1, #1
    74be:	3277      	adds	r2, #119	; 0x77
    74c0:	e71e      	b.n	7300 <_malloc_r+0x384>
    74c2:	f240 5154 	movw	r1, #1364	; 0x554
    74c6:	428a      	cmp	r2, r1
    74c8:	d805      	bhi.n	74d6 <_malloc_r+0x55a>
    74ca:	0c9a      	lsrs	r2, r3, #18
    74cc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    74d0:	0049      	lsls	r1, r1, #1
    74d2:	327c      	adds	r2, #124	; 0x7c
    74d4:	e714      	b.n	7300 <_malloc_r+0x384>
    74d6:	21fe      	movs	r1, #254	; 0xfe
    74d8:	227e      	movs	r2, #126	; 0x7e
    74da:	e711      	b.n	7300 <_malloc_r+0x384>
    74dc:	687b      	ldr	r3, [r7, #4]
    74de:	e784      	b.n	73ea <_malloc_r+0x46e>
    74e0:	08e8      	lsrs	r0, r5, #3
    74e2:	1c43      	adds	r3, r0, #1
    74e4:	005b      	lsls	r3, r3, #1
    74e6:	e5f8      	b.n	70da <_malloc_r+0x15e>
    74e8:	1fff12fc 	.word	0x1fff12fc

000074ec <memset>:
    74ec:	b470      	push	{r4, r5, r6}
    74ee:	0784      	lsls	r4, r0, #30
    74f0:	d046      	beq.n	7580 <memset+0x94>
    74f2:	1e54      	subs	r4, r2, #1
    74f4:	2a00      	cmp	r2, #0
    74f6:	d041      	beq.n	757c <memset+0x90>
    74f8:	b2cd      	uxtb	r5, r1
    74fa:	4603      	mov	r3, r0
    74fc:	e002      	b.n	7504 <memset+0x18>
    74fe:	1e62      	subs	r2, r4, #1
    7500:	b3e4      	cbz	r4, 757c <memset+0x90>
    7502:	4614      	mov	r4, r2
    7504:	f803 5b01 	strb.w	r5, [r3], #1
    7508:	079a      	lsls	r2, r3, #30
    750a:	d1f8      	bne.n	74fe <memset+0x12>
    750c:	2c03      	cmp	r4, #3
    750e:	d92e      	bls.n	756e <memset+0x82>
    7510:	b2cd      	uxtb	r5, r1
    7512:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    7516:	2c0f      	cmp	r4, #15
    7518:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    751c:	d919      	bls.n	7552 <memset+0x66>
    751e:	f103 0210 	add.w	r2, r3, #16
    7522:	4626      	mov	r6, r4
    7524:	3e10      	subs	r6, #16
    7526:	2e0f      	cmp	r6, #15
    7528:	f842 5c10 	str.w	r5, [r2, #-16]
    752c:	f842 5c0c 	str.w	r5, [r2, #-12]
    7530:	f842 5c08 	str.w	r5, [r2, #-8]
    7534:	f842 5c04 	str.w	r5, [r2, #-4]
    7538:	f102 0210 	add.w	r2, r2, #16
    753c:	d8f2      	bhi.n	7524 <memset+0x38>
    753e:	f1a4 0210 	sub.w	r2, r4, #16
    7542:	f022 020f 	bic.w	r2, r2, #15
    7546:	f004 040f 	and.w	r4, r4, #15
    754a:	3210      	adds	r2, #16
    754c:	2c03      	cmp	r4, #3
    754e:	4413      	add	r3, r2
    7550:	d90d      	bls.n	756e <memset+0x82>
    7552:	461e      	mov	r6, r3
    7554:	4622      	mov	r2, r4
    7556:	3a04      	subs	r2, #4
    7558:	2a03      	cmp	r2, #3
    755a:	f846 5b04 	str.w	r5, [r6], #4
    755e:	d8fa      	bhi.n	7556 <memset+0x6a>
    7560:	1f22      	subs	r2, r4, #4
    7562:	f022 0203 	bic.w	r2, r2, #3
    7566:	3204      	adds	r2, #4
    7568:	4413      	add	r3, r2
    756a:	f004 0403 	and.w	r4, r4, #3
    756e:	b12c      	cbz	r4, 757c <memset+0x90>
    7570:	b2c9      	uxtb	r1, r1
    7572:	441c      	add	r4, r3
    7574:	f803 1b01 	strb.w	r1, [r3], #1
    7578:	42a3      	cmp	r3, r4
    757a:	d1fb      	bne.n	7574 <memset+0x88>
    757c:	bc70      	pop	{r4, r5, r6}
    757e:	4770      	bx	lr
    7580:	4614      	mov	r4, r2
    7582:	4603      	mov	r3, r0
    7584:	e7c2      	b.n	750c <memset+0x20>
    7586:	bf00      	nop

00007588 <__malloc_lock>:
    7588:	4770      	bx	lr
    758a:	bf00      	nop

0000758c <__malloc_unlock>:
    758c:	4770      	bx	lr
    758e:	bf00      	nop

00007590 <_sbrk_r>:
    7590:	b538      	push	{r3, r4, r5, lr}
    7592:	4c07      	ldr	r4, [pc, #28]	; (75b0 <_sbrk_r+0x20>)
    7594:	2300      	movs	r3, #0
    7596:	4605      	mov	r5, r0
    7598:	4608      	mov	r0, r1
    759a:	6023      	str	r3, [r4, #0]
    759c:	f7fb fab4 	bl	2b08 <_sbrk>
    75a0:	1c43      	adds	r3, r0, #1
    75a2:	d000      	beq.n	75a6 <_sbrk_r+0x16>
    75a4:	bd38      	pop	{r3, r4, r5, pc}
    75a6:	6823      	ldr	r3, [r4, #0]
    75a8:	2b00      	cmp	r3, #0
    75aa:	d0fb      	beq.n	75a4 <_sbrk_r+0x14>
    75ac:	602b      	str	r3, [r5, #0]
    75ae:	bd38      	pop	{r3, r4, r5, pc}
    75b0:	1fff24ec 	.word	0x1fff24ec

000075b4 <__register_exitproc>:
    75b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    75b8:	4c25      	ldr	r4, [pc, #148]	; (7650 <__register_exitproc+0x9c>)
    75ba:	6825      	ldr	r5, [r4, #0]
    75bc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    75c0:	4606      	mov	r6, r0
    75c2:	4688      	mov	r8, r1
    75c4:	4692      	mov	sl, r2
    75c6:	4699      	mov	r9, r3
    75c8:	b3c4      	cbz	r4, 763c <__register_exitproc+0x88>
    75ca:	6860      	ldr	r0, [r4, #4]
    75cc:	281f      	cmp	r0, #31
    75ce:	dc17      	bgt.n	7600 <__register_exitproc+0x4c>
    75d0:	1c43      	adds	r3, r0, #1
    75d2:	b176      	cbz	r6, 75f2 <__register_exitproc+0x3e>
    75d4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    75d8:	2201      	movs	r2, #1
    75da:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    75de:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    75e2:	4082      	lsls	r2, r0
    75e4:	4311      	orrs	r1, r2
    75e6:	2e02      	cmp	r6, #2
    75e8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    75ec:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    75f0:	d01e      	beq.n	7630 <__register_exitproc+0x7c>
    75f2:	3002      	adds	r0, #2
    75f4:	6063      	str	r3, [r4, #4]
    75f6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    75fa:	2000      	movs	r0, #0
    75fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7600:	4b14      	ldr	r3, [pc, #80]	; (7654 <__register_exitproc+0xa0>)
    7602:	b303      	cbz	r3, 7646 <__register_exitproc+0x92>
    7604:	f44f 70c8 	mov.w	r0, #400	; 0x190
    7608:	f7ff fcb0 	bl	6f6c <malloc>
    760c:	4604      	mov	r4, r0
    760e:	b1d0      	cbz	r0, 7646 <__register_exitproc+0x92>
    7610:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    7614:	2700      	movs	r7, #0
    7616:	e880 0088 	stmia.w	r0, {r3, r7}
    761a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    761e:	4638      	mov	r0, r7
    7620:	2301      	movs	r3, #1
    7622:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    7626:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    762a:	2e00      	cmp	r6, #0
    762c:	d0e1      	beq.n	75f2 <__register_exitproc+0x3e>
    762e:	e7d1      	b.n	75d4 <__register_exitproc+0x20>
    7630:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    7634:	430a      	orrs	r2, r1
    7636:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    763a:	e7da      	b.n	75f2 <__register_exitproc+0x3e>
    763c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    7640:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    7644:	e7c1      	b.n	75ca <__register_exitproc+0x16>
    7646:	f04f 30ff 	mov.w	r0, #4294967295
    764a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    764e:	bf00      	nop
    7650:	00007cf8 	.word	0x00007cf8
    7654:	00006f6d 	.word	0x00006f6d

00007658 <register_fini>:
    7658:	4b02      	ldr	r3, [pc, #8]	; (7664 <register_fini+0xc>)
    765a:	b113      	cbz	r3, 7662 <register_fini+0xa>
    765c:	4802      	ldr	r0, [pc, #8]	; (7668 <register_fini+0x10>)
    765e:	f000 b805 	b.w	766c <atexit>
    7662:	4770      	bx	lr
    7664:	00000000 	.word	0x00000000
    7668:	00007679 	.word	0x00007679

0000766c <atexit>:
    766c:	2300      	movs	r3, #0
    766e:	4601      	mov	r1, r0
    7670:	461a      	mov	r2, r3
    7672:	4618      	mov	r0, r3
    7674:	f7ff bf9e 	b.w	75b4 <__register_exitproc>

00007678 <__libc_fini_array>:
    7678:	b538      	push	{r3, r4, r5, lr}
    767a:	4d07      	ldr	r5, [pc, #28]	; (7698 <__libc_fini_array+0x20>)
    767c:	4c07      	ldr	r4, [pc, #28]	; (769c <__libc_fini_array+0x24>)
    767e:	1b2c      	subs	r4, r5, r4
    7680:	10a4      	asrs	r4, r4, #2
    7682:	d005      	beq.n	7690 <__libc_fini_array+0x18>
    7684:	3c01      	subs	r4, #1
    7686:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    768a:	4798      	blx	r3
    768c:	2c00      	cmp	r4, #0
    768e:	d1f9      	bne.n	7684 <__libc_fini_array+0xc>
    7690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7694:	f000 bb40 	b.w	7d18 <__init_array_end>
	...

000076a0 <_malloc_trim_r>:
    76a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76a2:	4f23      	ldr	r7, [pc, #140]	; (7730 <_malloc_trim_r+0x90>)
    76a4:	460c      	mov	r4, r1
    76a6:	4606      	mov	r6, r0
    76a8:	f7ff ff6e 	bl	7588 <__malloc_lock>
    76ac:	68bb      	ldr	r3, [r7, #8]
    76ae:	685d      	ldr	r5, [r3, #4]
    76b0:	f025 0503 	bic.w	r5, r5, #3
    76b4:	1b29      	subs	r1, r5, r4
    76b6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    76ba:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    76be:	f021 010f 	bic.w	r1, r1, #15
    76c2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    76c6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    76ca:	db07      	blt.n	76dc <_malloc_trim_r+0x3c>
    76cc:	2100      	movs	r1, #0
    76ce:	4630      	mov	r0, r6
    76d0:	f7ff ff5e 	bl	7590 <_sbrk_r>
    76d4:	68bb      	ldr	r3, [r7, #8]
    76d6:	442b      	add	r3, r5
    76d8:	4298      	cmp	r0, r3
    76da:	d004      	beq.n	76e6 <_malloc_trim_r+0x46>
    76dc:	4630      	mov	r0, r6
    76de:	f7ff ff55 	bl	758c <__malloc_unlock>
    76e2:	2000      	movs	r0, #0
    76e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    76e6:	4261      	negs	r1, r4
    76e8:	4630      	mov	r0, r6
    76ea:	f7ff ff51 	bl	7590 <_sbrk_r>
    76ee:	3001      	adds	r0, #1
    76f0:	d00d      	beq.n	770e <_malloc_trim_r+0x6e>
    76f2:	4b10      	ldr	r3, [pc, #64]	; (7734 <_malloc_trim_r+0x94>)
    76f4:	68ba      	ldr	r2, [r7, #8]
    76f6:	6819      	ldr	r1, [r3, #0]
    76f8:	1b2d      	subs	r5, r5, r4
    76fa:	f045 0501 	orr.w	r5, r5, #1
    76fe:	4630      	mov	r0, r6
    7700:	1b09      	subs	r1, r1, r4
    7702:	6055      	str	r5, [r2, #4]
    7704:	6019      	str	r1, [r3, #0]
    7706:	f7ff ff41 	bl	758c <__malloc_unlock>
    770a:	2001      	movs	r0, #1
    770c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    770e:	2100      	movs	r1, #0
    7710:	4630      	mov	r0, r6
    7712:	f7ff ff3d 	bl	7590 <_sbrk_r>
    7716:	68ba      	ldr	r2, [r7, #8]
    7718:	1a83      	subs	r3, r0, r2
    771a:	2b0f      	cmp	r3, #15
    771c:	ddde      	ble.n	76dc <_malloc_trim_r+0x3c>
    771e:	4c06      	ldr	r4, [pc, #24]	; (7738 <_malloc_trim_r+0x98>)
    7720:	4904      	ldr	r1, [pc, #16]	; (7734 <_malloc_trim_r+0x94>)
    7722:	6824      	ldr	r4, [r4, #0]
    7724:	f043 0301 	orr.w	r3, r3, #1
    7728:	1b00      	subs	r0, r0, r4
    772a:	6053      	str	r3, [r2, #4]
    772c:	6008      	str	r0, [r1, #0]
    772e:	e7d5      	b.n	76dc <_malloc_trim_r+0x3c>
    7730:	1fff12fc 	.word	0x1fff12fc
    7734:	1fff24b0 	.word	0x1fff24b0
    7738:	1fff1708 	.word	0x1fff1708

0000773c <_free_r>:
    773c:	2900      	cmp	r1, #0
    773e:	d045      	beq.n	77cc <_free_r+0x90>
    7740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7744:	460d      	mov	r5, r1
    7746:	4680      	mov	r8, r0
    7748:	f7ff ff1e 	bl	7588 <__malloc_lock>
    774c:	f855 7c04 	ldr.w	r7, [r5, #-4]
    7750:	496a      	ldr	r1, [pc, #424]	; (78fc <_free_r+0x1c0>)
    7752:	f027 0301 	bic.w	r3, r7, #1
    7756:	f1a5 0408 	sub.w	r4, r5, #8
    775a:	18e2      	adds	r2, r4, r3
    775c:	688e      	ldr	r6, [r1, #8]
    775e:	6850      	ldr	r0, [r2, #4]
    7760:	42b2      	cmp	r2, r6
    7762:	f020 0003 	bic.w	r0, r0, #3
    7766:	d062      	beq.n	782e <_free_r+0xf2>
    7768:	07fe      	lsls	r6, r7, #31
    776a:	6050      	str	r0, [r2, #4]
    776c:	d40b      	bmi.n	7786 <_free_r+0x4a>
    776e:	f855 7c08 	ldr.w	r7, [r5, #-8]
    7772:	1be4      	subs	r4, r4, r7
    7774:	f101 0e08 	add.w	lr, r1, #8
    7778:	68a5      	ldr	r5, [r4, #8]
    777a:	4575      	cmp	r5, lr
    777c:	443b      	add	r3, r7
    777e:	d06f      	beq.n	7860 <_free_r+0x124>
    7780:	68e7      	ldr	r7, [r4, #12]
    7782:	60ef      	str	r7, [r5, #12]
    7784:	60bd      	str	r5, [r7, #8]
    7786:	1815      	adds	r5, r2, r0
    7788:	686d      	ldr	r5, [r5, #4]
    778a:	07ed      	lsls	r5, r5, #31
    778c:	d542      	bpl.n	7814 <_free_r+0xd8>
    778e:	f043 0201 	orr.w	r2, r3, #1
    7792:	6062      	str	r2, [r4, #4]
    7794:	50e3      	str	r3, [r4, r3]
    7796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    779a:	d218      	bcs.n	77ce <_free_r+0x92>
    779c:	08db      	lsrs	r3, r3, #3
    779e:	1c5a      	adds	r2, r3, #1
    77a0:	684d      	ldr	r5, [r1, #4]
    77a2:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    77a6:	60a7      	str	r7, [r4, #8]
    77a8:	2001      	movs	r0, #1
    77aa:	109b      	asrs	r3, r3, #2
    77ac:	fa00 f303 	lsl.w	r3, r0, r3
    77b0:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    77b4:	431d      	orrs	r5, r3
    77b6:	3808      	subs	r0, #8
    77b8:	60e0      	str	r0, [r4, #12]
    77ba:	604d      	str	r5, [r1, #4]
    77bc:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    77c0:	60fc      	str	r4, [r7, #12]
    77c2:	4640      	mov	r0, r8
    77c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    77c8:	f7ff bee0 	b.w	758c <__malloc_unlock>
    77cc:	4770      	bx	lr
    77ce:	0a5a      	lsrs	r2, r3, #9
    77d0:	2a04      	cmp	r2, #4
    77d2:	d853      	bhi.n	787c <_free_r+0x140>
    77d4:	099a      	lsrs	r2, r3, #6
    77d6:	f102 0739 	add.w	r7, r2, #57	; 0x39
    77da:	007f      	lsls	r7, r7, #1
    77dc:	f102 0538 	add.w	r5, r2, #56	; 0x38
    77e0:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    77e4:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    77e8:	4944      	ldr	r1, [pc, #272]	; (78fc <_free_r+0x1c0>)
    77ea:	3808      	subs	r0, #8
    77ec:	4290      	cmp	r0, r2
    77ee:	d04d      	beq.n	788c <_free_r+0x150>
    77f0:	6851      	ldr	r1, [r2, #4]
    77f2:	f021 0103 	bic.w	r1, r1, #3
    77f6:	428b      	cmp	r3, r1
    77f8:	d202      	bcs.n	7800 <_free_r+0xc4>
    77fa:	6892      	ldr	r2, [r2, #8]
    77fc:	4290      	cmp	r0, r2
    77fe:	d1f7      	bne.n	77f0 <_free_r+0xb4>
    7800:	68d0      	ldr	r0, [r2, #12]
    7802:	60e0      	str	r0, [r4, #12]
    7804:	60a2      	str	r2, [r4, #8]
    7806:	6084      	str	r4, [r0, #8]
    7808:	60d4      	str	r4, [r2, #12]
    780a:	4640      	mov	r0, r8
    780c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7810:	f7ff bebc 	b.w	758c <__malloc_unlock>
    7814:	6895      	ldr	r5, [r2, #8]
    7816:	4f3a      	ldr	r7, [pc, #232]	; (7900 <_free_r+0x1c4>)
    7818:	42bd      	cmp	r5, r7
    781a:	4403      	add	r3, r0
    781c:	d03f      	beq.n	789e <_free_r+0x162>
    781e:	68d0      	ldr	r0, [r2, #12]
    7820:	60e8      	str	r0, [r5, #12]
    7822:	f043 0201 	orr.w	r2, r3, #1
    7826:	6085      	str	r5, [r0, #8]
    7828:	6062      	str	r2, [r4, #4]
    782a:	50e3      	str	r3, [r4, r3]
    782c:	e7b3      	b.n	7796 <_free_r+0x5a>
    782e:	07ff      	lsls	r7, r7, #31
    7830:	4403      	add	r3, r0
    7832:	d407      	bmi.n	7844 <_free_r+0x108>
    7834:	f855 2c08 	ldr.w	r2, [r5, #-8]
    7838:	1aa4      	subs	r4, r4, r2
    783a:	4413      	add	r3, r2
    783c:	68a0      	ldr	r0, [r4, #8]
    783e:	68e2      	ldr	r2, [r4, #12]
    7840:	60c2      	str	r2, [r0, #12]
    7842:	6090      	str	r0, [r2, #8]
    7844:	4a2f      	ldr	r2, [pc, #188]	; (7904 <_free_r+0x1c8>)
    7846:	6812      	ldr	r2, [r2, #0]
    7848:	f043 0001 	orr.w	r0, r3, #1
    784c:	4293      	cmp	r3, r2
    784e:	6060      	str	r0, [r4, #4]
    7850:	608c      	str	r4, [r1, #8]
    7852:	d3b6      	bcc.n	77c2 <_free_r+0x86>
    7854:	4b2c      	ldr	r3, [pc, #176]	; (7908 <_free_r+0x1cc>)
    7856:	4640      	mov	r0, r8
    7858:	6819      	ldr	r1, [r3, #0]
    785a:	f7ff ff21 	bl	76a0 <_malloc_trim_r>
    785e:	e7b0      	b.n	77c2 <_free_r+0x86>
    7860:	1811      	adds	r1, r2, r0
    7862:	6849      	ldr	r1, [r1, #4]
    7864:	07c9      	lsls	r1, r1, #31
    7866:	d444      	bmi.n	78f2 <_free_r+0x1b6>
    7868:	6891      	ldr	r1, [r2, #8]
    786a:	68d2      	ldr	r2, [r2, #12]
    786c:	60ca      	str	r2, [r1, #12]
    786e:	4403      	add	r3, r0
    7870:	f043 0001 	orr.w	r0, r3, #1
    7874:	6091      	str	r1, [r2, #8]
    7876:	6060      	str	r0, [r4, #4]
    7878:	50e3      	str	r3, [r4, r3]
    787a:	e7a2      	b.n	77c2 <_free_r+0x86>
    787c:	2a14      	cmp	r2, #20
    787e:	d817      	bhi.n	78b0 <_free_r+0x174>
    7880:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    7884:	007f      	lsls	r7, r7, #1
    7886:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    788a:	e7a9      	b.n	77e0 <_free_r+0xa4>
    788c:	10aa      	asrs	r2, r5, #2
    788e:	684b      	ldr	r3, [r1, #4]
    7890:	2501      	movs	r5, #1
    7892:	fa05 f202 	lsl.w	r2, r5, r2
    7896:	4313      	orrs	r3, r2
    7898:	604b      	str	r3, [r1, #4]
    789a:	4602      	mov	r2, r0
    789c:	e7b1      	b.n	7802 <_free_r+0xc6>
    789e:	f043 0201 	orr.w	r2, r3, #1
    78a2:	614c      	str	r4, [r1, #20]
    78a4:	610c      	str	r4, [r1, #16]
    78a6:	60e5      	str	r5, [r4, #12]
    78a8:	60a5      	str	r5, [r4, #8]
    78aa:	6062      	str	r2, [r4, #4]
    78ac:	50e3      	str	r3, [r4, r3]
    78ae:	e788      	b.n	77c2 <_free_r+0x86>
    78b0:	2a54      	cmp	r2, #84	; 0x54
    78b2:	d806      	bhi.n	78c2 <_free_r+0x186>
    78b4:	0b1a      	lsrs	r2, r3, #12
    78b6:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    78ba:	007f      	lsls	r7, r7, #1
    78bc:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    78c0:	e78e      	b.n	77e0 <_free_r+0xa4>
    78c2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    78c6:	d806      	bhi.n	78d6 <_free_r+0x19a>
    78c8:	0bda      	lsrs	r2, r3, #15
    78ca:	f102 0778 	add.w	r7, r2, #120	; 0x78
    78ce:	007f      	lsls	r7, r7, #1
    78d0:	f102 0577 	add.w	r5, r2, #119	; 0x77
    78d4:	e784      	b.n	77e0 <_free_r+0xa4>
    78d6:	f240 5054 	movw	r0, #1364	; 0x554
    78da:	4282      	cmp	r2, r0
    78dc:	d806      	bhi.n	78ec <_free_r+0x1b0>
    78de:	0c9a      	lsrs	r2, r3, #18
    78e0:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    78e4:	007f      	lsls	r7, r7, #1
    78e6:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    78ea:	e779      	b.n	77e0 <_free_r+0xa4>
    78ec:	27fe      	movs	r7, #254	; 0xfe
    78ee:	257e      	movs	r5, #126	; 0x7e
    78f0:	e776      	b.n	77e0 <_free_r+0xa4>
    78f2:	f043 0201 	orr.w	r2, r3, #1
    78f6:	6062      	str	r2, [r4, #4]
    78f8:	50e3      	str	r3, [r4, r3]
    78fa:	e762      	b.n	77c2 <_free_r+0x86>
    78fc:	1fff12fc 	.word	0x1fff12fc
    7900:	1fff1304 	.word	0x1fff1304
    7904:	1fff1704 	.word	0x1fff1704
    7908:	1fff24ac 	.word	0x1fff24ac
    790c:	30524556 	.word	0x30524556
    7910:	325f3131 	.word	0x325f3131
    7914:	31383130 	.word	0x31383130
    7918:	5f373032 	.word	0x5f373032
    791c:	2e574a50 	.word	0x2e574a50
    7920:	00000000 	.word	0x00000000
    7924:	65206f6e 	.word	0x65206f6e
    7928:	726f7272 	.word	0x726f7272
    792c:	ffffff00 	.word	0xffffff00

00007930 <SPISettings::ctar_div_table>:
    7930:	00030002 00050004 00080006 000c000a     ................
    7940:	00140010 00200018 00380028 00600040     ...... .(.8.@.`.
    7950:	00c00080 01800100 02800200 ffff0300     ................

00007960 <SPIClass::spi0_hardware>:
    7960:	4004803c 00001000 00001a04 00007fff     <..@............
    7970:	00000e0f 0000225d ff27080c 00000200     ....]"....'.....
    7980:	00000200 00000200 00000000 ff1c070b     ................
    7990:	00000200 00000200 00000200 00000000     ................
    79a0:	001b0e0d 00000200 00000200 00000200     ................
    79b0:	0609020a 16151714 002d1a0f 00000200     ..........-.....
    79c0:	00000200 00000200 00000200 00000200     ................
    79d0:	00000200 00000200 00000200 00000200     ................
    79e0:	00000200 00000300 02020101 08080404     ................
    79f0:	00200110                                .. .

000079f4 <SPISettings::ctar_clock_table>:
    79f4:	80000000 80010000 00000000 80020000     ................
    7a04:	00010000 00001001 00020000 00011001     ................
    7a14:	00002003 00020001 00012003 00003004     . ....... ...0..
    7a24:	00022003 00032003 00004005 00014005     . ... ...@...@..
    7a34:	00005006 00015006 00006007 00016007     .P...P...`...`..
    7a44:	00007008 00026007 00017008              .p...`...p..

00007a50 <digital_pin_to_info_PGM>:
    7a50:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
    7a60:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
    7a70:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
    7a80:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
    7a90:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
    7aa0:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
    7ab0:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
    7ac0:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
    7ad0:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
    7ae0:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
    7af0:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
    7b00:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
    7b10:	43fe2068 4004d068 43fe0014 40049014     h .Ch..@...C...@
    7b20:	43fe0038 40049038 43fe003c 4004903c     8..C8..@<..C<..@
    7b30:	43fe0040 40049040 43fe0848 4004a048     @..C@..@H..CH..@
    7b40:	43fe084c 4004a04c 43fe0828 4004a028     L..CL..@(..C(..@
    7b50:	43fe082c 4004a02c 43fe2060 4004d060     ,..C,..@` .C`..@
    7b60:	43fe2064 4004d064 43fe1020 4004b020     d .Cd..@ ..C ..@
    7b70:	43fe1024 4004b024 43fe1028 4004b028     $..C$..@(..C(..@
    7b80:	43fe102c 4004b02c 43fe0044 40049044     ,..C,..@D..CD..@
    7b90:	43fe0070 40049070 43fe0074 40049074     p..Cp..@t..Ct..@
    7ba0:	43fe0068 40049068 43fe0850 4004a050     h..Ch..@P..CP..@
    7bb0:	43fe0858 4004a058 43fe085c 4004a05c     X..CX..@\..C\..@
    7bc0:	43fe0854 4004a054 43fe1820 4004c020     T..CT..@ ..C ..@
    7bd0:	43fe1824 4004c024 43fe0810 4004a010     $..C$..@...C...@
    7be0:	43fe0814 4004a014 43fe1838 4004c038     ...C...@8..C8..@
    7bf0:	43fe1834 4004c034 43fe1830 4004c030     4..C4..@0..C0..@
    7c00:	43fe183c 4004c03c 43fe182c 4004c02c     <..C<..@,..C,..@
    7c10:	43fe2028 4004d028 43fe202c 4004d02c     ( .C(..@, .C,..@
    7c20:	43fe2000 4004d000 43fe2004 4004d004     . .C...@. .C...@
    7c30:	43fe2008 4004d008 43fe200c 4004d00c     . .C...@. .C...@
    7c40:	43fe2010 4004d010 43fe2014 4004d014     . .C...@. .C...@

00007c50 <usb_endpoint_config_table>:
    7c50:	15191500                                ....

00007c54 <usb_descriptor_list>:
    7c54:	00000100 1fff0e2c 00000012 00000200     ....,...........
    7c64:	1fff0e58 00000043 00000300 1fff0eb4     X...C...........
    7c74:	00000000 04090301 1fff0e40 00000000     ........@.......
    7c84:	04090302 1fff0e9c 00000000 04090303     ................
    7c94:	1fff0eb8 00000000 00000000 00000000     ................
    7ca4:	00000000 00707865 00676f6c 00776f70     ....exp.log.pow.
    7cb4:	ffffffff                                ....

00007cb8 <halF>:
    7cb8:	00000000 3fe00000 00000000 bfe00000     .......?........

00007cc8 <ln2LO>:
    7cc8:	35793c76 3dea39ef 35793c76 bdea39ef     v<y5.9.=v<y5.9..

00007cd8 <ln2HI>:
    7cd8:	fee00000 3fe62e42 fee00000 bfe62e42     ....B..?....B...

00007ce8 <TWO52>:
    7ce8:	00000000 43300000 00000000 c3300000     ......0C......0.

00007cf8 <_global_impure_ptr>:
    7cf8:	1fff0ed0                                ....

00007cfc <_init>:
    7cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cfe:	bf00      	nop
    7d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7d02:	bc08      	pop	{r3}
    7d04:	469e      	mov	lr, r3
    7d06:	4770      	bx	lr

00007d08 <__init_array_start>:
    7d08:	00007659 	.word	0x00007659

00007d0c <__frame_dummy_init_array_entry>:
    7d0c:	00000435 0000221d 00002965              5...."..e)..

Disassembly of section .fini:

00007d18 <_fini>:
    7d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d1a:	bf00      	nop
